Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    COMMENT_BLOCK
    COMPILER_DIRECTIVE
    RUNE

Grammar

Rule 0     S' -> program
Rule 1     program -> package imports statement
Rule 2     package -> PACKAGE ID
Rule 3     imports -> IMPORT STRING
Rule 4     imports -> IMPORT LPAREN import RPAREN
Rule 5     imports -> empty
Rule 6     import -> STRING import
Rule 7     import -> empty
Rule 8     statement -> function_statement statement
Rule 9     statement -> variable_global_statement statement
Rule 10    statement -> struct_statement statement
Rule 11    statement -> const statement
Rule 12    statement -> method_statement statement
Rule 13    statement -> interface_statement statement
Rule 14    statement -> type_alias statement
Rule 15    statement -> empty
Rule 16    type_alias -> TYPE ID types
Rule 17    interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE
Rule 18    method_list -> ID LPAREN args RPAREN types method_list
Rule 19    method_list -> empty
Rule 20    method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
Rule 21    method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
Rule 22    const -> CONST LPAREN constant RPAREN
Rule 23    constant -> ID EQUAL value constant
Rule 24    constant -> empty
Rule 25    struct_statement -> TYPE ID STRUCT LBRACE field RBRACE
Rule 26    field -> ID types field
Rule 27    field -> ID ID DOT ID
Rule 28    field -> empty
Rule 29    function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
Rule 30    function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE
Rule 31    function -> ID LPAREN parameters RPAREN
Rule 32    parameters -> expression
Rule 33    parameters -> CHAN TYPES
Rule 34    parameters -> expression COMMA parameters
Rule 35    parameters -> empty
Rule 36    args -> ID types
Rule 37    args -> ID CHAN ID
Rule 38    args -> ID CHAN ID COMMA args
Rule 39    args -> ID CHAN types
Rule 40    args -> ID CHAN types COMMA args
Rule 41    args -> ID types COMMA args
Rule 42    args -> ID COMMA args
Rule 43    args -> ID collection_args COMMA args
Rule 44    args -> ID collection_args
Rule 45    args -> ID POINTER callback
Rule 46    args -> p_map_args COMMA args
Rule 47    args -> p_map_args
Rule 48    args -> empty
Rule 49    collection_args -> LBRACKET RBRACKET POINTER ID
Rule 50    collection_args -> LBRACKET RBRACKET ID
Rule 51    p_map_args -> ID POINTER brackets TYPES
Rule 52    brackets -> LBRACKET NUMBER RBRACKET brackets
Rule 53    brackets -> LBRACKET NUMBER RBRACKET
Rule 54    brackets -> LBRACKET STRING RBRACKET brackets
Rule 55    brackets -> LBRACKET STRING RBRACKET
Rule 56    brackets -> LBRACKET ID RBRACKET
Rule 57    brackets -> LBRACKET ID RBRACKET brackets
Rule 58    types -> TYPES
Rule 59    types -> array_statement
Rule 60    types -> pointer_statement
Rule 61    types -> slice_statement
Rule 62    types -> MAP LBRACKET TYPES RBRACKET
Rule 63    pointer_statement -> POINTER types
Rule 64    pointer_statement -> POINTER ID
Rule 65    array_statement -> LBRACKET NUMBER RBRACKET TYPES
Rule 66    array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
Rule 67    array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES
Rule 68    array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
Rule 69    slice_statement -> LBRACKET RBRACKET TYPES
Rule 70    slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE
Rule 71    variable_global_statement -> VAR ID types
Rule 72    values -> value COMMA values
Rule 73    values -> value
Rule 74    values -> empty
Rule 75    content -> empty
Rule 76    content -> variable_statement content
Rule 77    content -> array_statement content
Rule 78    content -> callback content
Rule 79    content -> variable_redeclaration content
Rule 80    content -> if content
Rule 81    content -> for content
Rule 82    content -> BREAK content
Rule 83    content -> goroutine content
Rule 84    content -> increment content
Rule 85    content -> decrement content
Rule 86    content -> switch content
Rule 87    content -> ID channel content
Rule 88    content -> return content
Rule 89    content -> defer content
Rule 90    content -> continue content
Rule 91    content -> select content
Rule 92    content -> channel content
Rule 93    continue -> CONTINUE
Rule 94    channel -> CHANNEL_OP value
Rule 95    channel -> CHANNEL_OP ID
Rule 96    channel -> CHANNEL_OP callback
Rule 97    channel -> CHANNEL_OP struct_declaretion
Rule 98    lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE
Rule 99    lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE
Rule 100   select -> SELECT LBRACE select_cases RBRACE
Rule 101   select_cases -> CASE expression COLON content select_cases
Rule 102   select_cases -> DEFAULT COLON content
Rule 103   select_cases -> empty
Rule 104   defer -> DEFER callback
Rule 105   switch -> SWITCH ID LBRACE cases_value default RBRACE
Rule 106   switch -> SWITCH LBRACE cases_rel default RBRACE
Rule 107   cases_rel -> CASE case_condition COLON content cases_rel
Rule 108   cases_rel -> empty
Rule 109   case_condition -> ID REL_OP value
Rule 110   case_condition -> boolean
Rule 111   case_condition -> callback
Rule 112   default -> DEFAULT COLON content
Rule 113   default -> empty
Rule 114   cases_value -> CASE value COLON content cases_value
Rule 115   cases_value -> empty
Rule 116   goroutine -> GO callback
Rule 117   goroutine -> GO lambda LPAREN parameters RPAREN
Rule 118   if -> IF expression LBRACE content RBRACE else
Rule 119   else -> ELSE LBRACE content RBRACE
Rule 120   else -> ELSE if
Rule 121   else -> empty
Rule 122   expression -> value
Rule 123   expression -> LPAREN expression RPAREN
Rule 124   expression -> expression ARITH_OP expression
Rule 125   expression -> expression REL_OP expression
Rule 126   expression -> expression LOG_OP expression
Rule 127   expression -> expression POINTER expression
Rule 128   expression -> NOT expression
Rule 129   expression -> ID COLON_EQUAL channel
Rule 130   expression -> channel
Rule 131   expression -> increment
Rule 132   expression -> lambda
Rule 133   expression -> decrement
Rule 134   expression -> struct
Rule 135   expression -> collection_statement
Rule 136   expression -> callback
Rule 137   expression -> struct_declaretion
Rule 138   expression -> address_pointer
Rule 139   expression -> ID
Rule 140   expression -> collection
Rule 141   expression -> map_statement
Rule 142   expression -> map
Rule 143   collection -> ID LBRACKET ID RBRACKET DOT ID
Rule 144   collection -> ID LBRACKET ID RBRACKET
Rule 145   for -> FOR LBRACE content RBRACE
Rule 146   for -> FOR NOT ID LBRACE content RBRACE
Rule 147   for -> FOR expression LBRACE content RBRACE
Rule 148   for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
Rule 149   for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
Rule 150   for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
Rule 151   for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
Rule 152   for_declaration -> ID COLON_EQUAL NUMBER
Rule 153   map_statement -> MAP LBRACKET TYPES RBRACKET map_statement
Rule 154   map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
Rule 155   map_statement -> MAP LBRACKET TYPES RBRACKET TYPES
Rule 156   map -> empty
Rule 157   map -> LBRACE map RBRACE
Rule 158   map -> LBRACE map RBRACE COMMA map
Rule 159   map -> value COLON value
Rule 160   map -> value COLON value COMMA map
Rule 161   map -> value COLON map
Rule 162   map -> value COLON map COMMA map
Rule 163   return -> RETURN
Rule 164   return -> RETURN expression
Rule 165   return -> empty
Rule 166   struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE
Rule 167   struct_declaretion_values -> values
Rule 168   struct_declaretion_values -> LBRACE struct_declaretion_values RBRACE
Rule 169   collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
Rule 170   collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE
Rule 171   collection_statement -> ADDRESS ID LBRACE collection_types RBRACE
Rule 172   collection_statement -> ID LBRACE collection_types RBRACE
Rule 173   collection_types -> ID
Rule 174   collection_types -> ID COMMA collection_types
Rule 175   collection_types -> ID COLON value
Rule 176   collection_types -> ID COLON value COMMA collection_types
Rule 177   variable_statement -> VAR ID EQUAL slice_statement
Rule 178   variable_statement -> VAR ID EQUAL array_statement
Rule 179   variable_statement -> VAR ID types EQUAL expression
Rule 180   variable_statement -> VAR ID EQUAL expression
Rule 181   variable_statement -> VAR ID ID EQUAL expression
Rule 182   variable_statement -> VAR ID callback
Rule 183   variable_statement -> ID map_position EQUAL expression
Rule 184   variable_statement -> ID COLON_EQUAL expression
Rule 185   variable_statement -> map_position COLON_EQUAL expression
Rule 186   variable_statement -> ID COLON_EQUAL slice_statement
Rule 187   variable_statement -> ID COLON_EQUAL array_statement
Rule 188   variable_statement -> VAR ID TYPES
Rule 189   map_position -> LBRACKET STRING RBRACKET map_position
Rule 190   map_position -> LBRACKET NUMBER RBRACKET map_position
Rule 191   map_position -> LBRACKET STRING RBRACKET
Rule 192   map_position -> LBRACKET NUMBER RBRACKET
Rule 193   variable_redeclaration -> ID EQUAL expression
Rule 194   variable_redeclaration -> ID ASSIGN_OP expression
Rule 195   variable_redeclaration -> callback ASSIGN_OP expression
Rule 196   variable_redeclaration -> ID DOT ID EQUAL expression
Rule 197   boolean -> FALSE
Rule 198   boolean -> TRUE
Rule 199   pointer -> ID LBRACKET NUMBER RBRACKET
Rule 200   pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET
Rule 201   increment -> ID INCREMENT
Rule 202   decrement -> ID DECREMENT
Rule 203   address_pointer -> ADDRESS ID
Rule 204   struct -> ID DOT ID
Rule 205   struct -> ID DOT struct
Rule 206   callback -> function
Rule 207   callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
Rule 208   callback -> ID
Rule 209   callback -> function DOT callback
Rule 210   callback -> ID DOT callback
Rule 211   callback -> empty
Rule 212   value -> NUMBER
Rule 213   value -> STRING
Rule 214   value -> LBRACE values RBRACE
Rule 215   value -> map_varible
Rule 216   value -> boolean
Rule 217   value -> pointer
Rule 218   map_varible -> ID brackets
Rule 219   empty -> <empty>

Terminals, with rules where they appear

ADDRESS              : 171 203
ARITH_OP             : 124
ASSIGN_OP            : 194 195
BREAK                : 82
CASE                 : 101 107 114
CHAN                 : 33 37 38 39 40
CHANNEL_OP           : 94 95 96 97
COLON                : 101 102 107 112 114 159 160 161 162 175 176 200
COLON_EQUAL          : 129 149 150 151 152 184 185 186 187
COMMA                : 34 38 40 41 42 43 46 72 149 150 158 160 162 174 176
COMMENT              : 
COMMENT_BLOCK        : 
COMPILER_DIRECTIVE   : 
CONST                : 22
CONTINUE             : 93
DECREMENT            : 202
DEFAULT              : 102 112
DEFER                : 104
DOT                  : 27 67 67 67 68 68 68 143 196 204 205 207 209 210
ELSE                 : 119 120
EQUAL                : 23 177 178 179 180 181 183 193 196
FALSE                : 197
FOR                  : 145 146 147 148 149 150 151
FUNC                 : 20 21 29 30 98 99
GO                   : 116 117
ID                   : 2 16 17 18 20 20 20 21 21 21 23 25 26 27 27 27 29 30 31 36 37 37 38 38 39 40 41 42 43 44 45 49 50 51 56 57 64 71 87 95 105 109 129 139 143 143 143 144 144 146 149 149 149 150 150 151 151 152 166 169 170 171 172 173 174 175 176 177 178 179 180 181 181 182 183 184 186 187 188 193 194 196 196 199 200 201 202 203 204 204 205 207 207 207 207 208 210 218
IF                   : 118
IMPORT               : 3 4
INCREMENT            : 201
INTERFACE            : 17
LBRACE               : 17 20 21 25 29 30 66 68 70 98 99 100 105 106 118 119 145 146 147 148 149 150 151 154 157 158 166 168 169 170 171 172 214
LBRACKET             : 49 50 52 53 54 55 56 57 62 65 66 67 68 69 70 143 144 153 154 155 169 170 189 190 191 192 199 200
LOG_OP               : 126
LPAREN               : 4 18 20 20 21 21 22 29 30 31 98 99 117 123 207 207
MAP                  : 62 153 154 155
NOT                  : 128 146
NUMBER               : 52 53 65 66 152 190 192 199 200 200 212
PACKAGE              : 2
POINTER              : 45 49 51 63 64 127 169
RANGE                : 149 150 151
RBRACE               : 17 20 21 25 29 30 66 68 70 98 99 100 105 106 118 119 145 146 147 148 149 150 151 154 157 158 166 168 169 170 171 172 214
RBRACKET             : 49 50 52 53 54 55 56 57 62 65 66 67 68 69 70 143 144 153 154 155 169 170 189 190 191 192 199 200
REL_OP               : 109 125
RETURN               : 163 164
RPAREN               : 4 18 20 20 21 21 22 29 30 31 98 99 117 123 207 207
RUNE                 : 
SELECT               : 100
SEMICOLON            : 148 148
STRING               : 3 6 54 55 189 191 213
STRUCT               : 25
SWITCH               : 105 106
TRUE                 : 198
TYPE                 : 16 17 25
TYPES                : 21 33 51 58 62 65 66 67 68 69 70 153 154 154 155 155 188
UNDERSCORE           : 150
VAR                  : 71 177 178 179 180 181 182 188
error                : 

Nonterminals, with rules where they appear

address_pointer      : 138
args                 : 18 20 21 29 30 38 40 41 42 43 46 98 99
array_statement      : 59 77 178 187
boolean              : 110 216
brackets             : 51 52 54 57 218
callback             : 45 78 96 104 111 116 136 182 195 209 210
case_condition       : 107
cases_rel            : 106 107
cases_value          : 105 114
channel              : 87 92 129 130
collection           : 140
collection_args      : 43 44
collection_statement : 135
collection_types     : 169 170 171 172 174 176
const                : 11
constant             : 22 23
content              : 20 21 29 30 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 98 99 101 102 107 112 114 118 119 145 146 147 148 149 150 151
continue             : 90
decrement            : 85 133
default              : 105 106
defer                : 89
else                 : 118
empty                : 5 7 15 19 24 28 35 48 74 75 103 108 113 115 121 156 165 211
expression           : 32 34 101 118 123 124 124 125 125 126 126 127 127 128 147 148 148 164 179 180 181 183 184 185 193 194 195 196
field                : 25 26
for                  : 81
for_declaration      : 148
function             : 206 209
function_statement   : 8
goroutine            : 83
if                   : 80 120
import               : 4 6
imports              : 1
increment            : 84 131
interface_statement  : 13
lambda               : 117 132
map                  : 142 154 157 158 158 160 161 162 162
map_position         : 183 185 189 190
map_statement        : 141 153
map_varible          : 215
method_list          : 17 18
method_statement     : 12
p_map_args           : 46 47
package              : 1
parameters           : 31 34 117
pointer              : 217
pointer_statement    : 60
program              : 0
return               : 88
select               : 91
select_cases         : 100 101
slice_statement      : 61 177 186
statement            : 1 8 9 10 11 12 13 14
struct               : 134 205
struct_declaretion   : 97 137
struct_declaretion_values : 166 168
struct_statement     : 10
switch               : 86
type_alias           : 14
types                : 16 18 26 29 36 39 40 41 63 71 98 179
value                : 23 72 73 94 109 114 122 159 159 160 160 161 162 175 176
values               : 66 68 70 72 167 214
variable_global_statement : 9
variable_redeclaration : 79
variable_statement   : 76

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . package imports statement
    (2) package -> . PACKAGE ID

    PACKAGE         shift and go to state 3

    program                        shift and go to state 1
    package                        shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> package . imports statement
    (3) imports -> . IMPORT STRING
    (4) imports -> . IMPORT LPAREN import RPAREN
    (5) imports -> . empty
    (219) empty -> .

    IMPORT          shift and go to state 5
    FUNC            reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    TYPE            reduce using rule 219 (empty -> .)
    CONST           reduce using rule 219 (empty -> .)
    $end            reduce using rule 219 (empty -> .)

    imports                        shift and go to state 4
    empty                          shift and go to state 6

state 3

    (2) package -> PACKAGE . ID

    ID              shift and go to state 7


state 4

    (1) program -> package imports . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (29) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (30) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (71) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (219) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 219 (empty -> .)

    statement                      shift and go to state 8
    function_statement             shift and go to state 9
    variable_global_statement      shift and go to state 10
    struct_statement               shift and go to state 11
    const                          shift and go to state 12
    method_statement               shift and go to state 13
    interface_statement            shift and go to state 14
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 5

    (3) imports -> IMPORT . STRING
    (4) imports -> IMPORT . LPAREN import RPAREN

    STRING          shift and go to state 21
    LPAREN          shift and go to state 22


state 6

    (5) imports -> empty .

    FUNC            reduce using rule 5 (imports -> empty .)
    VAR             reduce using rule 5 (imports -> empty .)
    TYPE            reduce using rule 5 (imports -> empty .)
    CONST           reduce using rule 5 (imports -> empty .)
    $end            reduce using rule 5 (imports -> empty .)


state 7

    (2) package -> PACKAGE ID .

    IMPORT          reduce using rule 2 (package -> PACKAGE ID .)
    FUNC            reduce using rule 2 (package -> PACKAGE ID .)
    VAR             reduce using rule 2 (package -> PACKAGE ID .)
    TYPE            reduce using rule 2 (package -> PACKAGE ID .)
    CONST           reduce using rule 2 (package -> PACKAGE ID .)
    $end            reduce using rule 2 (package -> PACKAGE ID .)


state 8

    (1) program -> package imports statement .

    $end            reduce using rule 1 (program -> package imports statement .)


state 9

    (8) statement -> function_statement . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (29) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (30) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (71) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (219) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 219 (empty -> .)

    function_statement             shift and go to state 9
    statement                      shift and go to state 23
    variable_global_statement      shift and go to state 10
    struct_statement               shift and go to state 11
    const                          shift and go to state 12
    method_statement               shift and go to state 13
    interface_statement            shift and go to state 14
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 10

    (9) statement -> variable_global_statement . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (29) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (30) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (71) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (219) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 219 (empty -> .)

    variable_global_statement      shift and go to state 10
    statement                      shift and go to state 24
    function_statement             shift and go to state 9
    struct_statement               shift and go to state 11
    const                          shift and go to state 12
    method_statement               shift and go to state 13
    interface_statement            shift and go to state 14
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 11

    (10) statement -> struct_statement . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (29) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (30) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (71) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (219) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 219 (empty -> .)

    struct_statement               shift and go to state 11
    statement                      shift and go to state 25
    function_statement             shift and go to state 9
    variable_global_statement      shift and go to state 10
    const                          shift and go to state 12
    method_statement               shift and go to state 13
    interface_statement            shift and go to state 14
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 12

    (11) statement -> const . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (29) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (30) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (71) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (219) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 219 (empty -> .)

    const                          shift and go to state 12
    statement                      shift and go to state 26
    function_statement             shift and go to state 9
    variable_global_statement      shift and go to state 10
    struct_statement               shift and go to state 11
    method_statement               shift and go to state 13
    interface_statement            shift and go to state 14
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 13

    (12) statement -> method_statement . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (29) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (30) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (71) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (219) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 219 (empty -> .)

    method_statement               shift and go to state 13
    statement                      shift and go to state 27
    function_statement             shift and go to state 9
    variable_global_statement      shift and go to state 10
    struct_statement               shift and go to state 11
    const                          shift and go to state 12
    interface_statement            shift and go to state 14
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 14

    (13) statement -> interface_statement . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (29) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (30) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (71) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (219) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 219 (empty -> .)

    interface_statement            shift and go to state 14
    statement                      shift and go to state 28
    function_statement             shift and go to state 9
    variable_global_statement      shift and go to state 10
    struct_statement               shift and go to state 11
    const                          shift and go to state 12
    method_statement               shift and go to state 13
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 15

    (14) statement -> type_alias . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (29) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (30) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (71) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (219) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 219 (empty -> .)

    type_alias                     shift and go to state 15
    statement                      shift and go to state 29
    function_statement             shift and go to state 9
    variable_global_statement      shift and go to state 10
    struct_statement               shift and go to state 11
    const                          shift and go to state 12
    method_statement               shift and go to state 13
    interface_statement            shift and go to state 14
    empty                          shift and go to state 16

state 16

    (15) statement -> empty .

    $end            reduce using rule 15 (statement -> empty .)


state 17

    (29) function_statement -> FUNC . ID LPAREN args RPAREN types LBRACE content RBRACE
    (30) function_statement -> FUNC . ID LPAREN args RPAREN LBRACE content RBRACE
    (20) method_statement -> FUNC . LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC . LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE

    ID              shift and go to state 30
    LPAREN          shift and go to state 31


state 18

    (71) variable_global_statement -> VAR . ID types

    ID              shift and go to state 32


state 19

    (25) struct_statement -> TYPE . ID STRUCT LBRACE field RBRACE
    (17) interface_statement -> TYPE . ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> TYPE . ID types

    ID              shift and go to state 33


state 20

    (22) const -> CONST . LPAREN constant RPAREN

    LPAREN          shift and go to state 34


state 21

    (3) imports -> IMPORT STRING .

    FUNC            reduce using rule 3 (imports -> IMPORT STRING .)
    VAR             reduce using rule 3 (imports -> IMPORT STRING .)
    TYPE            reduce using rule 3 (imports -> IMPORT STRING .)
    CONST           reduce using rule 3 (imports -> IMPORT STRING .)
    $end            reduce using rule 3 (imports -> IMPORT STRING .)


state 22

    (4) imports -> IMPORT LPAREN . import RPAREN
    (6) import -> . STRING import
    (7) import -> . empty
    (219) empty -> .

    STRING          shift and go to state 36
    RPAREN          reduce using rule 219 (empty -> .)

    import                         shift and go to state 35
    empty                          shift and go to state 37

state 23

    (8) statement -> function_statement statement .

    $end            reduce using rule 8 (statement -> function_statement statement .)


state 24

    (9) statement -> variable_global_statement statement .

    $end            reduce using rule 9 (statement -> variable_global_statement statement .)


state 25

    (10) statement -> struct_statement statement .

    $end            reduce using rule 10 (statement -> struct_statement statement .)


state 26

    (11) statement -> const statement .

    $end            reduce using rule 11 (statement -> const statement .)


state 27

    (12) statement -> method_statement statement .

    $end            reduce using rule 12 (statement -> method_statement statement .)


state 28

    (13) statement -> interface_statement statement .

    $end            reduce using rule 13 (statement -> interface_statement statement .)


state 29

    (14) statement -> type_alias statement .

    $end            reduce using rule 14 (statement -> type_alias statement .)


state 30

    (29) function_statement -> FUNC ID . LPAREN args RPAREN types LBRACE content RBRACE
    (30) function_statement -> FUNC ID . LPAREN args RPAREN LBRACE content RBRACE

    LPAREN          shift and go to state 38


state 31

    (20) method_statement -> FUNC LPAREN . ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN . ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE

    ID              shift and go to state 39


state 32

    (71) variable_global_statement -> VAR ID . types
    (58) types -> . TYPES
    (59) types -> . array_statement
    (60) types -> . pointer_statement
    (61) types -> . slice_statement
    (62) types -> . MAP LBRACKET TYPES RBRACKET
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) pointer_statement -> . POINTER types
    (64) pointer_statement -> . POINTER ID
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 40
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 33

    (25) struct_statement -> TYPE ID . STRUCT LBRACE field RBRACE
    (17) interface_statement -> TYPE ID . INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> TYPE ID . types
    (58) types -> . TYPES
    (59) types -> . array_statement
    (60) types -> . pointer_statement
    (61) types -> . slice_statement
    (62) types -> . MAP LBRACKET TYPES RBRACKET
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) pointer_statement -> . POINTER types
    (64) pointer_statement -> . POINTER ID
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    STRUCT          shift and go to state 48
    INTERFACE       shift and go to state 49
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 50
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 34

    (22) const -> CONST LPAREN . constant RPAREN
    (23) constant -> . ID EQUAL value constant
    (24) constant -> . empty
    (219) empty -> .

    ID              shift and go to state 52
    RPAREN          reduce using rule 219 (empty -> .)

    constant                       shift and go to state 51
    empty                          shift and go to state 53

state 35

    (4) imports -> IMPORT LPAREN import . RPAREN

    RPAREN          shift and go to state 54


state 36

    (6) import -> STRING . import
    (6) import -> . STRING import
    (7) import -> . empty
    (219) empty -> .

    STRING          shift and go to state 36
    RPAREN          reduce using rule 219 (empty -> .)

    import                         shift and go to state 55
    empty                          shift and go to state 37

state 37

    (7) import -> empty .

    RPAREN          reduce using rule 7 (import -> empty .)


state 38

    (29) function_statement -> FUNC ID LPAREN . args RPAREN types LBRACE content RBRACE
    (30) function_statement -> FUNC ID LPAREN . args RPAREN LBRACE content RBRACE
    (36) args -> . ID types
    (37) args -> . ID CHAN ID
    (38) args -> . ID CHAN ID COMMA args
    (39) args -> . ID CHAN types
    (40) args -> . ID CHAN types COMMA args
    (41) args -> . ID types COMMA args
    (42) args -> . ID COMMA args
    (43) args -> . ID collection_args COMMA args
    (44) args -> . ID collection_args
    (45) args -> . ID POINTER callback
    (46) args -> . p_map_args COMMA args
    (47) args -> . p_map_args
    (48) args -> . empty
    (51) p_map_args -> . ID POINTER brackets TYPES
    (219) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 219 (empty -> .)

    args                           shift and go to state 57
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 39

    (20) method_statement -> FUNC LPAREN ID . ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID . ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE

    ID              shift and go to state 60


state 40

    (71) variable_global_statement -> VAR ID types .

    FUNC            reduce using rule 71 (variable_global_statement -> VAR ID types .)
    VAR             reduce using rule 71 (variable_global_statement -> VAR ID types .)
    TYPE            reduce using rule 71 (variable_global_statement -> VAR ID types .)
    CONST           reduce using rule 71 (variable_global_statement -> VAR ID types .)
    $end            reduce using rule 71 (variable_global_statement -> VAR ID types .)


state 41

    (58) types -> TYPES .

    FUNC            reduce using rule 58 (types -> TYPES .)
    VAR             reduce using rule 58 (types -> TYPES .)
    TYPE            reduce using rule 58 (types -> TYPES .)
    CONST           reduce using rule 58 (types -> TYPES .)
    $end            reduce using rule 58 (types -> TYPES .)
    COMMA           reduce using rule 58 (types -> TYPES .)
    RPAREN          reduce using rule 58 (types -> TYPES .)
    LBRACE          reduce using rule 58 (types -> TYPES .)
    ID              reduce using rule 58 (types -> TYPES .)
    RBRACE          reduce using rule 58 (types -> TYPES .)
    EQUAL           reduce using rule 58 (types -> TYPES .)


state 42

    (59) types -> array_statement .

    FUNC            reduce using rule 59 (types -> array_statement .)
    VAR             reduce using rule 59 (types -> array_statement .)
    TYPE            reduce using rule 59 (types -> array_statement .)
    CONST           reduce using rule 59 (types -> array_statement .)
    $end            reduce using rule 59 (types -> array_statement .)
    COMMA           reduce using rule 59 (types -> array_statement .)
    RPAREN          reduce using rule 59 (types -> array_statement .)
    LBRACE          reduce using rule 59 (types -> array_statement .)
    ID              reduce using rule 59 (types -> array_statement .)
    RBRACE          reduce using rule 59 (types -> array_statement .)
    EQUAL           reduce using rule 59 (types -> array_statement .)


state 43

    (60) types -> pointer_statement .

    FUNC            reduce using rule 60 (types -> pointer_statement .)
    VAR             reduce using rule 60 (types -> pointer_statement .)
    TYPE            reduce using rule 60 (types -> pointer_statement .)
    CONST           reduce using rule 60 (types -> pointer_statement .)
    $end            reduce using rule 60 (types -> pointer_statement .)
    COMMA           reduce using rule 60 (types -> pointer_statement .)
    RPAREN          reduce using rule 60 (types -> pointer_statement .)
    LBRACE          reduce using rule 60 (types -> pointer_statement .)
    ID              reduce using rule 60 (types -> pointer_statement .)
    RBRACE          reduce using rule 60 (types -> pointer_statement .)
    EQUAL           reduce using rule 60 (types -> pointer_statement .)


state 44

    (61) types -> slice_statement .

    FUNC            reduce using rule 61 (types -> slice_statement .)
    VAR             reduce using rule 61 (types -> slice_statement .)
    TYPE            reduce using rule 61 (types -> slice_statement .)
    CONST           reduce using rule 61 (types -> slice_statement .)
    $end            reduce using rule 61 (types -> slice_statement .)
    COMMA           reduce using rule 61 (types -> slice_statement .)
    RPAREN          reduce using rule 61 (types -> slice_statement .)
    LBRACE          reduce using rule 61 (types -> slice_statement .)
    ID              reduce using rule 61 (types -> slice_statement .)
    RBRACE          reduce using rule 61 (types -> slice_statement .)
    EQUAL           reduce using rule 61 (types -> slice_statement .)


state 45

    (62) types -> MAP . LBRACKET TYPES RBRACKET

    LBRACKET        shift and go to state 61


state 46

    (65) array_statement -> LBRACKET . NUMBER RBRACKET TYPES
    (66) array_statement -> LBRACKET . NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (69) slice_statement -> LBRACKET . RBRACKET TYPES
    (70) slice_statement -> LBRACKET . RBRACKET TYPES LBRACE values RBRACE

    NUMBER          shift and go to state 62
    DOT             shift and go to state 64
    RBRACKET        shift and go to state 63


state 47

    (63) pointer_statement -> POINTER . types
    (64) pointer_statement -> POINTER . ID
    (58) types -> . TYPES
    (59) types -> . array_statement
    (60) types -> . pointer_statement
    (61) types -> . slice_statement
    (62) types -> . MAP LBRACKET TYPES RBRACKET
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) pointer_statement -> . POINTER types
    (64) pointer_statement -> . POINTER ID
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    ID              shift and go to state 66
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 65
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 48

    (25) struct_statement -> TYPE ID STRUCT . LBRACE field RBRACE

    LBRACE          shift and go to state 67


state 49

    (17) interface_statement -> TYPE ID INTERFACE . LBRACE method_list RBRACE

    LBRACE          shift and go to state 68


state 50

    (16) type_alias -> TYPE ID types .

    FUNC            reduce using rule 16 (type_alias -> TYPE ID types .)
    VAR             reduce using rule 16 (type_alias -> TYPE ID types .)
    TYPE            reduce using rule 16 (type_alias -> TYPE ID types .)
    CONST           reduce using rule 16 (type_alias -> TYPE ID types .)
    $end            reduce using rule 16 (type_alias -> TYPE ID types .)


state 51

    (22) const -> CONST LPAREN constant . RPAREN

    RPAREN          shift and go to state 69


state 52

    (23) constant -> ID . EQUAL value constant

    EQUAL           shift and go to state 70


state 53

    (24) constant -> empty .

    RPAREN          reduce using rule 24 (constant -> empty .)


state 54

    (4) imports -> IMPORT LPAREN import RPAREN .

    FUNC            reduce using rule 4 (imports -> IMPORT LPAREN import RPAREN .)
    VAR             reduce using rule 4 (imports -> IMPORT LPAREN import RPAREN .)
    TYPE            reduce using rule 4 (imports -> IMPORT LPAREN import RPAREN .)
    CONST           reduce using rule 4 (imports -> IMPORT LPAREN import RPAREN .)
    $end            reduce using rule 4 (imports -> IMPORT LPAREN import RPAREN .)


state 55

    (6) import -> STRING import .

    RPAREN          reduce using rule 6 (import -> STRING import .)


state 56

    (36) args -> ID . types
    (37) args -> ID . CHAN ID
    (38) args -> ID . CHAN ID COMMA args
    (39) args -> ID . CHAN types
    (40) args -> ID . CHAN types COMMA args
    (41) args -> ID . types COMMA args
    (42) args -> ID . COMMA args
    (43) args -> ID . collection_args COMMA args
    (44) args -> ID . collection_args
    (45) args -> ID . POINTER callback
    (51) p_map_args -> ID . POINTER brackets TYPES
    (58) types -> . TYPES
    (59) types -> . array_statement
    (60) types -> . pointer_statement
    (61) types -> . slice_statement
    (62) types -> . MAP LBRACKET TYPES RBRACKET
    (49) collection_args -> . LBRACKET RBRACKET POINTER ID
    (50) collection_args -> . LBRACKET RBRACKET ID
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) pointer_statement -> . POINTER types
    (64) pointer_statement -> . POINTER ID
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    CHAN            shift and go to state 72
    COMMA           shift and go to state 73
    POINTER         shift and go to state 75
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 76

    types                          shift and go to state 71
    collection_args                shift and go to state 74
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 57

    (29) function_statement -> FUNC ID LPAREN args . RPAREN types LBRACE content RBRACE
    (30) function_statement -> FUNC ID LPAREN args . RPAREN LBRACE content RBRACE

    RPAREN          shift and go to state 77


state 58

    (46) args -> p_map_args . COMMA args
    (47) args -> p_map_args .

    COMMA           shift and go to state 78
    RPAREN          reduce using rule 47 (args -> p_map_args .)


state 59

    (48) args -> empty .

    RPAREN          reduce using rule 48 (args -> empty .)


state 60

    (20) method_statement -> FUNC LPAREN ID ID . RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID ID . RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE

    RPAREN          shift and go to state 79


state 61

    (62) types -> MAP LBRACKET . TYPES RBRACKET

    TYPES           shift and go to state 80


state 62

    (65) array_statement -> LBRACKET NUMBER . RBRACKET TYPES
    (66) array_statement -> LBRACKET NUMBER . RBRACKET TYPES LBRACE values RBRACE

    RBRACKET        shift and go to state 81


state 63

    (69) slice_statement -> LBRACKET RBRACKET . TYPES
    (70) slice_statement -> LBRACKET RBRACKET . TYPES LBRACE values RBRACE

    TYPES           shift and go to state 82


state 64

    (67) array_statement -> LBRACKET DOT . DOT DOT RBRACKET TYPES
    (68) array_statement -> LBRACKET DOT . DOT DOT RBRACKET TYPES LBRACE values RBRACE

    DOT             shift and go to state 83


state 65

    (63) pointer_statement -> POINTER types .

    FUNC            reduce using rule 63 (pointer_statement -> POINTER types .)
    VAR             reduce using rule 63 (pointer_statement -> POINTER types .)
    TYPE            reduce using rule 63 (pointer_statement -> POINTER types .)
    CONST           reduce using rule 63 (pointer_statement -> POINTER types .)
    $end            reduce using rule 63 (pointer_statement -> POINTER types .)
    COMMA           reduce using rule 63 (pointer_statement -> POINTER types .)
    RPAREN          reduce using rule 63 (pointer_statement -> POINTER types .)
    LBRACE          reduce using rule 63 (pointer_statement -> POINTER types .)
    ID              reduce using rule 63 (pointer_statement -> POINTER types .)
    RBRACE          reduce using rule 63 (pointer_statement -> POINTER types .)
    EQUAL           reduce using rule 63 (pointer_statement -> POINTER types .)


state 66

    (64) pointer_statement -> POINTER ID .

    FUNC            reduce using rule 64 (pointer_statement -> POINTER ID .)
    VAR             reduce using rule 64 (pointer_statement -> POINTER ID .)
    TYPE            reduce using rule 64 (pointer_statement -> POINTER ID .)
    CONST           reduce using rule 64 (pointer_statement -> POINTER ID .)
    $end            reduce using rule 64 (pointer_statement -> POINTER ID .)
    COMMA           reduce using rule 64 (pointer_statement -> POINTER ID .)
    RPAREN          reduce using rule 64 (pointer_statement -> POINTER ID .)
    LBRACE          reduce using rule 64 (pointer_statement -> POINTER ID .)
    ID              reduce using rule 64 (pointer_statement -> POINTER ID .)
    RBRACE          reduce using rule 64 (pointer_statement -> POINTER ID .)
    EQUAL           reduce using rule 64 (pointer_statement -> POINTER ID .)


state 67

    (25) struct_statement -> TYPE ID STRUCT LBRACE . field RBRACE
    (26) field -> . ID types field
    (27) field -> . ID ID DOT ID
    (28) field -> . empty
    (219) empty -> .

    ID              shift and go to state 84
    RBRACE          reduce using rule 219 (empty -> .)

    field                          shift and go to state 85
    empty                          shift and go to state 86

state 68

    (17) interface_statement -> TYPE ID INTERFACE LBRACE . method_list RBRACE
    (18) method_list -> . ID LPAREN args RPAREN types method_list
    (19) method_list -> . empty
    (219) empty -> .

    ID              shift and go to state 87
    RBRACE          reduce using rule 219 (empty -> .)

    method_list                    shift and go to state 88
    empty                          shift and go to state 89

state 69

    (22) const -> CONST LPAREN constant RPAREN .

    FUNC            reduce using rule 22 (const -> CONST LPAREN constant RPAREN .)
    VAR             reduce using rule 22 (const -> CONST LPAREN constant RPAREN .)
    TYPE            reduce using rule 22 (const -> CONST LPAREN constant RPAREN .)
    CONST           reduce using rule 22 (const -> CONST LPAREN constant RPAREN .)
    $end            reduce using rule 22 (const -> CONST LPAREN constant RPAREN .)


state 70

    (23) constant -> ID EQUAL . value constant
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 94
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    value                          shift and go to state 91
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 71

    (36) args -> ID types .
    (41) args -> ID types . COMMA args

    RPAREN          reduce using rule 36 (args -> ID types .)
    COMMA           shift and go to state 100


state 72

    (37) args -> ID CHAN . ID
    (38) args -> ID CHAN . ID COMMA args
    (39) args -> ID CHAN . types
    (40) args -> ID CHAN . types COMMA args
    (58) types -> . TYPES
    (59) types -> . array_statement
    (60) types -> . pointer_statement
    (61) types -> . slice_statement
    (62) types -> . MAP LBRACKET TYPES RBRACKET
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) pointer_statement -> . POINTER types
    (64) pointer_statement -> . POINTER ID
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    ID              shift and go to state 101
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 102
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 73

    (42) args -> ID COMMA . args
    (36) args -> . ID types
    (37) args -> . ID CHAN ID
    (38) args -> . ID CHAN ID COMMA args
    (39) args -> . ID CHAN types
    (40) args -> . ID CHAN types COMMA args
    (41) args -> . ID types COMMA args
    (42) args -> . ID COMMA args
    (43) args -> . ID collection_args COMMA args
    (44) args -> . ID collection_args
    (45) args -> . ID POINTER callback
    (46) args -> . p_map_args COMMA args
    (47) args -> . p_map_args
    (48) args -> . empty
    (51) p_map_args -> . ID POINTER brackets TYPES
    (219) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 219 (empty -> .)

    args                           shift and go to state 103
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 74

    (43) args -> ID collection_args . COMMA args
    (44) args -> ID collection_args .

    COMMA           shift and go to state 104
    RPAREN          reduce using rule 44 (args -> ID collection_args .)


state 75

    (45) args -> ID POINTER . callback
    (51) p_map_args -> ID POINTER . brackets TYPES
    (63) pointer_statement -> POINTER . types
    (64) pointer_statement -> POINTER . ID
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets
    (58) types -> . TYPES
    (59) types -> . array_statement
    (60) types -> . pointer_statement
    (61) types -> . slice_statement
    (62) types -> . MAP LBRACKET TYPES RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) pointer_statement -> . POINTER types
    (64) pointer_statement -> . POINTER ID
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    ID              shift and go to state 105
    LBRACKET        shift and go to state 110
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    RPAREN          reduce using rule 219 (empty -> .)
    POINTER         shift and go to state 47

    callback                       shift and go to state 106
    brackets                       shift and go to state 107
    types                          shift and go to state 65
    function                       shift and go to state 108
    empty                          shift and go to state 109
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 76

    (49) collection_args -> LBRACKET . RBRACKET POINTER ID
    (50) collection_args -> LBRACKET . RBRACKET ID
    (65) array_statement -> LBRACKET . NUMBER RBRACKET TYPES
    (66) array_statement -> LBRACKET . NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (69) slice_statement -> LBRACKET . RBRACKET TYPES
    (70) slice_statement -> LBRACKET . RBRACKET TYPES LBRACE values RBRACE

    RBRACKET        shift and go to state 111
    NUMBER          shift and go to state 62
    DOT             shift and go to state 64


state 77

    (29) function_statement -> FUNC ID LPAREN args RPAREN . types LBRACE content RBRACE
    (30) function_statement -> FUNC ID LPAREN args RPAREN . LBRACE content RBRACE
    (58) types -> . TYPES
    (59) types -> . array_statement
    (60) types -> . pointer_statement
    (61) types -> . slice_statement
    (62) types -> . MAP LBRACKET TYPES RBRACKET
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) pointer_statement -> . POINTER types
    (64) pointer_statement -> . POINTER ID
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    LBRACE          shift and go to state 113
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 112
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 78

    (46) args -> p_map_args COMMA . args
    (36) args -> . ID types
    (37) args -> . ID CHAN ID
    (38) args -> . ID CHAN ID COMMA args
    (39) args -> . ID CHAN types
    (40) args -> . ID CHAN types COMMA args
    (41) args -> . ID types COMMA args
    (42) args -> . ID COMMA args
    (43) args -> . ID collection_args COMMA args
    (44) args -> . ID collection_args
    (45) args -> . ID POINTER callback
    (46) args -> . p_map_args COMMA args
    (47) args -> . p_map_args
    (48) args -> . empty
    (51) p_map_args -> . ID POINTER brackets TYPES
    (219) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 219 (empty -> .)

    p_map_args                     shift and go to state 58
    args                           shift and go to state 114
    empty                          shift and go to state 59

state 79

    (20) method_statement -> FUNC LPAREN ID ID RPAREN . ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID ID RPAREN . ID LPAREN args RPAREN TYPES LBRACE content RBRACE

    ID              shift and go to state 115


state 80

    (62) types -> MAP LBRACKET TYPES . RBRACKET

    RBRACKET        shift and go to state 116


state 81

    (65) array_statement -> LBRACKET NUMBER RBRACKET . TYPES
    (66) array_statement -> LBRACKET NUMBER RBRACKET . TYPES LBRACE values RBRACE

    TYPES           shift and go to state 117


state 82

    (69) slice_statement -> LBRACKET RBRACKET TYPES .
    (70) slice_statement -> LBRACKET RBRACKET TYPES . LBRACE values RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
    FUNC            reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    VAR             reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    TYPE            reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    CONST           reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    $end            reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    COMMA           reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    RPAREN          reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    ID              reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    RBRACE          reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    EQUAL           reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    BREAK           reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    LBRACKET        reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    IF              reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    FOR             reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    GO              reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    SWITCH          reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    RETURN          reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    DEFER           reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    CONTINUE        reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    SELECT          reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    CHANNEL_OP      reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    ASSIGN_OP       reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    CASE            reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    DEFAULT         reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .)
    LBRACE          shift and go to state 118

  ! LBRACE          [ reduce using rule 69 (slice_statement -> LBRACKET RBRACKET TYPES .) ]


state 83

    (67) array_statement -> LBRACKET DOT DOT . DOT RBRACKET TYPES
    (68) array_statement -> LBRACKET DOT DOT . DOT RBRACKET TYPES LBRACE values RBRACE

    DOT             shift and go to state 119


state 84

    (26) field -> ID . types field
    (27) field -> ID . ID DOT ID
    (58) types -> . TYPES
    (59) types -> . array_statement
    (60) types -> . pointer_statement
    (61) types -> . slice_statement
    (62) types -> . MAP LBRACKET TYPES RBRACKET
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) pointer_statement -> . POINTER types
    (64) pointer_statement -> . POINTER ID
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    ID              shift and go to state 120
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 121
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 85

    (25) struct_statement -> TYPE ID STRUCT LBRACE field . RBRACE

    RBRACE          shift and go to state 122


state 86

    (28) field -> empty .

    RBRACE          reduce using rule 28 (field -> empty .)


state 87

    (18) method_list -> ID . LPAREN args RPAREN types method_list

    LPAREN          shift and go to state 123


state 88

    (17) interface_statement -> TYPE ID INTERFACE LBRACE method_list . RBRACE

    RBRACE          shift and go to state 124


state 89

    (19) method_list -> empty .

    RBRACE          reduce using rule 19 (method_list -> empty .)


state 90

    (218) map_varible -> ID . brackets
    (199) pointer -> ID . LBRACKET NUMBER RBRACKET
    (200) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

    LBRACKET        shift and go to state 126

    brackets                       shift and go to state 125

state 91

    (23) constant -> ID EQUAL value . constant
    (23) constant -> . ID EQUAL value constant
    (24) constant -> . empty
    (219) empty -> .

    ID              shift and go to state 52
    RPAREN          reduce using rule 219 (empty -> .)

    constant                       shift and go to state 127
    empty                          shift and go to state 53

state 92

    (212) value -> NUMBER .

    ID              reduce using rule 212 (value -> NUMBER .)
    RPAREN          reduce using rule 212 (value -> NUMBER .)
    COMMA           reduce using rule 212 (value -> NUMBER .)
    RBRACE          reduce using rule 212 (value -> NUMBER .)
    COLON           reduce using rule 212 (value -> NUMBER .)
    ARITH_OP        reduce using rule 212 (value -> NUMBER .)
    REL_OP          reduce using rule 212 (value -> NUMBER .)
    LOG_OP          reduce using rule 212 (value -> NUMBER .)
    POINTER         reduce using rule 212 (value -> NUMBER .)
    LBRACE          reduce using rule 212 (value -> NUMBER .)
    BREAK           reduce using rule 212 (value -> NUMBER .)
    VAR             reduce using rule 212 (value -> NUMBER .)
    LBRACKET        reduce using rule 212 (value -> NUMBER .)
    IF              reduce using rule 212 (value -> NUMBER .)
    FOR             reduce using rule 212 (value -> NUMBER .)
    GO              reduce using rule 212 (value -> NUMBER .)
    SWITCH          reduce using rule 212 (value -> NUMBER .)
    RETURN          reduce using rule 212 (value -> NUMBER .)
    DEFER           reduce using rule 212 (value -> NUMBER .)
    CONTINUE        reduce using rule 212 (value -> NUMBER .)
    SELECT          reduce using rule 212 (value -> NUMBER .)
    CHANNEL_OP      reduce using rule 212 (value -> NUMBER .)
    ASSIGN_OP       reduce using rule 212 (value -> NUMBER .)
    CASE            reduce using rule 212 (value -> NUMBER .)
    DEFAULT         reduce using rule 212 (value -> NUMBER .)
    SEMICOLON       reduce using rule 212 (value -> NUMBER .)


state 93

    (213) value -> STRING .

    ID              reduce using rule 213 (value -> STRING .)
    RPAREN          reduce using rule 213 (value -> STRING .)
    COMMA           reduce using rule 213 (value -> STRING .)
    RBRACE          reduce using rule 213 (value -> STRING .)
    COLON           reduce using rule 213 (value -> STRING .)
    ARITH_OP        reduce using rule 213 (value -> STRING .)
    REL_OP          reduce using rule 213 (value -> STRING .)
    LOG_OP          reduce using rule 213 (value -> STRING .)
    POINTER         reduce using rule 213 (value -> STRING .)
    LBRACE          reduce using rule 213 (value -> STRING .)
    BREAK           reduce using rule 213 (value -> STRING .)
    VAR             reduce using rule 213 (value -> STRING .)
    LBRACKET        reduce using rule 213 (value -> STRING .)
    IF              reduce using rule 213 (value -> STRING .)
    FOR             reduce using rule 213 (value -> STRING .)
    GO              reduce using rule 213 (value -> STRING .)
    SWITCH          reduce using rule 213 (value -> STRING .)
    RETURN          reduce using rule 213 (value -> STRING .)
    DEFER           reduce using rule 213 (value -> STRING .)
    CONTINUE        reduce using rule 213 (value -> STRING .)
    SELECT          reduce using rule 213 (value -> STRING .)
    CHANNEL_OP      reduce using rule 213 (value -> STRING .)
    ASSIGN_OP       reduce using rule 213 (value -> STRING .)
    CASE            reduce using rule 213 (value -> STRING .)
    DEFAULT         reduce using rule 213 (value -> STRING .)
    SEMICOLON       reduce using rule 213 (value -> STRING .)


state 94

    (214) value -> LBRACE . values RBRACE
    (72) values -> . value COMMA values
    (73) values -> . value
    (74) values -> . empty
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (219) empty -> .
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 94
    RBRACE          reduce using rule 219 (empty -> .)
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    values                         shift and go to state 128
    value                          shift and go to state 129
    empty                          shift and go to state 130
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 95

    (215) value -> map_varible .

    ID              reduce using rule 215 (value -> map_varible .)
    RPAREN          reduce using rule 215 (value -> map_varible .)
    COMMA           reduce using rule 215 (value -> map_varible .)
    RBRACE          reduce using rule 215 (value -> map_varible .)
    COLON           reduce using rule 215 (value -> map_varible .)
    ARITH_OP        reduce using rule 215 (value -> map_varible .)
    REL_OP          reduce using rule 215 (value -> map_varible .)
    LOG_OP          reduce using rule 215 (value -> map_varible .)
    POINTER         reduce using rule 215 (value -> map_varible .)
    LBRACE          reduce using rule 215 (value -> map_varible .)
    BREAK           reduce using rule 215 (value -> map_varible .)
    VAR             reduce using rule 215 (value -> map_varible .)
    LBRACKET        reduce using rule 215 (value -> map_varible .)
    IF              reduce using rule 215 (value -> map_varible .)
    FOR             reduce using rule 215 (value -> map_varible .)
    GO              reduce using rule 215 (value -> map_varible .)
    SWITCH          reduce using rule 215 (value -> map_varible .)
    RETURN          reduce using rule 215 (value -> map_varible .)
    DEFER           reduce using rule 215 (value -> map_varible .)
    CONTINUE        reduce using rule 215 (value -> map_varible .)
    SELECT          reduce using rule 215 (value -> map_varible .)
    CHANNEL_OP      reduce using rule 215 (value -> map_varible .)
    ASSIGN_OP       reduce using rule 215 (value -> map_varible .)
    CASE            reduce using rule 215 (value -> map_varible .)
    DEFAULT         reduce using rule 215 (value -> map_varible .)
    SEMICOLON       reduce using rule 215 (value -> map_varible .)


state 96

    (216) value -> boolean .

    ID              reduce using rule 216 (value -> boolean .)
    RPAREN          reduce using rule 216 (value -> boolean .)
    COMMA           reduce using rule 216 (value -> boolean .)
    RBRACE          reduce using rule 216 (value -> boolean .)
    COLON           reduce using rule 216 (value -> boolean .)
    ARITH_OP        reduce using rule 216 (value -> boolean .)
    REL_OP          reduce using rule 216 (value -> boolean .)
    LOG_OP          reduce using rule 216 (value -> boolean .)
    POINTER         reduce using rule 216 (value -> boolean .)
    LBRACE          reduce using rule 216 (value -> boolean .)
    BREAK           reduce using rule 216 (value -> boolean .)
    VAR             reduce using rule 216 (value -> boolean .)
    LBRACKET        reduce using rule 216 (value -> boolean .)
    IF              reduce using rule 216 (value -> boolean .)
    FOR             reduce using rule 216 (value -> boolean .)
    GO              reduce using rule 216 (value -> boolean .)
    SWITCH          reduce using rule 216 (value -> boolean .)
    RETURN          reduce using rule 216 (value -> boolean .)
    DEFER           reduce using rule 216 (value -> boolean .)
    CONTINUE        reduce using rule 216 (value -> boolean .)
    SELECT          reduce using rule 216 (value -> boolean .)
    CHANNEL_OP      reduce using rule 216 (value -> boolean .)
    ASSIGN_OP       reduce using rule 216 (value -> boolean .)
    CASE            reduce using rule 216 (value -> boolean .)
    DEFAULT         reduce using rule 216 (value -> boolean .)
    SEMICOLON       reduce using rule 216 (value -> boolean .)


state 97

    (217) value -> pointer .

    ID              reduce using rule 217 (value -> pointer .)
    RPAREN          reduce using rule 217 (value -> pointer .)
    COMMA           reduce using rule 217 (value -> pointer .)
    RBRACE          reduce using rule 217 (value -> pointer .)
    COLON           reduce using rule 217 (value -> pointer .)
    ARITH_OP        reduce using rule 217 (value -> pointer .)
    REL_OP          reduce using rule 217 (value -> pointer .)
    LOG_OP          reduce using rule 217 (value -> pointer .)
    POINTER         reduce using rule 217 (value -> pointer .)
    LBRACE          reduce using rule 217 (value -> pointer .)
    BREAK           reduce using rule 217 (value -> pointer .)
    VAR             reduce using rule 217 (value -> pointer .)
    LBRACKET        reduce using rule 217 (value -> pointer .)
    IF              reduce using rule 217 (value -> pointer .)
    FOR             reduce using rule 217 (value -> pointer .)
    GO              reduce using rule 217 (value -> pointer .)
    SWITCH          reduce using rule 217 (value -> pointer .)
    RETURN          reduce using rule 217 (value -> pointer .)
    DEFER           reduce using rule 217 (value -> pointer .)
    CONTINUE        reduce using rule 217 (value -> pointer .)
    SELECT          reduce using rule 217 (value -> pointer .)
    CHANNEL_OP      reduce using rule 217 (value -> pointer .)
    ASSIGN_OP       reduce using rule 217 (value -> pointer .)
    CASE            reduce using rule 217 (value -> pointer .)
    DEFAULT         reduce using rule 217 (value -> pointer .)
    SEMICOLON       reduce using rule 217 (value -> pointer .)


state 98

    (197) boolean -> FALSE .

    ID              reduce using rule 197 (boolean -> FALSE .)
    RPAREN          reduce using rule 197 (boolean -> FALSE .)
    COMMA           reduce using rule 197 (boolean -> FALSE .)
    RBRACE          reduce using rule 197 (boolean -> FALSE .)
    COLON           reduce using rule 197 (boolean -> FALSE .)
    ARITH_OP        reduce using rule 197 (boolean -> FALSE .)
    REL_OP          reduce using rule 197 (boolean -> FALSE .)
    LOG_OP          reduce using rule 197 (boolean -> FALSE .)
    POINTER         reduce using rule 197 (boolean -> FALSE .)
    LBRACE          reduce using rule 197 (boolean -> FALSE .)
    BREAK           reduce using rule 197 (boolean -> FALSE .)
    VAR             reduce using rule 197 (boolean -> FALSE .)
    LBRACKET        reduce using rule 197 (boolean -> FALSE .)
    IF              reduce using rule 197 (boolean -> FALSE .)
    FOR             reduce using rule 197 (boolean -> FALSE .)
    GO              reduce using rule 197 (boolean -> FALSE .)
    SWITCH          reduce using rule 197 (boolean -> FALSE .)
    RETURN          reduce using rule 197 (boolean -> FALSE .)
    DEFER           reduce using rule 197 (boolean -> FALSE .)
    CONTINUE        reduce using rule 197 (boolean -> FALSE .)
    SELECT          reduce using rule 197 (boolean -> FALSE .)
    CHANNEL_OP      reduce using rule 197 (boolean -> FALSE .)
    ASSIGN_OP       reduce using rule 197 (boolean -> FALSE .)
    CASE            reduce using rule 197 (boolean -> FALSE .)
    DEFAULT         reduce using rule 197 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 197 (boolean -> FALSE .)


state 99

    (198) boolean -> TRUE .

    ID              reduce using rule 198 (boolean -> TRUE .)
    RPAREN          reduce using rule 198 (boolean -> TRUE .)
    COMMA           reduce using rule 198 (boolean -> TRUE .)
    RBRACE          reduce using rule 198 (boolean -> TRUE .)
    COLON           reduce using rule 198 (boolean -> TRUE .)
    ARITH_OP        reduce using rule 198 (boolean -> TRUE .)
    REL_OP          reduce using rule 198 (boolean -> TRUE .)
    LOG_OP          reduce using rule 198 (boolean -> TRUE .)
    POINTER         reduce using rule 198 (boolean -> TRUE .)
    LBRACE          reduce using rule 198 (boolean -> TRUE .)
    BREAK           reduce using rule 198 (boolean -> TRUE .)
    VAR             reduce using rule 198 (boolean -> TRUE .)
    LBRACKET        reduce using rule 198 (boolean -> TRUE .)
    IF              reduce using rule 198 (boolean -> TRUE .)
    FOR             reduce using rule 198 (boolean -> TRUE .)
    GO              reduce using rule 198 (boolean -> TRUE .)
    SWITCH          reduce using rule 198 (boolean -> TRUE .)
    RETURN          reduce using rule 198 (boolean -> TRUE .)
    DEFER           reduce using rule 198 (boolean -> TRUE .)
    CONTINUE        reduce using rule 198 (boolean -> TRUE .)
    SELECT          reduce using rule 198 (boolean -> TRUE .)
    CHANNEL_OP      reduce using rule 198 (boolean -> TRUE .)
    ASSIGN_OP       reduce using rule 198 (boolean -> TRUE .)
    CASE            reduce using rule 198 (boolean -> TRUE .)
    DEFAULT         reduce using rule 198 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 198 (boolean -> TRUE .)


state 100

    (41) args -> ID types COMMA . args
    (36) args -> . ID types
    (37) args -> . ID CHAN ID
    (38) args -> . ID CHAN ID COMMA args
    (39) args -> . ID CHAN types
    (40) args -> . ID CHAN types COMMA args
    (41) args -> . ID types COMMA args
    (42) args -> . ID COMMA args
    (43) args -> . ID collection_args COMMA args
    (44) args -> . ID collection_args
    (45) args -> . ID POINTER callback
    (46) args -> . p_map_args COMMA args
    (47) args -> . p_map_args
    (48) args -> . empty
    (51) p_map_args -> . ID POINTER brackets TYPES
    (219) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 219 (empty -> .)

    args                           shift and go to state 131
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 101

    (37) args -> ID CHAN ID .
    (38) args -> ID CHAN ID . COMMA args

    RPAREN          reduce using rule 37 (args -> ID CHAN ID .)
    COMMA           shift and go to state 132


state 102

    (39) args -> ID CHAN types .
    (40) args -> ID CHAN types . COMMA args

    RPAREN          reduce using rule 39 (args -> ID CHAN types .)
    COMMA           shift and go to state 133


state 103

    (42) args -> ID COMMA args .

    RPAREN          reduce using rule 42 (args -> ID COMMA args .)


state 104

    (43) args -> ID collection_args COMMA . args
    (36) args -> . ID types
    (37) args -> . ID CHAN ID
    (38) args -> . ID CHAN ID COMMA args
    (39) args -> . ID CHAN types
    (40) args -> . ID CHAN types COMMA args
    (41) args -> . ID types COMMA args
    (42) args -> . ID COMMA args
    (43) args -> . ID collection_args COMMA args
    (44) args -> . ID collection_args
    (45) args -> . ID POINTER callback
    (46) args -> . p_map_args COMMA args
    (47) args -> . p_map_args
    (48) args -> . empty
    (51) p_map_args -> . ID POINTER brackets TYPES
    (219) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 219 (empty -> .)

    args                           shift and go to state 134
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 105

    (64) pointer_statement -> POINTER ID .
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (31) function -> ID . LPAREN parameters RPAREN

  ! reduce/reduce conflict for RPAREN resolved using rule 64 (pointer_statement -> POINTER ID .)
    COMMA           reduce using rule 64 (pointer_statement -> POINTER ID .)
    RPAREN          reduce using rule 64 (pointer_statement -> POINTER ID .)
    DOT             shift and go to state 135
    LPAREN          shift and go to state 136

  ! RPAREN          [ reduce using rule 208 (callback -> ID .) ]


state 106

    (45) args -> ID POINTER callback .

    RPAREN          reduce using rule 45 (args -> ID POINTER callback .)


state 107

    (51) p_map_args -> ID POINTER brackets . TYPES

    TYPES           shift and go to state 137


state 108

    (206) callback -> function .
    (209) callback -> function . DOT callback

    RPAREN          reduce using rule 206 (callback -> function .)
    ASSIGN_OP       reduce using rule 206 (callback -> function .)
    BREAK           reduce using rule 206 (callback -> function .)
    ID              reduce using rule 206 (callback -> function .)
    VAR             reduce using rule 206 (callback -> function .)
    LBRACKET        reduce using rule 206 (callback -> function .)
    IF              reduce using rule 206 (callback -> function .)
    FOR             reduce using rule 206 (callback -> function .)
    GO              reduce using rule 206 (callback -> function .)
    SWITCH          reduce using rule 206 (callback -> function .)
    RETURN          reduce using rule 206 (callback -> function .)
    DEFER           reduce using rule 206 (callback -> function .)
    CONTINUE        reduce using rule 206 (callback -> function .)
    SELECT          reduce using rule 206 (callback -> function .)
    CHANNEL_OP      reduce using rule 206 (callback -> function .)
    RBRACE          reduce using rule 206 (callback -> function .)
    COMMA           reduce using rule 206 (callback -> function .)
    ARITH_OP        reduce using rule 206 (callback -> function .)
    REL_OP          reduce using rule 206 (callback -> function .)
    LOG_OP          reduce using rule 206 (callback -> function .)
    POINTER         reduce using rule 206 (callback -> function .)
    CASE            reduce using rule 206 (callback -> function .)
    DEFAULT         reduce using rule 206 (callback -> function .)
    LBRACE          reduce using rule 206 (callback -> function .)
    SEMICOLON       reduce using rule 206 (callback -> function .)
    COLON           reduce using rule 206 (callback -> function .)
    DOT             shift and go to state 138


state 109

    (211) callback -> empty .

    RPAREN          reduce using rule 211 (callback -> empty .)
    ASSIGN_OP       reduce using rule 211 (callback -> empty .)
    BREAK           reduce using rule 211 (callback -> empty .)
    ID              reduce using rule 211 (callback -> empty .)
    VAR             reduce using rule 211 (callback -> empty .)
    LBRACKET        reduce using rule 211 (callback -> empty .)
    IF              reduce using rule 211 (callback -> empty .)
    FOR             reduce using rule 211 (callback -> empty .)
    GO              reduce using rule 211 (callback -> empty .)
    SWITCH          reduce using rule 211 (callback -> empty .)
    RETURN          reduce using rule 211 (callback -> empty .)
    DEFER           reduce using rule 211 (callback -> empty .)
    CONTINUE        reduce using rule 211 (callback -> empty .)
    SELECT          reduce using rule 211 (callback -> empty .)
    CHANNEL_OP      reduce using rule 211 (callback -> empty .)
    RBRACE          reduce using rule 211 (callback -> empty .)
    COMMA           reduce using rule 211 (callback -> empty .)
    ARITH_OP        reduce using rule 211 (callback -> empty .)
    REL_OP          reduce using rule 211 (callback -> empty .)
    LOG_OP          reduce using rule 211 (callback -> empty .)
    POINTER         reduce using rule 211 (callback -> empty .)
    CASE            reduce using rule 211 (callback -> empty .)
    DEFAULT         reduce using rule 211 (callback -> empty .)
    LBRACE          reduce using rule 211 (callback -> empty .)
    SEMICOLON       reduce using rule 211 (callback -> empty .)
    COLON           reduce using rule 211 (callback -> empty .)


state 110

    (52) brackets -> LBRACKET . NUMBER RBRACKET brackets
    (53) brackets -> LBRACKET . NUMBER RBRACKET
    (54) brackets -> LBRACKET . STRING RBRACKET brackets
    (55) brackets -> LBRACKET . STRING RBRACKET
    (56) brackets -> LBRACKET . ID RBRACKET
    (57) brackets -> LBRACKET . ID RBRACKET brackets
    (65) array_statement -> LBRACKET . NUMBER RBRACKET TYPES
    (66) array_statement -> LBRACKET . NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (69) slice_statement -> LBRACKET . RBRACKET TYPES
    (70) slice_statement -> LBRACKET . RBRACKET TYPES LBRACE values RBRACE

    NUMBER          shift and go to state 139
    STRING          shift and go to state 140
    ID              shift and go to state 141
    DOT             shift and go to state 64
    RBRACKET        shift and go to state 63


state 111

    (49) collection_args -> LBRACKET RBRACKET . POINTER ID
    (50) collection_args -> LBRACKET RBRACKET . ID
    (69) slice_statement -> LBRACKET RBRACKET . TYPES
    (70) slice_statement -> LBRACKET RBRACKET . TYPES LBRACE values RBRACE

    POINTER         shift and go to state 142
    ID              shift and go to state 143
    TYPES           shift and go to state 82


state 112

    (29) function_statement -> FUNC ID LPAREN args RPAREN types . LBRACE content RBRACE

    LBRACE          shift and go to state 144


state 113

    (30) function_statement -> FUNC ID LPAREN args RPAREN LBRACE . content RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 146
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 114

    (46) args -> p_map_args COMMA args .

    RPAREN          reduce using rule 46 (args -> p_map_args COMMA args .)


state 115

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID . LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID . LPAREN args RPAREN TYPES LBRACE content RBRACE

    LPAREN          shift and go to state 176


state 116

    (62) types -> MAP LBRACKET TYPES RBRACKET .

    FUNC            reduce using rule 62 (types -> MAP LBRACKET TYPES RBRACKET .)
    VAR             reduce using rule 62 (types -> MAP LBRACKET TYPES RBRACKET .)
    TYPE            reduce using rule 62 (types -> MAP LBRACKET TYPES RBRACKET .)
    CONST           reduce using rule 62 (types -> MAP LBRACKET TYPES RBRACKET .)
    $end            reduce using rule 62 (types -> MAP LBRACKET TYPES RBRACKET .)
    COMMA           reduce using rule 62 (types -> MAP LBRACKET TYPES RBRACKET .)
    RPAREN          reduce using rule 62 (types -> MAP LBRACKET TYPES RBRACKET .)
    LBRACE          reduce using rule 62 (types -> MAP LBRACKET TYPES RBRACKET .)
    ID              reduce using rule 62 (types -> MAP LBRACKET TYPES RBRACKET .)
    RBRACE          reduce using rule 62 (types -> MAP LBRACKET TYPES RBRACKET .)
    EQUAL           reduce using rule 62 (types -> MAP LBRACKET TYPES RBRACKET .)


state 117

    (65) array_statement -> LBRACKET NUMBER RBRACKET TYPES .
    (66) array_statement -> LBRACKET NUMBER RBRACKET TYPES . LBRACE values RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
    FUNC            reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    VAR             reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    TYPE            reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    CONST           reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    $end            reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    COMMA           reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    RPAREN          reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    ID              reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    RBRACE          reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    EQUAL           reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    BREAK           reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    LBRACKET        reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    IF              reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    FOR             reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    GO              reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    SWITCH          reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    RETURN          reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    DEFER           reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    CONTINUE        reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    SELECT          reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    CHANNEL_OP      reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    ASSIGN_OP       reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    CASE            reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    DEFAULT         reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    LBRACE          shift and go to state 177

  ! LBRACE          [ reduce using rule 65 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .) ]


state 118

    (70) slice_statement -> LBRACKET RBRACKET TYPES LBRACE . values RBRACE
    (72) values -> . value COMMA values
    (73) values -> . value
    (74) values -> . empty
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (219) empty -> .
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 94
    RBRACE          reduce using rule 219 (empty -> .)
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    values                         shift and go to state 178
    value                          shift and go to state 129
    empty                          shift and go to state 130
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 119

    (67) array_statement -> LBRACKET DOT DOT DOT . RBRACKET TYPES
    (68) array_statement -> LBRACKET DOT DOT DOT . RBRACKET TYPES LBRACE values RBRACE

    RBRACKET        shift and go to state 179


state 120

    (27) field -> ID ID . DOT ID

    DOT             shift and go to state 180


state 121

    (26) field -> ID types . field
    (26) field -> . ID types field
    (27) field -> . ID ID DOT ID
    (28) field -> . empty
    (219) empty -> .

    ID              shift and go to state 84
    RBRACE          reduce using rule 219 (empty -> .)

    field                          shift and go to state 181
    empty                          shift and go to state 86

state 122

    (25) struct_statement -> TYPE ID STRUCT LBRACE field RBRACE .

    FUNC            reduce using rule 25 (struct_statement -> TYPE ID STRUCT LBRACE field RBRACE .)
    VAR             reduce using rule 25 (struct_statement -> TYPE ID STRUCT LBRACE field RBRACE .)
    TYPE            reduce using rule 25 (struct_statement -> TYPE ID STRUCT LBRACE field RBRACE .)
    CONST           reduce using rule 25 (struct_statement -> TYPE ID STRUCT LBRACE field RBRACE .)
    $end            reduce using rule 25 (struct_statement -> TYPE ID STRUCT LBRACE field RBRACE .)


state 123

    (18) method_list -> ID LPAREN . args RPAREN types method_list
    (36) args -> . ID types
    (37) args -> . ID CHAN ID
    (38) args -> . ID CHAN ID COMMA args
    (39) args -> . ID CHAN types
    (40) args -> . ID CHAN types COMMA args
    (41) args -> . ID types COMMA args
    (42) args -> . ID COMMA args
    (43) args -> . ID collection_args COMMA args
    (44) args -> . ID collection_args
    (45) args -> . ID POINTER callback
    (46) args -> . p_map_args COMMA args
    (47) args -> . p_map_args
    (48) args -> . empty
    (51) p_map_args -> . ID POINTER brackets TYPES
    (219) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 219 (empty -> .)

    args                           shift and go to state 182
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 124

    (17) interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE .

    FUNC            reduce using rule 17 (interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE .)
    VAR             reduce using rule 17 (interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE .)
    TYPE            reduce using rule 17 (interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE .)
    CONST           reduce using rule 17 (interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE .)
    $end            reduce using rule 17 (interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE .)


state 125

    (218) map_varible -> ID brackets .

    ID              reduce using rule 218 (map_varible -> ID brackets .)
    RPAREN          reduce using rule 218 (map_varible -> ID brackets .)
    COMMA           reduce using rule 218 (map_varible -> ID brackets .)
    RBRACE          reduce using rule 218 (map_varible -> ID brackets .)
    COLON           reduce using rule 218 (map_varible -> ID brackets .)
    ARITH_OP        reduce using rule 218 (map_varible -> ID brackets .)
    REL_OP          reduce using rule 218 (map_varible -> ID brackets .)
    LOG_OP          reduce using rule 218 (map_varible -> ID brackets .)
    POINTER         reduce using rule 218 (map_varible -> ID brackets .)
    LBRACE          reduce using rule 218 (map_varible -> ID brackets .)
    BREAK           reduce using rule 218 (map_varible -> ID brackets .)
    VAR             reduce using rule 218 (map_varible -> ID brackets .)
    LBRACKET        reduce using rule 218 (map_varible -> ID brackets .)
    IF              reduce using rule 218 (map_varible -> ID brackets .)
    FOR             reduce using rule 218 (map_varible -> ID brackets .)
    GO              reduce using rule 218 (map_varible -> ID brackets .)
    SWITCH          reduce using rule 218 (map_varible -> ID brackets .)
    RETURN          reduce using rule 218 (map_varible -> ID brackets .)
    DEFER           reduce using rule 218 (map_varible -> ID brackets .)
    CONTINUE        reduce using rule 218 (map_varible -> ID brackets .)
    SELECT          reduce using rule 218 (map_varible -> ID brackets .)
    CHANNEL_OP      reduce using rule 218 (map_varible -> ID brackets .)
    ASSIGN_OP       reduce using rule 218 (map_varible -> ID brackets .)
    CASE            reduce using rule 218 (map_varible -> ID brackets .)
    DEFAULT         reduce using rule 218 (map_varible -> ID brackets .)
    SEMICOLON       reduce using rule 218 (map_varible -> ID brackets .)


state 126

    (199) pointer -> ID LBRACKET . NUMBER RBRACKET
    (200) pointer -> ID LBRACKET . NUMBER COLON NUMBER RBRACKET
    (52) brackets -> LBRACKET . NUMBER RBRACKET brackets
    (53) brackets -> LBRACKET . NUMBER RBRACKET
    (54) brackets -> LBRACKET . STRING RBRACKET brackets
    (55) brackets -> LBRACKET . STRING RBRACKET
    (56) brackets -> LBRACKET . ID RBRACKET
    (57) brackets -> LBRACKET . ID RBRACKET brackets

    NUMBER          shift and go to state 183
    STRING          shift and go to state 140
    ID              shift and go to state 141


state 127

    (23) constant -> ID EQUAL value constant .

    RPAREN          reduce using rule 23 (constant -> ID EQUAL value constant .)


state 128

    (214) value -> LBRACE values . RBRACE

    RBRACE          shift and go to state 184


state 129

    (72) values -> value . COMMA values
    (73) values -> value .

    COMMA           shift and go to state 185
    RBRACE          reduce using rule 73 (values -> value .)


state 130

    (74) values -> empty .

    RBRACE          reduce using rule 74 (values -> empty .)


state 131

    (41) args -> ID types COMMA args .

    RPAREN          reduce using rule 41 (args -> ID types COMMA args .)


state 132

    (38) args -> ID CHAN ID COMMA . args
    (36) args -> . ID types
    (37) args -> . ID CHAN ID
    (38) args -> . ID CHAN ID COMMA args
    (39) args -> . ID CHAN types
    (40) args -> . ID CHAN types COMMA args
    (41) args -> . ID types COMMA args
    (42) args -> . ID COMMA args
    (43) args -> . ID collection_args COMMA args
    (44) args -> . ID collection_args
    (45) args -> . ID POINTER callback
    (46) args -> . p_map_args COMMA args
    (47) args -> . p_map_args
    (48) args -> . empty
    (51) p_map_args -> . ID POINTER brackets TYPES
    (219) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 219 (empty -> .)

    args                           shift and go to state 186
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 133

    (40) args -> ID CHAN types COMMA . args
    (36) args -> . ID types
    (37) args -> . ID CHAN ID
    (38) args -> . ID CHAN ID COMMA args
    (39) args -> . ID CHAN types
    (40) args -> . ID CHAN types COMMA args
    (41) args -> . ID types COMMA args
    (42) args -> . ID COMMA args
    (43) args -> . ID collection_args COMMA args
    (44) args -> . ID collection_args
    (45) args -> . ID POINTER callback
    (46) args -> . p_map_args COMMA args
    (47) args -> . p_map_args
    (48) args -> . empty
    (51) p_map_args -> . ID POINTER brackets TYPES
    (219) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 219 (empty -> .)

    args                           shift and go to state 187
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 134

    (43) args -> ID collection_args COMMA args .

    RPAREN          reduce using rule 43 (args -> ID collection_args COMMA args .)


state 135

    (207) callback -> ID DOT . ID LPAREN ID LPAREN ID RPAREN RPAREN
    (210) callback -> ID DOT . callback
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 188
    RPAREN          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    LBRACKET        reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    LBRACE          reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]

    callback                       shift and go to state 189
    function                       shift and go to state 108
    empty                          shift and go to state 109

state 136

    (31) function -> ID LPAREN . parameters RPAREN
    (32) parameters -> . expression
    (33) parameters -> . CHAN TYPES
    (34) parameters -> . expression COMMA parameters
    (35) parameters -> . empty
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (219) empty -> .
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

    CHAN            shift and go to state 194
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    RPAREN          reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    parameters                     shift and go to state 192
    expression                     shift and go to state 193
    empty                          shift and go to state 195
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108

state 137

    (51) p_map_args -> ID POINTER brackets TYPES .

    COMMA           reduce using rule 51 (p_map_args -> ID POINTER brackets TYPES .)
    RPAREN          reduce using rule 51 (p_map_args -> ID POINTER brackets TYPES .)


state 138

    (209) callback -> function DOT . callback
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 216
    RPAREN          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    LBRACKET        reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    LBRACE          reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]

    function                       shift and go to state 108
    callback                       shift and go to state 215
    empty                          shift and go to state 109

state 139

    (52) brackets -> LBRACKET NUMBER . RBRACKET brackets
    (53) brackets -> LBRACKET NUMBER . RBRACKET
    (65) array_statement -> LBRACKET NUMBER . RBRACKET TYPES
    (66) array_statement -> LBRACKET NUMBER . RBRACKET TYPES LBRACE values RBRACE

    RBRACKET        shift and go to state 217


state 140

    (54) brackets -> LBRACKET STRING . RBRACKET brackets
    (55) brackets -> LBRACKET STRING . RBRACKET

    RBRACKET        shift and go to state 218


state 141

    (56) brackets -> LBRACKET ID . RBRACKET
    (57) brackets -> LBRACKET ID . RBRACKET brackets

    RBRACKET        shift and go to state 219


state 142

    (49) collection_args -> LBRACKET RBRACKET POINTER . ID

    ID              shift and go to state 220


state 143

    (50) collection_args -> LBRACKET RBRACKET ID .

    COMMA           reduce using rule 50 (collection_args -> LBRACKET RBRACKET ID .)
    RPAREN          reduce using rule 50 (collection_args -> LBRACKET RBRACKET ID .)


state 144

    (29) function_statement -> FUNC ID LPAREN args RPAREN types LBRACE . content RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 221
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 145

    (87) content -> ID . channel content
    (183) variable_statement -> ID . map_position EQUAL expression
    (184) variable_statement -> ID . COLON_EQUAL expression
    (186) variable_statement -> ID . COLON_EQUAL slice_statement
    (187) variable_statement -> ID . COLON_EQUAL array_statement
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (193) variable_redeclaration -> ID . EQUAL expression
    (194) variable_redeclaration -> ID . ASSIGN_OP expression
    (196) variable_redeclaration -> ID . DOT ID EQUAL expression
    (201) increment -> ID . INCREMENT
    (202) decrement -> ID . DECREMENT
    (31) function -> ID . LPAREN parameters RPAREN
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET

  ! shift/reduce conflict for ASSIGN_OP resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON_EQUAL     shift and go to state 225
    DOT             shift and go to state 226
    BREAK           reduce using rule 208 (callback -> ID .)
    ID              reduce using rule 208 (callback -> ID .)
    VAR             reduce using rule 208 (callback -> ID .)
    IF              reduce using rule 208 (callback -> ID .)
    FOR             reduce using rule 208 (callback -> ID .)
    GO              reduce using rule 208 (callback -> ID .)
    SWITCH          reduce using rule 208 (callback -> ID .)
    RETURN          reduce using rule 208 (callback -> ID .)
    DEFER           reduce using rule 208 (callback -> ID .)
    CONTINUE        reduce using rule 208 (callback -> ID .)
    SELECT          reduce using rule 208 (callback -> ID .)
    RBRACE          reduce using rule 208 (callback -> ID .)
    CASE            reduce using rule 208 (callback -> ID .)
    DEFAULT         reduce using rule 208 (callback -> ID .)
    EQUAL           shift and go to state 224
    ASSIGN_OP       shift and go to state 227
    INCREMENT       shift and go to state 228
    DECREMENT       shift and go to state 229
    LPAREN          shift and go to state 136
    CHANNEL_OP      shift and go to state 175
    LBRACKET        shift and go to state 230

  ! ASSIGN_OP       [ reduce using rule 208 (callback -> ID .) ]
  ! LBRACKET        [ reduce using rule 208 (callback -> ID .) ]
  ! CHANNEL_OP      [ reduce using rule 208 (callback -> ID .) ]

    channel                        shift and go to state 222
    map_position                   shift and go to state 223

state 146

    (30) function_statement -> FUNC ID LPAREN args RPAREN LBRACE content . RBRACE

    RBRACE          shift and go to state 231


state 147

    (75) content -> empty .
    (211) callback -> empty .
    (165) return -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 75 (content -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 75 (content -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 75 (content -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for GO resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for SWITCH resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for DEFER resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for SELECT resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for ASSIGN_OP resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 75 (content -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 75 (content -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 75 (content -> empty .)
    RBRACE          reduce using rule 75 (content -> empty .)
    CASE            reduce using rule 75 (content -> empty .)
    DEFAULT         reduce using rule 75 (content -> empty .)
    BREAK           reduce using rule 165 (return -> empty .)
    ID              reduce using rule 165 (return -> empty .)
    VAR             reduce using rule 165 (return -> empty .)
    LBRACKET        reduce using rule 165 (return -> empty .)
    IF              reduce using rule 165 (return -> empty .)
    FOR             reduce using rule 165 (return -> empty .)
    GO              reduce using rule 165 (return -> empty .)
    SWITCH          reduce using rule 165 (return -> empty .)
    RETURN          reduce using rule 165 (return -> empty .)
    DEFER           reduce using rule 165 (return -> empty .)
    CONTINUE        reduce using rule 165 (return -> empty .)
    SELECT          reduce using rule 165 (return -> empty .)
    CHANNEL_OP      reduce using rule 165 (return -> empty .)
    ASSIGN_OP       reduce using rule 165 (return -> empty .)

  ! ASSIGN_OP       [ reduce using rule 211 (callback -> empty .) ]
  ! BREAK           [ reduce using rule 211 (callback -> empty .) ]
  ! ID              [ reduce using rule 211 (callback -> empty .) ]
  ! VAR             [ reduce using rule 211 (callback -> empty .) ]
  ! LBRACKET        [ reduce using rule 211 (callback -> empty .) ]
  ! IF              [ reduce using rule 211 (callback -> empty .) ]
  ! FOR             [ reduce using rule 211 (callback -> empty .) ]
  ! GO              [ reduce using rule 211 (callback -> empty .) ]
  ! SWITCH          [ reduce using rule 211 (callback -> empty .) ]
  ! RETURN          [ reduce using rule 211 (callback -> empty .) ]
  ! DEFER           [ reduce using rule 211 (callback -> empty .) ]
  ! CONTINUE        [ reduce using rule 211 (callback -> empty .) ]
  ! SELECT          [ reduce using rule 211 (callback -> empty .) ]
  ! CHANNEL_OP      [ reduce using rule 211 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 211 (callback -> empty .) ]
  ! CASE            [ reduce using rule 211 (callback -> empty .) ]
  ! DEFAULT         [ reduce using rule 211 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 165 (return -> empty .) ]
  ! CASE            [ reduce using rule 165 (return -> empty .) ]
  ! DEFAULT         [ reduce using rule 165 (return -> empty .) ]


state 148

    (76) content -> variable_statement . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    variable_statement             shift and go to state 148
    content                        shift and go to state 232
    empty                          shift and go to state 147
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 149

    (77) content -> array_statement . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    array_statement                shift and go to state 149
    content                        shift and go to state 233
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 150

    (78) content -> callback . content
    (195) variable_redeclaration -> callback . ASSIGN_OP expression
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for ASSIGN_OP resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    ASSIGN_OP       shift and go to state 235
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! ASSIGN_OP       [ reduce using rule 219 (empty -> .) ]
  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    callback                       shift and go to state 150
    content                        shift and go to state 234
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 151

    (79) content -> variable_redeclaration . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    variable_redeclaration         shift and go to state 151
    content                        shift and go to state 236
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 152

    (80) content -> if . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    if                             shift and go to state 152
    content                        shift and go to state 237
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 153

    (81) content -> for . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    for                            shift and go to state 153
    content                        shift and go to state 238
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 154

    (82) content -> BREAK . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 239
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 155

    (83) content -> goroutine . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    goroutine                      shift and go to state 155
    content                        shift and go to state 240
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 156

    (84) content -> increment . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    increment                      shift and go to state 156
    content                        shift and go to state 241
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 157

    (85) content -> decrement . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    decrement                      shift and go to state 157
    content                        shift and go to state 242
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 158

    (86) content -> switch . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    switch                         shift and go to state 158
    content                        shift and go to state 243
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 159

    (92) content -> channel . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    channel                        shift and go to state 159
    content                        shift and go to state 244
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 160

    (88) content -> return . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    return                         shift and go to state 160
    content                        shift and go to state 245
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 161

    (89) content -> defer . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    defer                          shift and go to state 161
    content                        shift and go to state 246
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 162

    (90) content -> continue . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    continue                       shift and go to state 162
    content                        shift and go to state 247
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 163

    (91) content -> select . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    select                         shift and go to state 163
    content                        shift and go to state 248
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 164

    (177) variable_statement -> VAR . ID EQUAL slice_statement
    (178) variable_statement -> VAR . ID EQUAL array_statement
    (179) variable_statement -> VAR . ID types EQUAL expression
    (180) variable_statement -> VAR . ID EQUAL expression
    (181) variable_statement -> VAR . ID ID EQUAL expression
    (182) variable_statement -> VAR . ID callback
    (188) variable_statement -> VAR . ID TYPES

    ID              shift and go to state 249


state 165

    (185) variable_statement -> map_position . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 250


state 166

    (65) array_statement -> LBRACKET . NUMBER RBRACKET TYPES
    (66) array_statement -> LBRACKET . NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (189) map_position -> LBRACKET . STRING RBRACKET map_position
    (190) map_position -> LBRACKET . NUMBER RBRACKET map_position
    (191) map_position -> LBRACKET . STRING RBRACKET
    (192) map_position -> LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 251
    DOT             shift and go to state 64
    STRING          shift and go to state 252


state 167

    (118) if -> IF . expression LBRACE content RBRACE else
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 253
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 168

    (145) for -> FOR . LBRACE content RBRACE
    (146) for -> FOR . NOT ID LBRACE content RBRACE
    (147) for -> FOR . expression LBRACE content RBRACE
    (148) for -> FOR . for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> FOR . ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> FOR . UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> FOR . ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (152) for_declaration -> . ID COLON_EQUAL NUMBER
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 255
    NOT             shift and go to state 256
    ID              shift and go to state 257
    UNDERSCORE      shift and go to state 260
    LPAREN          shift and go to state 191
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 258
    for_declaration                shift and go to state 259
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 169

    (116) goroutine -> GO . callback
    (117) goroutine -> GO . lambda LPAREN parameters RPAREN
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 216
    FUNC            shift and go to state 211
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    LBRACKET        reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]

    callback                       shift and go to state 261
    lambda                         shift and go to state 262
    function                       shift and go to state 108
    empty                          shift and go to state 109

state 170

    (105) switch -> SWITCH . ID LBRACE cases_value default RBRACE
    (106) switch -> SWITCH . LBRACE cases_rel default RBRACE

    ID              shift and go to state 263
    LBRACE          shift and go to state 264


state 171

    (163) return -> RETURN .
    (164) return -> RETURN . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! reduce/reduce conflict for BREAK resolved using rule 163 (return -> RETURN .)
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for VAR resolved using rule 163 (return -> RETURN .)
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! reduce/reduce conflict for IF resolved using rule 163 (return -> RETURN .)
  ! reduce/reduce conflict for FOR resolved using rule 163 (return -> RETURN .)
  ! reduce/reduce conflict for GO resolved using rule 163 (return -> RETURN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 163 (return -> RETURN .)
  ! reduce/reduce conflict for RETURN resolved using rule 163 (return -> RETURN .)
  ! reduce/reduce conflict for DEFER resolved using rule 163 (return -> RETURN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 163 (return -> RETURN .)
  ! reduce/reduce conflict for SELECT resolved using rule 163 (return -> RETURN .)
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
  ! reduce/reduce conflict for ASSIGN_OP resolved using rule 163 (return -> RETURN .)
  ! reduce/reduce conflict for RBRACE resolved using rule 163 (return -> RETURN .)
  ! reduce/reduce conflict for CASE resolved using rule 163 (return -> RETURN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 163 (return -> RETURN .)
    BREAK           reduce using rule 163 (return -> RETURN .)
    VAR             reduce using rule 163 (return -> RETURN .)
    IF              reduce using rule 163 (return -> RETURN .)
    FOR             reduce using rule 163 (return -> RETURN .)
    GO              reduce using rule 163 (return -> RETURN .)
    SWITCH          reduce using rule 163 (return -> RETURN .)
    RETURN          reduce using rule 163 (return -> RETURN .)
    DEFER           reduce using rule 163 (return -> RETURN .)
    CONTINUE        reduce using rule 163 (return -> RETURN .)
    SELECT          reduce using rule 163 (return -> RETURN .)
    ASSIGN_OP       reduce using rule 163 (return -> RETURN .)
    RBRACE          reduce using rule 163 (return -> RETURN .)
    CASE            reduce using rule 163 (return -> RETURN .)
    DEFAULT         reduce using rule 163 (return -> RETURN .)
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 163 (return -> RETURN .) ]
  ! LBRACKET        [ reduce using rule 163 (return -> RETURN .) ]
  ! CHANNEL_OP      [ reduce using rule 163 (return -> RETURN .) ]
  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]
  ! ASSIGN_OP       [ reduce using rule 219 (empty -> .) ]
  ! RBRACE          [ reduce using rule 219 (empty -> .) ]
  ! CASE            [ reduce using rule 219 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 265
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 172

    (104) defer -> DEFER . callback
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 216
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    LBRACKET        reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]

    callback                       shift and go to state 266
    function                       shift and go to state 108
    empty                          shift and go to state 109

state 173

    (93) continue -> CONTINUE .

    BREAK           reduce using rule 93 (continue -> CONTINUE .)
    ID              reduce using rule 93 (continue -> CONTINUE .)
    VAR             reduce using rule 93 (continue -> CONTINUE .)
    LBRACKET        reduce using rule 93 (continue -> CONTINUE .)
    IF              reduce using rule 93 (continue -> CONTINUE .)
    FOR             reduce using rule 93 (continue -> CONTINUE .)
    GO              reduce using rule 93 (continue -> CONTINUE .)
    SWITCH          reduce using rule 93 (continue -> CONTINUE .)
    RETURN          reduce using rule 93 (continue -> CONTINUE .)
    DEFER           reduce using rule 93 (continue -> CONTINUE .)
    CONTINUE        reduce using rule 93 (continue -> CONTINUE .)
    SELECT          reduce using rule 93 (continue -> CONTINUE .)
    CHANNEL_OP      reduce using rule 93 (continue -> CONTINUE .)
    ASSIGN_OP       reduce using rule 93 (continue -> CONTINUE .)
    RBRACE          reduce using rule 93 (continue -> CONTINUE .)
    CASE            reduce using rule 93 (continue -> CONTINUE .)
    DEFAULT         reduce using rule 93 (continue -> CONTINUE .)


state 174

    (100) select -> SELECT . LBRACE select_cases RBRACE

    LBRACE          shift and go to state 267


state 175

    (94) channel -> CHANNEL_OP . value
    (95) channel -> CHANNEL_OP . ID
    (96) channel -> CHANNEL_OP . callback
    (97) channel -> CHANNEL_OP . struct_declaretion
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    ID              shift and go to state 269
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 94
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    LBRACKET        reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    RPAREN          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACE          [ reduce using rule 219 (empty -> .) ]

    value                          shift and go to state 268
    callback                       shift and go to state 270
    struct_declaretion             shift and go to state 271
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 109

state 176

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN . args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN . args RPAREN TYPES LBRACE content RBRACE
    (36) args -> . ID types
    (37) args -> . ID CHAN ID
    (38) args -> . ID CHAN ID COMMA args
    (39) args -> . ID CHAN types
    (40) args -> . ID CHAN types COMMA args
    (41) args -> . ID types COMMA args
    (42) args -> . ID COMMA args
    (43) args -> . ID collection_args COMMA args
    (44) args -> . ID collection_args
    (45) args -> . ID POINTER callback
    (46) args -> . p_map_args COMMA args
    (47) args -> . p_map_args
    (48) args -> . empty
    (51) p_map_args -> . ID POINTER brackets TYPES
    (219) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 219 (empty -> .)

    args                           shift and go to state 272
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 177

    (66) array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE . values RBRACE
    (72) values -> . value COMMA values
    (73) values -> . value
    (74) values -> . empty
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (219) empty -> .
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 94
    RBRACE          reduce using rule 219 (empty -> .)
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    values                         shift and go to state 273
    value                          shift and go to state 129
    empty                          shift and go to state 130
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 178

    (70) slice_statement -> LBRACKET RBRACKET TYPES LBRACE values . RBRACE

    RBRACE          shift and go to state 274


state 179

    (67) array_statement -> LBRACKET DOT DOT DOT RBRACKET . TYPES
    (68) array_statement -> LBRACKET DOT DOT DOT RBRACKET . TYPES LBRACE values RBRACE

    TYPES           shift and go to state 275


state 180

    (27) field -> ID ID DOT . ID

    ID              shift and go to state 276


state 181

    (26) field -> ID types field .

    RBRACE          reduce using rule 26 (field -> ID types field .)


state 182

    (18) method_list -> ID LPAREN args . RPAREN types method_list

    RPAREN          shift and go to state 277


state 183

    (199) pointer -> ID LBRACKET NUMBER . RBRACKET
    (200) pointer -> ID LBRACKET NUMBER . COLON NUMBER RBRACKET
    (52) brackets -> LBRACKET NUMBER . RBRACKET brackets
    (53) brackets -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 278
    COLON           shift and go to state 279


state 184

    (214) value -> LBRACE values RBRACE .

    ID              reduce using rule 214 (value -> LBRACE values RBRACE .)
    RPAREN          reduce using rule 214 (value -> LBRACE values RBRACE .)
    COMMA           reduce using rule 214 (value -> LBRACE values RBRACE .)
    RBRACE          reduce using rule 214 (value -> LBRACE values RBRACE .)
    COLON           reduce using rule 214 (value -> LBRACE values RBRACE .)
    ARITH_OP        reduce using rule 214 (value -> LBRACE values RBRACE .)
    REL_OP          reduce using rule 214 (value -> LBRACE values RBRACE .)
    LOG_OP          reduce using rule 214 (value -> LBRACE values RBRACE .)
    POINTER         reduce using rule 214 (value -> LBRACE values RBRACE .)
    LBRACE          reduce using rule 214 (value -> LBRACE values RBRACE .)
    BREAK           reduce using rule 214 (value -> LBRACE values RBRACE .)
    VAR             reduce using rule 214 (value -> LBRACE values RBRACE .)
    LBRACKET        reduce using rule 214 (value -> LBRACE values RBRACE .)
    IF              reduce using rule 214 (value -> LBRACE values RBRACE .)
    FOR             reduce using rule 214 (value -> LBRACE values RBRACE .)
    GO              reduce using rule 214 (value -> LBRACE values RBRACE .)
    SWITCH          reduce using rule 214 (value -> LBRACE values RBRACE .)
    RETURN          reduce using rule 214 (value -> LBRACE values RBRACE .)
    DEFER           reduce using rule 214 (value -> LBRACE values RBRACE .)
    CONTINUE        reduce using rule 214 (value -> LBRACE values RBRACE .)
    SELECT          reduce using rule 214 (value -> LBRACE values RBRACE .)
    CHANNEL_OP      reduce using rule 214 (value -> LBRACE values RBRACE .)
    ASSIGN_OP       reduce using rule 214 (value -> LBRACE values RBRACE .)
    CASE            reduce using rule 214 (value -> LBRACE values RBRACE .)
    DEFAULT         reduce using rule 214 (value -> LBRACE values RBRACE .)
    SEMICOLON       reduce using rule 214 (value -> LBRACE values RBRACE .)


state 185

    (72) values -> value COMMA . values
    (72) values -> . value COMMA values
    (73) values -> . value
    (74) values -> . empty
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (219) empty -> .
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 94
    RBRACE          reduce using rule 219 (empty -> .)
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    value                          shift and go to state 129
    values                         shift and go to state 280
    empty                          shift and go to state 130
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 186

    (38) args -> ID CHAN ID COMMA args .

    RPAREN          reduce using rule 38 (args -> ID CHAN ID COMMA args .)


state 187

    (40) args -> ID CHAN types COMMA args .

    RPAREN          reduce using rule 40 (args -> ID CHAN types COMMA args .)


state 188

    (207) callback -> ID DOT ID . LPAREN ID LPAREN ID RPAREN RPAREN
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (31) function -> ID . LPAREN parameters RPAREN

    LPAREN          shift and go to state 281
    DOT             shift and go to state 135
    RPAREN          reduce using rule 208 (callback -> ID .)
    ASSIGN_OP       reduce using rule 208 (callback -> ID .)
    BREAK           reduce using rule 208 (callback -> ID .)
    ID              reduce using rule 208 (callback -> ID .)
    VAR             reduce using rule 208 (callback -> ID .)
    LBRACKET        reduce using rule 208 (callback -> ID .)
    IF              reduce using rule 208 (callback -> ID .)
    FOR             reduce using rule 208 (callback -> ID .)
    GO              reduce using rule 208 (callback -> ID .)
    SWITCH          reduce using rule 208 (callback -> ID .)
    RETURN          reduce using rule 208 (callback -> ID .)
    DEFER           reduce using rule 208 (callback -> ID .)
    CONTINUE        reduce using rule 208 (callback -> ID .)
    SELECT          reduce using rule 208 (callback -> ID .)
    CHANNEL_OP      reduce using rule 208 (callback -> ID .)
    RBRACE          reduce using rule 208 (callback -> ID .)
    COMMA           reduce using rule 208 (callback -> ID .)
    ARITH_OP        reduce using rule 208 (callback -> ID .)
    REL_OP          reduce using rule 208 (callback -> ID .)
    LOG_OP          reduce using rule 208 (callback -> ID .)
    POINTER         reduce using rule 208 (callback -> ID .)
    CASE            reduce using rule 208 (callback -> ID .)
    DEFAULT         reduce using rule 208 (callback -> ID .)
    LBRACE          reduce using rule 208 (callback -> ID .)
    SEMICOLON       reduce using rule 208 (callback -> ID .)
    COLON           reduce using rule 208 (callback -> ID .)


state 189

    (210) callback -> ID DOT callback .

    RPAREN          reduce using rule 210 (callback -> ID DOT callback .)
    ASSIGN_OP       reduce using rule 210 (callback -> ID DOT callback .)
    BREAK           reduce using rule 210 (callback -> ID DOT callback .)
    ID              reduce using rule 210 (callback -> ID DOT callback .)
    VAR             reduce using rule 210 (callback -> ID DOT callback .)
    LBRACKET        reduce using rule 210 (callback -> ID DOT callback .)
    IF              reduce using rule 210 (callback -> ID DOT callback .)
    FOR             reduce using rule 210 (callback -> ID DOT callback .)
    GO              reduce using rule 210 (callback -> ID DOT callback .)
    SWITCH          reduce using rule 210 (callback -> ID DOT callback .)
    RETURN          reduce using rule 210 (callback -> ID DOT callback .)
    DEFER           reduce using rule 210 (callback -> ID DOT callback .)
    CONTINUE        reduce using rule 210 (callback -> ID DOT callback .)
    SELECT          reduce using rule 210 (callback -> ID DOT callback .)
    CHANNEL_OP      reduce using rule 210 (callback -> ID DOT callback .)
    RBRACE          reduce using rule 210 (callback -> ID DOT callback .)
    COMMA           reduce using rule 210 (callback -> ID DOT callback .)
    ARITH_OP        reduce using rule 210 (callback -> ID DOT callback .)
    REL_OP          reduce using rule 210 (callback -> ID DOT callback .)
    LOG_OP          reduce using rule 210 (callback -> ID DOT callback .)
    POINTER         reduce using rule 210 (callback -> ID DOT callback .)
    CASE            reduce using rule 210 (callback -> ID DOT callback .)
    DEFAULT         reduce using rule 210 (callback -> ID DOT callback .)
    LBRACE          reduce using rule 210 (callback -> ID DOT callback .)
    SEMICOLON       reduce using rule 210 (callback -> ID DOT callback .)
    COLON           reduce using rule 210 (callback -> ID DOT callback .)


state 190

    (129) expression -> ID . COLON_EQUAL channel
    (139) expression -> ID .
    (201) increment -> ID . INCREMENT
    (202) decrement -> ID . DECREMENT
    (204) struct -> ID . DOT ID
    (205) struct -> ID . DOT struct
    (172) collection_statement -> ID . LBRACE collection_types RBRACE
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (166) struct_declaretion -> ID . LBRACE struct_declaretion_values RBRACE
    (143) collection -> ID . LBRACKET ID RBRACKET DOT ID
    (144) collection -> ID . LBRACKET ID RBRACKET
    (218) map_varible -> ID . brackets
    (199) pointer -> ID . LBRACKET NUMBER RBRACKET
    (200) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> ID . LPAREN parameters RPAREN
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACE resolved as shift
  ! reduce/reduce conflict for COMMA resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for ARITH_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for REL_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for POINTER resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 139 (expression -> ID .)
  ! shift/reduce conflict for LBRACE resolved as shift
  ! reduce/reduce conflict for BREAK resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for GO resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for DEFER resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for SELECT resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for ASSIGN_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for RBRACE resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for COLON resolved using rule 139 (expression -> ID .)
  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON_EQUAL     shift and go to state 282
    COMMA           reduce using rule 139 (expression -> ID .)
    ARITH_OP        reduce using rule 139 (expression -> ID .)
    REL_OP          reduce using rule 139 (expression -> ID .)
    LOG_OP          reduce using rule 139 (expression -> ID .)
    POINTER         reduce using rule 139 (expression -> ID .)
    RPAREN          reduce using rule 139 (expression -> ID .)
    BREAK           reduce using rule 139 (expression -> ID .)
    ID              reduce using rule 139 (expression -> ID .)
    VAR             reduce using rule 139 (expression -> ID .)
    IF              reduce using rule 139 (expression -> ID .)
    FOR             reduce using rule 139 (expression -> ID .)
    GO              reduce using rule 139 (expression -> ID .)
    SWITCH          reduce using rule 139 (expression -> ID .)
    RETURN          reduce using rule 139 (expression -> ID .)
    DEFER           reduce using rule 139 (expression -> ID .)
    CONTINUE        reduce using rule 139 (expression -> ID .)
    SELECT          reduce using rule 139 (expression -> ID .)
    CHANNEL_OP      reduce using rule 139 (expression -> ID .)
    ASSIGN_OP       reduce using rule 139 (expression -> ID .)
    RBRACE          reduce using rule 139 (expression -> ID .)
    CASE            reduce using rule 139 (expression -> ID .)
    DEFAULT         reduce using rule 139 (expression -> ID .)
    SEMICOLON       reduce using rule 139 (expression -> ID .)
    COLON           reduce using rule 139 (expression -> ID .)
    INCREMENT       shift and go to state 228
    DECREMENT       shift and go to state 229
    DOT             shift and go to state 283
    LBRACE          shift and go to state 284
    LBRACKET        shift and go to state 285
    LPAREN          shift and go to state 136

  ! LBRACE          [ reduce using rule 139 (expression -> ID .) ]
  ! LBRACKET        [ reduce using rule 139 (expression -> ID .) ]
  ! COMMA           [ reduce using rule 208 (callback -> ID .) ]
  ! ARITH_OP        [ reduce using rule 208 (callback -> ID .) ]
  ! REL_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! LOG_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! POINTER         [ reduce using rule 208 (callback -> ID .) ]
  ! RPAREN          [ reduce using rule 208 (callback -> ID .) ]
  ! LBRACE          [ reduce using rule 208 (callback -> ID .) ]
  ! BREAK           [ reduce using rule 208 (callback -> ID .) ]
  ! ID              [ reduce using rule 208 (callback -> ID .) ]
  ! VAR             [ reduce using rule 208 (callback -> ID .) ]
  ! LBRACKET        [ reduce using rule 208 (callback -> ID .) ]
  ! IF              [ reduce using rule 208 (callback -> ID .) ]
  ! FOR             [ reduce using rule 208 (callback -> ID .) ]
  ! GO              [ reduce using rule 208 (callback -> ID .) ]
  ! SWITCH          [ reduce using rule 208 (callback -> ID .) ]
  ! RETURN          [ reduce using rule 208 (callback -> ID .) ]
  ! DEFER           [ reduce using rule 208 (callback -> ID .) ]
  ! CONTINUE        [ reduce using rule 208 (callback -> ID .) ]
  ! SELECT          [ reduce using rule 208 (callback -> ID .) ]
  ! CHANNEL_OP      [ reduce using rule 208 (callback -> ID .) ]
  ! ASSIGN_OP       [ reduce using rule 208 (callback -> ID .) ]
  ! RBRACE          [ reduce using rule 208 (callback -> ID .) ]
  ! CASE            [ reduce using rule 208 (callback -> ID .) ]
  ! DEFAULT         [ reduce using rule 208 (callback -> ID .) ]
  ! SEMICOLON       [ reduce using rule 208 (callback -> ID .) ]
  ! COLON           [ reduce using rule 208 (callback -> ID .) ]

    brackets                       shift and go to state 125

state 191

    (123) expression -> LPAREN . expression RPAREN
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    RPAREN          reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)

    expression                     shift and go to state 286
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 192

    (31) function -> ID LPAREN parameters . RPAREN

    RPAREN          shift and go to state 287


state 193

    (32) parameters -> expression .
    (34) parameters -> expression . COMMA parameters
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    RPAREN          reduce using rule 32 (parameters -> expression .)
    COMMA           shift and go to state 288
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 194

    (33) parameters -> CHAN . TYPES

    TYPES           shift and go to state 293


state 195

    (35) parameters -> empty .
    (211) callback -> empty .
    (156) map -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 35 (parameters -> empty .)
  ! reduce/reduce conflict for COMMA resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for ARITH_OP resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for REL_OP resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for POINTER resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (parameters -> empty .)
    RPAREN          reduce using rule 35 (parameters -> empty .)
    COMMA           reduce using rule 156 (map -> empty .)
    ARITH_OP        reduce using rule 156 (map -> empty .)
    REL_OP          reduce using rule 156 (map -> empty .)
    LOG_OP          reduce using rule 156 (map -> empty .)
    POINTER         reduce using rule 156 (map -> empty .)

  ! COMMA           [ reduce using rule 211 (callback -> empty .) ]
  ! ARITH_OP        [ reduce using rule 211 (callback -> empty .) ]
  ! REL_OP          [ reduce using rule 211 (callback -> empty .) ]
  ! LOG_OP          [ reduce using rule 211 (callback -> empty .) ]
  ! POINTER         [ reduce using rule 211 (callback -> empty .) ]
  ! RPAREN          [ reduce using rule 211 (callback -> empty .) ]
  ! RPAREN          [ reduce using rule 156 (map -> empty .) ]


state 196

    (122) expression -> value .
    (159) map -> value . COLON value
    (160) map -> value . COLON value COMMA map
    (161) map -> value . COLON map
    (162) map -> value . COLON map COMMA map

  ! shift/reduce conflict for COLON resolved as shift
    COMMA           reduce using rule 122 (expression -> value .)
    ARITH_OP        reduce using rule 122 (expression -> value .)
    REL_OP          reduce using rule 122 (expression -> value .)
    LOG_OP          reduce using rule 122 (expression -> value .)
    POINTER         reduce using rule 122 (expression -> value .)
    RPAREN          reduce using rule 122 (expression -> value .)
    LBRACE          reduce using rule 122 (expression -> value .)
    BREAK           reduce using rule 122 (expression -> value .)
    ID              reduce using rule 122 (expression -> value .)
    VAR             reduce using rule 122 (expression -> value .)
    LBRACKET        reduce using rule 122 (expression -> value .)
    IF              reduce using rule 122 (expression -> value .)
    FOR             reduce using rule 122 (expression -> value .)
    GO              reduce using rule 122 (expression -> value .)
    SWITCH          reduce using rule 122 (expression -> value .)
    RETURN          reduce using rule 122 (expression -> value .)
    DEFER           reduce using rule 122 (expression -> value .)
    CONTINUE        reduce using rule 122 (expression -> value .)
    SELECT          reduce using rule 122 (expression -> value .)
    CHANNEL_OP      reduce using rule 122 (expression -> value .)
    ASSIGN_OP       reduce using rule 122 (expression -> value .)
    RBRACE          reduce using rule 122 (expression -> value .)
    CASE            reduce using rule 122 (expression -> value .)
    DEFAULT         reduce using rule 122 (expression -> value .)
    SEMICOLON       reduce using rule 122 (expression -> value .)
    COLON           shift and go to state 294

  ! COLON           [ reduce using rule 122 (expression -> value .) ]


state 197

    (128) expression -> NOT . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    RPAREN          reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 295
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 198

    (130) expression -> channel .

    COMMA           reduce using rule 130 (expression -> channel .)
    ARITH_OP        reduce using rule 130 (expression -> channel .)
    REL_OP          reduce using rule 130 (expression -> channel .)
    LOG_OP          reduce using rule 130 (expression -> channel .)
    POINTER         reduce using rule 130 (expression -> channel .)
    RPAREN          reduce using rule 130 (expression -> channel .)
    LBRACE          reduce using rule 130 (expression -> channel .)
    BREAK           reduce using rule 130 (expression -> channel .)
    ID              reduce using rule 130 (expression -> channel .)
    VAR             reduce using rule 130 (expression -> channel .)
    LBRACKET        reduce using rule 130 (expression -> channel .)
    IF              reduce using rule 130 (expression -> channel .)
    FOR             reduce using rule 130 (expression -> channel .)
    GO              reduce using rule 130 (expression -> channel .)
    SWITCH          reduce using rule 130 (expression -> channel .)
    RETURN          reduce using rule 130 (expression -> channel .)
    DEFER           reduce using rule 130 (expression -> channel .)
    CONTINUE        reduce using rule 130 (expression -> channel .)
    SELECT          reduce using rule 130 (expression -> channel .)
    CHANNEL_OP      reduce using rule 130 (expression -> channel .)
    ASSIGN_OP       reduce using rule 130 (expression -> channel .)
    RBRACE          reduce using rule 130 (expression -> channel .)
    CASE            reduce using rule 130 (expression -> channel .)
    DEFAULT         reduce using rule 130 (expression -> channel .)
    SEMICOLON       reduce using rule 130 (expression -> channel .)
    COLON           reduce using rule 130 (expression -> channel .)


state 199

    (131) expression -> increment .

    COMMA           reduce using rule 131 (expression -> increment .)
    ARITH_OP        reduce using rule 131 (expression -> increment .)
    REL_OP          reduce using rule 131 (expression -> increment .)
    LOG_OP          reduce using rule 131 (expression -> increment .)
    POINTER         reduce using rule 131 (expression -> increment .)
    RPAREN          reduce using rule 131 (expression -> increment .)
    LBRACE          reduce using rule 131 (expression -> increment .)
    BREAK           reduce using rule 131 (expression -> increment .)
    ID              reduce using rule 131 (expression -> increment .)
    VAR             reduce using rule 131 (expression -> increment .)
    LBRACKET        reduce using rule 131 (expression -> increment .)
    IF              reduce using rule 131 (expression -> increment .)
    FOR             reduce using rule 131 (expression -> increment .)
    GO              reduce using rule 131 (expression -> increment .)
    SWITCH          reduce using rule 131 (expression -> increment .)
    RETURN          reduce using rule 131 (expression -> increment .)
    DEFER           reduce using rule 131 (expression -> increment .)
    CONTINUE        reduce using rule 131 (expression -> increment .)
    SELECT          reduce using rule 131 (expression -> increment .)
    CHANNEL_OP      reduce using rule 131 (expression -> increment .)
    ASSIGN_OP       reduce using rule 131 (expression -> increment .)
    RBRACE          reduce using rule 131 (expression -> increment .)
    CASE            reduce using rule 131 (expression -> increment .)
    DEFAULT         reduce using rule 131 (expression -> increment .)
    SEMICOLON       reduce using rule 131 (expression -> increment .)
    COLON           reduce using rule 131 (expression -> increment .)


state 200

    (132) expression -> lambda .

    COMMA           reduce using rule 132 (expression -> lambda .)
    ARITH_OP        reduce using rule 132 (expression -> lambda .)
    REL_OP          reduce using rule 132 (expression -> lambda .)
    LOG_OP          reduce using rule 132 (expression -> lambda .)
    POINTER         reduce using rule 132 (expression -> lambda .)
    RPAREN          reduce using rule 132 (expression -> lambda .)
    LBRACE          reduce using rule 132 (expression -> lambda .)
    BREAK           reduce using rule 132 (expression -> lambda .)
    ID              reduce using rule 132 (expression -> lambda .)
    VAR             reduce using rule 132 (expression -> lambda .)
    LBRACKET        reduce using rule 132 (expression -> lambda .)
    IF              reduce using rule 132 (expression -> lambda .)
    FOR             reduce using rule 132 (expression -> lambda .)
    GO              reduce using rule 132 (expression -> lambda .)
    SWITCH          reduce using rule 132 (expression -> lambda .)
    RETURN          reduce using rule 132 (expression -> lambda .)
    DEFER           reduce using rule 132 (expression -> lambda .)
    CONTINUE        reduce using rule 132 (expression -> lambda .)
    SELECT          reduce using rule 132 (expression -> lambda .)
    CHANNEL_OP      reduce using rule 132 (expression -> lambda .)
    ASSIGN_OP       reduce using rule 132 (expression -> lambda .)
    RBRACE          reduce using rule 132 (expression -> lambda .)
    CASE            reduce using rule 132 (expression -> lambda .)
    DEFAULT         reduce using rule 132 (expression -> lambda .)
    SEMICOLON       reduce using rule 132 (expression -> lambda .)
    COLON           reduce using rule 132 (expression -> lambda .)


state 201

    (133) expression -> decrement .

    COMMA           reduce using rule 133 (expression -> decrement .)
    ARITH_OP        reduce using rule 133 (expression -> decrement .)
    REL_OP          reduce using rule 133 (expression -> decrement .)
    LOG_OP          reduce using rule 133 (expression -> decrement .)
    POINTER         reduce using rule 133 (expression -> decrement .)
    RPAREN          reduce using rule 133 (expression -> decrement .)
    LBRACE          reduce using rule 133 (expression -> decrement .)
    BREAK           reduce using rule 133 (expression -> decrement .)
    ID              reduce using rule 133 (expression -> decrement .)
    VAR             reduce using rule 133 (expression -> decrement .)
    LBRACKET        reduce using rule 133 (expression -> decrement .)
    IF              reduce using rule 133 (expression -> decrement .)
    FOR             reduce using rule 133 (expression -> decrement .)
    GO              reduce using rule 133 (expression -> decrement .)
    SWITCH          reduce using rule 133 (expression -> decrement .)
    RETURN          reduce using rule 133 (expression -> decrement .)
    DEFER           reduce using rule 133 (expression -> decrement .)
    CONTINUE        reduce using rule 133 (expression -> decrement .)
    SELECT          reduce using rule 133 (expression -> decrement .)
    CHANNEL_OP      reduce using rule 133 (expression -> decrement .)
    ASSIGN_OP       reduce using rule 133 (expression -> decrement .)
    RBRACE          reduce using rule 133 (expression -> decrement .)
    CASE            reduce using rule 133 (expression -> decrement .)
    DEFAULT         reduce using rule 133 (expression -> decrement .)
    SEMICOLON       reduce using rule 133 (expression -> decrement .)
    COLON           reduce using rule 133 (expression -> decrement .)


state 202

    (134) expression -> struct .

    COMMA           reduce using rule 134 (expression -> struct .)
    ARITH_OP        reduce using rule 134 (expression -> struct .)
    REL_OP          reduce using rule 134 (expression -> struct .)
    LOG_OP          reduce using rule 134 (expression -> struct .)
    POINTER         reduce using rule 134 (expression -> struct .)
    RPAREN          reduce using rule 134 (expression -> struct .)
    LBRACE          reduce using rule 134 (expression -> struct .)
    BREAK           reduce using rule 134 (expression -> struct .)
    ID              reduce using rule 134 (expression -> struct .)
    VAR             reduce using rule 134 (expression -> struct .)
    LBRACKET        reduce using rule 134 (expression -> struct .)
    IF              reduce using rule 134 (expression -> struct .)
    FOR             reduce using rule 134 (expression -> struct .)
    GO              reduce using rule 134 (expression -> struct .)
    SWITCH          reduce using rule 134 (expression -> struct .)
    RETURN          reduce using rule 134 (expression -> struct .)
    DEFER           reduce using rule 134 (expression -> struct .)
    CONTINUE        reduce using rule 134 (expression -> struct .)
    SELECT          reduce using rule 134 (expression -> struct .)
    CHANNEL_OP      reduce using rule 134 (expression -> struct .)
    ASSIGN_OP       reduce using rule 134 (expression -> struct .)
    RBRACE          reduce using rule 134 (expression -> struct .)
    CASE            reduce using rule 134 (expression -> struct .)
    DEFAULT         reduce using rule 134 (expression -> struct .)
    SEMICOLON       reduce using rule 134 (expression -> struct .)
    COLON           reduce using rule 134 (expression -> struct .)


state 203

    (135) expression -> collection_statement .

    COMMA           reduce using rule 135 (expression -> collection_statement .)
    ARITH_OP        reduce using rule 135 (expression -> collection_statement .)
    REL_OP          reduce using rule 135 (expression -> collection_statement .)
    LOG_OP          reduce using rule 135 (expression -> collection_statement .)
    POINTER         reduce using rule 135 (expression -> collection_statement .)
    RPAREN          reduce using rule 135 (expression -> collection_statement .)
    LBRACE          reduce using rule 135 (expression -> collection_statement .)
    BREAK           reduce using rule 135 (expression -> collection_statement .)
    ID              reduce using rule 135 (expression -> collection_statement .)
    VAR             reduce using rule 135 (expression -> collection_statement .)
    LBRACKET        reduce using rule 135 (expression -> collection_statement .)
    IF              reduce using rule 135 (expression -> collection_statement .)
    FOR             reduce using rule 135 (expression -> collection_statement .)
    GO              reduce using rule 135 (expression -> collection_statement .)
    SWITCH          reduce using rule 135 (expression -> collection_statement .)
    RETURN          reduce using rule 135 (expression -> collection_statement .)
    DEFER           reduce using rule 135 (expression -> collection_statement .)
    CONTINUE        reduce using rule 135 (expression -> collection_statement .)
    SELECT          reduce using rule 135 (expression -> collection_statement .)
    CHANNEL_OP      reduce using rule 135 (expression -> collection_statement .)
    ASSIGN_OP       reduce using rule 135 (expression -> collection_statement .)
    RBRACE          reduce using rule 135 (expression -> collection_statement .)
    CASE            reduce using rule 135 (expression -> collection_statement .)
    DEFAULT         reduce using rule 135 (expression -> collection_statement .)
    SEMICOLON       reduce using rule 135 (expression -> collection_statement .)
    COLON           reduce using rule 135 (expression -> collection_statement .)


state 204

    (136) expression -> callback .

    COMMA           reduce using rule 136 (expression -> callback .)
    ARITH_OP        reduce using rule 136 (expression -> callback .)
    REL_OP          reduce using rule 136 (expression -> callback .)
    LOG_OP          reduce using rule 136 (expression -> callback .)
    POINTER         reduce using rule 136 (expression -> callback .)
    RPAREN          reduce using rule 136 (expression -> callback .)
    LBRACE          reduce using rule 136 (expression -> callback .)
    BREAK           reduce using rule 136 (expression -> callback .)
    ID              reduce using rule 136 (expression -> callback .)
    VAR             reduce using rule 136 (expression -> callback .)
    LBRACKET        reduce using rule 136 (expression -> callback .)
    IF              reduce using rule 136 (expression -> callback .)
    FOR             reduce using rule 136 (expression -> callback .)
    GO              reduce using rule 136 (expression -> callback .)
    SWITCH          reduce using rule 136 (expression -> callback .)
    RETURN          reduce using rule 136 (expression -> callback .)
    DEFER           reduce using rule 136 (expression -> callback .)
    CONTINUE        reduce using rule 136 (expression -> callback .)
    SELECT          reduce using rule 136 (expression -> callback .)
    CHANNEL_OP      reduce using rule 136 (expression -> callback .)
    ASSIGN_OP       reduce using rule 136 (expression -> callback .)
    RBRACE          reduce using rule 136 (expression -> callback .)
    CASE            reduce using rule 136 (expression -> callback .)
    DEFAULT         reduce using rule 136 (expression -> callback .)
    SEMICOLON       reduce using rule 136 (expression -> callback .)
    COLON           reduce using rule 136 (expression -> callback .)


state 205

    (137) expression -> struct_declaretion .

    COMMA           reduce using rule 137 (expression -> struct_declaretion .)
    ARITH_OP        reduce using rule 137 (expression -> struct_declaretion .)
    REL_OP          reduce using rule 137 (expression -> struct_declaretion .)
    LOG_OP          reduce using rule 137 (expression -> struct_declaretion .)
    POINTER         reduce using rule 137 (expression -> struct_declaretion .)
    RPAREN          reduce using rule 137 (expression -> struct_declaretion .)
    LBRACE          reduce using rule 137 (expression -> struct_declaretion .)
    BREAK           reduce using rule 137 (expression -> struct_declaretion .)
    ID              reduce using rule 137 (expression -> struct_declaretion .)
    VAR             reduce using rule 137 (expression -> struct_declaretion .)
    LBRACKET        reduce using rule 137 (expression -> struct_declaretion .)
    IF              reduce using rule 137 (expression -> struct_declaretion .)
    FOR             reduce using rule 137 (expression -> struct_declaretion .)
    GO              reduce using rule 137 (expression -> struct_declaretion .)
    SWITCH          reduce using rule 137 (expression -> struct_declaretion .)
    RETURN          reduce using rule 137 (expression -> struct_declaretion .)
    DEFER           reduce using rule 137 (expression -> struct_declaretion .)
    CONTINUE        reduce using rule 137 (expression -> struct_declaretion .)
    SELECT          reduce using rule 137 (expression -> struct_declaretion .)
    CHANNEL_OP      reduce using rule 137 (expression -> struct_declaretion .)
    ASSIGN_OP       reduce using rule 137 (expression -> struct_declaretion .)
    RBRACE          reduce using rule 137 (expression -> struct_declaretion .)
    CASE            reduce using rule 137 (expression -> struct_declaretion .)
    DEFAULT         reduce using rule 137 (expression -> struct_declaretion .)
    SEMICOLON       reduce using rule 137 (expression -> struct_declaretion .)
    COLON           reduce using rule 137 (expression -> struct_declaretion .)


state 206

    (138) expression -> address_pointer .

    COMMA           reduce using rule 138 (expression -> address_pointer .)
    ARITH_OP        reduce using rule 138 (expression -> address_pointer .)
    REL_OP          reduce using rule 138 (expression -> address_pointer .)
    LOG_OP          reduce using rule 138 (expression -> address_pointer .)
    POINTER         reduce using rule 138 (expression -> address_pointer .)
    RPAREN          reduce using rule 138 (expression -> address_pointer .)
    LBRACE          reduce using rule 138 (expression -> address_pointer .)
    BREAK           reduce using rule 138 (expression -> address_pointer .)
    ID              reduce using rule 138 (expression -> address_pointer .)
    VAR             reduce using rule 138 (expression -> address_pointer .)
    LBRACKET        reduce using rule 138 (expression -> address_pointer .)
    IF              reduce using rule 138 (expression -> address_pointer .)
    FOR             reduce using rule 138 (expression -> address_pointer .)
    GO              reduce using rule 138 (expression -> address_pointer .)
    SWITCH          reduce using rule 138 (expression -> address_pointer .)
    RETURN          reduce using rule 138 (expression -> address_pointer .)
    DEFER           reduce using rule 138 (expression -> address_pointer .)
    CONTINUE        reduce using rule 138 (expression -> address_pointer .)
    SELECT          reduce using rule 138 (expression -> address_pointer .)
    CHANNEL_OP      reduce using rule 138 (expression -> address_pointer .)
    ASSIGN_OP       reduce using rule 138 (expression -> address_pointer .)
    RBRACE          reduce using rule 138 (expression -> address_pointer .)
    CASE            reduce using rule 138 (expression -> address_pointer .)
    DEFAULT         reduce using rule 138 (expression -> address_pointer .)
    SEMICOLON       reduce using rule 138 (expression -> address_pointer .)
    COLON           reduce using rule 138 (expression -> address_pointer .)


state 207

    (140) expression -> collection .

    COMMA           reduce using rule 140 (expression -> collection .)
    ARITH_OP        reduce using rule 140 (expression -> collection .)
    REL_OP          reduce using rule 140 (expression -> collection .)
    LOG_OP          reduce using rule 140 (expression -> collection .)
    POINTER         reduce using rule 140 (expression -> collection .)
    RPAREN          reduce using rule 140 (expression -> collection .)
    LBRACE          reduce using rule 140 (expression -> collection .)
    BREAK           reduce using rule 140 (expression -> collection .)
    ID              reduce using rule 140 (expression -> collection .)
    VAR             reduce using rule 140 (expression -> collection .)
    LBRACKET        reduce using rule 140 (expression -> collection .)
    IF              reduce using rule 140 (expression -> collection .)
    FOR             reduce using rule 140 (expression -> collection .)
    GO              reduce using rule 140 (expression -> collection .)
    SWITCH          reduce using rule 140 (expression -> collection .)
    RETURN          reduce using rule 140 (expression -> collection .)
    DEFER           reduce using rule 140 (expression -> collection .)
    CONTINUE        reduce using rule 140 (expression -> collection .)
    SELECT          reduce using rule 140 (expression -> collection .)
    CHANNEL_OP      reduce using rule 140 (expression -> collection .)
    ASSIGN_OP       reduce using rule 140 (expression -> collection .)
    RBRACE          reduce using rule 140 (expression -> collection .)
    CASE            reduce using rule 140 (expression -> collection .)
    DEFAULT         reduce using rule 140 (expression -> collection .)
    SEMICOLON       reduce using rule 140 (expression -> collection .)
    COLON           reduce using rule 140 (expression -> collection .)


state 208

    (141) expression -> map_statement .

    COMMA           reduce using rule 141 (expression -> map_statement .)
    ARITH_OP        reduce using rule 141 (expression -> map_statement .)
    REL_OP          reduce using rule 141 (expression -> map_statement .)
    LOG_OP          reduce using rule 141 (expression -> map_statement .)
    POINTER         reduce using rule 141 (expression -> map_statement .)
    RPAREN          reduce using rule 141 (expression -> map_statement .)
    LBRACE          reduce using rule 141 (expression -> map_statement .)
    BREAK           reduce using rule 141 (expression -> map_statement .)
    ID              reduce using rule 141 (expression -> map_statement .)
    VAR             reduce using rule 141 (expression -> map_statement .)
    LBRACKET        reduce using rule 141 (expression -> map_statement .)
    IF              reduce using rule 141 (expression -> map_statement .)
    FOR             reduce using rule 141 (expression -> map_statement .)
    GO              reduce using rule 141 (expression -> map_statement .)
    SWITCH          reduce using rule 141 (expression -> map_statement .)
    RETURN          reduce using rule 141 (expression -> map_statement .)
    DEFER           reduce using rule 141 (expression -> map_statement .)
    CONTINUE        reduce using rule 141 (expression -> map_statement .)
    SELECT          reduce using rule 141 (expression -> map_statement .)
    CHANNEL_OP      reduce using rule 141 (expression -> map_statement .)
    ASSIGN_OP       reduce using rule 141 (expression -> map_statement .)
    RBRACE          reduce using rule 141 (expression -> map_statement .)
    CASE            reduce using rule 141 (expression -> map_statement .)
    DEFAULT         reduce using rule 141 (expression -> map_statement .)
    SEMICOLON       reduce using rule 141 (expression -> map_statement .)
    COLON           reduce using rule 141 (expression -> map_statement .)


state 209

    (142) expression -> map .

    COMMA           reduce using rule 142 (expression -> map .)
    ARITH_OP        reduce using rule 142 (expression -> map .)
    REL_OP          reduce using rule 142 (expression -> map .)
    LOG_OP          reduce using rule 142 (expression -> map .)
    POINTER         reduce using rule 142 (expression -> map .)
    RPAREN          reduce using rule 142 (expression -> map .)
    LBRACE          reduce using rule 142 (expression -> map .)
    BREAK           reduce using rule 142 (expression -> map .)
    ID              reduce using rule 142 (expression -> map .)
    VAR             reduce using rule 142 (expression -> map .)
    LBRACKET        reduce using rule 142 (expression -> map .)
    IF              reduce using rule 142 (expression -> map .)
    FOR             reduce using rule 142 (expression -> map .)
    GO              reduce using rule 142 (expression -> map .)
    SWITCH          reduce using rule 142 (expression -> map .)
    RETURN          reduce using rule 142 (expression -> map .)
    DEFER           reduce using rule 142 (expression -> map .)
    CONTINUE        reduce using rule 142 (expression -> map .)
    SELECT          reduce using rule 142 (expression -> map .)
    CHANNEL_OP      reduce using rule 142 (expression -> map .)
    ASSIGN_OP       reduce using rule 142 (expression -> map .)
    RBRACE          reduce using rule 142 (expression -> map .)
    CASE            reduce using rule 142 (expression -> map .)
    DEFAULT         reduce using rule 142 (expression -> map .)
    SEMICOLON       reduce using rule 142 (expression -> map .)
    COLON           reduce using rule 142 (expression -> map .)


state 210

    (214) value -> LBRACE . values RBRACE
    (157) map -> LBRACE . map RBRACE
    (158) map -> LBRACE . map RBRACE COMMA map
    (72) values -> . value COMMA values
    (73) values -> . value
    (74) values -> . empty
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (219) empty -> .
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    LBRACE          shift and go to state 296
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    RBRACE          reduce using rule 219 (empty -> .)
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    values                         shift and go to state 128
    map                            shift and go to state 297
    value                          shift and go to state 298
    empty                          shift and go to state 299
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 211

    (98) lambda -> FUNC . LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> FUNC . LPAREN args RPAREN LBRACE content RBRACE

    LPAREN          shift and go to state 300


state 212

    (169) collection_statement -> LBRACKET . RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> LBRACKET . RBRACKET ID LBRACE collection_types RBRACE

    RBRACKET        shift and go to state 301


state 213

    (171) collection_statement -> ADDRESS . ID LBRACE collection_types RBRACE
    (203) address_pointer -> ADDRESS . ID

    ID              shift and go to state 302


state 214

    (153) map_statement -> MAP . LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> MAP . LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> MAP . LBRACKET TYPES RBRACKET TYPES

    LBRACKET        shift and go to state 303


state 215

    (209) callback -> function DOT callback .

    RPAREN          reduce using rule 209 (callback -> function DOT callback .)
    ASSIGN_OP       reduce using rule 209 (callback -> function DOT callback .)
    BREAK           reduce using rule 209 (callback -> function DOT callback .)
    ID              reduce using rule 209 (callback -> function DOT callback .)
    VAR             reduce using rule 209 (callback -> function DOT callback .)
    LBRACKET        reduce using rule 209 (callback -> function DOT callback .)
    IF              reduce using rule 209 (callback -> function DOT callback .)
    FOR             reduce using rule 209 (callback -> function DOT callback .)
    GO              reduce using rule 209 (callback -> function DOT callback .)
    SWITCH          reduce using rule 209 (callback -> function DOT callback .)
    RETURN          reduce using rule 209 (callback -> function DOT callback .)
    DEFER           reduce using rule 209 (callback -> function DOT callback .)
    CONTINUE        reduce using rule 209 (callback -> function DOT callback .)
    SELECT          reduce using rule 209 (callback -> function DOT callback .)
    CHANNEL_OP      reduce using rule 209 (callback -> function DOT callback .)
    RBRACE          reduce using rule 209 (callback -> function DOT callback .)
    COMMA           reduce using rule 209 (callback -> function DOT callback .)
    ARITH_OP        reduce using rule 209 (callback -> function DOT callback .)
    REL_OP          reduce using rule 209 (callback -> function DOT callback .)
    LOG_OP          reduce using rule 209 (callback -> function DOT callback .)
    POINTER         reduce using rule 209 (callback -> function DOT callback .)
    CASE            reduce using rule 209 (callback -> function DOT callback .)
    DEFAULT         reduce using rule 209 (callback -> function DOT callback .)
    LBRACE          reduce using rule 209 (callback -> function DOT callback .)
    SEMICOLON       reduce using rule 209 (callback -> function DOT callback .)
    COLON           reduce using rule 209 (callback -> function DOT callback .)


state 216

    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (31) function -> ID . LPAREN parameters RPAREN

    DOT             shift and go to state 135
    RPAREN          reduce using rule 208 (callback -> ID .)
    ASSIGN_OP       reduce using rule 208 (callback -> ID .)
    BREAK           reduce using rule 208 (callback -> ID .)
    ID              reduce using rule 208 (callback -> ID .)
    VAR             reduce using rule 208 (callback -> ID .)
    LBRACKET        reduce using rule 208 (callback -> ID .)
    IF              reduce using rule 208 (callback -> ID .)
    FOR             reduce using rule 208 (callback -> ID .)
    GO              reduce using rule 208 (callback -> ID .)
    SWITCH          reduce using rule 208 (callback -> ID .)
    RETURN          reduce using rule 208 (callback -> ID .)
    DEFER           reduce using rule 208 (callback -> ID .)
    CONTINUE        reduce using rule 208 (callback -> ID .)
    SELECT          reduce using rule 208 (callback -> ID .)
    CHANNEL_OP      reduce using rule 208 (callback -> ID .)
    RBRACE          reduce using rule 208 (callback -> ID .)
    COMMA           reduce using rule 208 (callback -> ID .)
    ARITH_OP        reduce using rule 208 (callback -> ID .)
    REL_OP          reduce using rule 208 (callback -> ID .)
    LOG_OP          reduce using rule 208 (callback -> ID .)
    POINTER         reduce using rule 208 (callback -> ID .)
    CASE            reduce using rule 208 (callback -> ID .)
    DEFAULT         reduce using rule 208 (callback -> ID .)
    LBRACE          reduce using rule 208 (callback -> ID .)
    SEMICOLON       reduce using rule 208 (callback -> ID .)
    COLON           reduce using rule 208 (callback -> ID .)
    LPAREN          shift and go to state 136


state 217

    (52) brackets -> LBRACKET NUMBER RBRACKET . brackets
    (53) brackets -> LBRACKET NUMBER RBRACKET .
    (65) array_statement -> LBRACKET NUMBER RBRACKET . TYPES
    (66) array_statement -> LBRACKET NUMBER RBRACKET . TYPES LBRACE values RBRACE
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for TYPES resolved as shift
    TYPES           shift and go to state 117
    LBRACKET        shift and go to state 304

  ! TYPES           [ reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .) ]

    brackets                       shift and go to state 305

state 218

    (54) brackets -> LBRACKET STRING RBRACKET . brackets
    (55) brackets -> LBRACKET STRING RBRACKET .
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACKET resolved as shift
    TYPES           reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    ID              reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    RPAREN          reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    COMMA           reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    RBRACE          reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    COLON           reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    ARITH_OP        reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    REL_OP          reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    LOG_OP          reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    POINTER         reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    LBRACE          reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    BREAK           reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    VAR             reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    IF              reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    FOR             reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    GO              reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    SWITCH          reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    RETURN          reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    DEFER           reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    CONTINUE        reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    SELECT          reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    CHANNEL_OP      reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    ASSIGN_OP       reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    CASE            reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    DEFAULT         reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    SEMICOLON       reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    LBRACKET        shift and go to state 304

  ! LBRACKET        [ reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .) ]

    brackets                       shift and go to state 306

state 219

    (56) brackets -> LBRACKET ID RBRACKET .
    (57) brackets -> LBRACKET ID RBRACKET . brackets
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACKET resolved as shift
    TYPES           reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    ID              reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    RPAREN          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    COMMA           reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    RBRACE          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    COLON           reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    ARITH_OP        reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    REL_OP          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    LOG_OP          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    POINTER         reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    LBRACE          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    BREAK           reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    VAR             reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    IF              reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    FOR             reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    GO              reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    SWITCH          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    RETURN          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    DEFER           reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    CONTINUE        reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    SELECT          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    CHANNEL_OP      reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    ASSIGN_OP       reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    CASE            reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    DEFAULT         reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    SEMICOLON       reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    LBRACKET        shift and go to state 304

  ! LBRACKET        [ reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .) ]

    brackets                       shift and go to state 307

state 220

    (49) collection_args -> LBRACKET RBRACKET POINTER ID .

    COMMA           reduce using rule 49 (collection_args -> LBRACKET RBRACKET POINTER ID .)
    RPAREN          reduce using rule 49 (collection_args -> LBRACKET RBRACKET POINTER ID .)


state 221

    (29) function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content . RBRACE

    RBRACE          shift and go to state 308


state 222

    (87) content -> ID channel . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    channel                        shift and go to state 159
    content                        shift and go to state 309
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 223

    (183) variable_statement -> ID map_position . EQUAL expression

    EQUAL           shift and go to state 310


state 224

    (193) variable_redeclaration -> ID EQUAL . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 311
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 225

    (184) variable_statement -> ID COLON_EQUAL . expression
    (186) variable_statement -> ID COLON_EQUAL . slice_statement
    (187) variable_statement -> ID COLON_EQUAL . array_statement
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    LBRACKET        shift and go to state 315
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 312
    slice_statement                shift and go to state 313
    array_statement                shift and go to state 314
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 226

    (207) callback -> ID DOT . ID LPAREN ID LPAREN ID RPAREN RPAREN
    (210) callback -> ID DOT . callback
    (196) variable_redeclaration -> ID DOT . ID EQUAL expression
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 316
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    LBRACKET        reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]

    callback                       shift and go to state 189
    function                       shift and go to state 108
    empty                          shift and go to state 109

state 227

    (194) variable_redeclaration -> ID ASSIGN_OP . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 317
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 228

    (201) increment -> ID INCREMENT .

    BREAK           reduce using rule 201 (increment -> ID INCREMENT .)
    ID              reduce using rule 201 (increment -> ID INCREMENT .)
    VAR             reduce using rule 201 (increment -> ID INCREMENT .)
    LBRACKET        reduce using rule 201 (increment -> ID INCREMENT .)
    IF              reduce using rule 201 (increment -> ID INCREMENT .)
    FOR             reduce using rule 201 (increment -> ID INCREMENT .)
    GO              reduce using rule 201 (increment -> ID INCREMENT .)
    SWITCH          reduce using rule 201 (increment -> ID INCREMENT .)
    RETURN          reduce using rule 201 (increment -> ID INCREMENT .)
    DEFER           reduce using rule 201 (increment -> ID INCREMENT .)
    CONTINUE        reduce using rule 201 (increment -> ID INCREMENT .)
    SELECT          reduce using rule 201 (increment -> ID INCREMENT .)
    CHANNEL_OP      reduce using rule 201 (increment -> ID INCREMENT .)
    ASSIGN_OP       reduce using rule 201 (increment -> ID INCREMENT .)
    RBRACE          reduce using rule 201 (increment -> ID INCREMENT .)
    COMMA           reduce using rule 201 (increment -> ID INCREMENT .)
    ARITH_OP        reduce using rule 201 (increment -> ID INCREMENT .)
    REL_OP          reduce using rule 201 (increment -> ID INCREMENT .)
    LOG_OP          reduce using rule 201 (increment -> ID INCREMENT .)
    POINTER         reduce using rule 201 (increment -> ID INCREMENT .)
    RPAREN          reduce using rule 201 (increment -> ID INCREMENT .)
    CASE            reduce using rule 201 (increment -> ID INCREMENT .)
    DEFAULT         reduce using rule 201 (increment -> ID INCREMENT .)
    LBRACE          reduce using rule 201 (increment -> ID INCREMENT .)
    SEMICOLON       reduce using rule 201 (increment -> ID INCREMENT .)
    COLON           reduce using rule 201 (increment -> ID INCREMENT .)


state 229

    (202) decrement -> ID DECREMENT .

    BREAK           reduce using rule 202 (decrement -> ID DECREMENT .)
    ID              reduce using rule 202 (decrement -> ID DECREMENT .)
    VAR             reduce using rule 202 (decrement -> ID DECREMENT .)
    LBRACKET        reduce using rule 202 (decrement -> ID DECREMENT .)
    IF              reduce using rule 202 (decrement -> ID DECREMENT .)
    FOR             reduce using rule 202 (decrement -> ID DECREMENT .)
    GO              reduce using rule 202 (decrement -> ID DECREMENT .)
    SWITCH          reduce using rule 202 (decrement -> ID DECREMENT .)
    RETURN          reduce using rule 202 (decrement -> ID DECREMENT .)
    DEFER           reduce using rule 202 (decrement -> ID DECREMENT .)
    CONTINUE        reduce using rule 202 (decrement -> ID DECREMENT .)
    SELECT          reduce using rule 202 (decrement -> ID DECREMENT .)
    CHANNEL_OP      reduce using rule 202 (decrement -> ID DECREMENT .)
    ASSIGN_OP       reduce using rule 202 (decrement -> ID DECREMENT .)
    RBRACE          reduce using rule 202 (decrement -> ID DECREMENT .)
    COMMA           reduce using rule 202 (decrement -> ID DECREMENT .)
    ARITH_OP        reduce using rule 202 (decrement -> ID DECREMENT .)
    REL_OP          reduce using rule 202 (decrement -> ID DECREMENT .)
    LOG_OP          reduce using rule 202 (decrement -> ID DECREMENT .)
    POINTER         reduce using rule 202 (decrement -> ID DECREMENT .)
    RPAREN          reduce using rule 202 (decrement -> ID DECREMENT .)
    CASE            reduce using rule 202 (decrement -> ID DECREMENT .)
    DEFAULT         reduce using rule 202 (decrement -> ID DECREMENT .)
    LBRACE          reduce using rule 202 (decrement -> ID DECREMENT .)
    SEMICOLON       reduce using rule 202 (decrement -> ID DECREMENT .)
    COLON           reduce using rule 202 (decrement -> ID DECREMENT .)


state 230

    (189) map_position -> LBRACKET . STRING RBRACKET map_position
    (190) map_position -> LBRACKET . NUMBER RBRACKET map_position
    (191) map_position -> LBRACKET . STRING RBRACKET
    (192) map_position -> LBRACKET . NUMBER RBRACKET

    STRING          shift and go to state 252
    NUMBER          shift and go to state 318


state 231

    (30) function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE .

    FUNC            reduce using rule 30 (function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE .)
    VAR             reduce using rule 30 (function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE .)
    TYPE            reduce using rule 30 (function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE .)
    CONST           reduce using rule 30 (function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE .)
    $end            reduce using rule 30 (function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE .)


state 232

    (76) content -> variable_statement content .

    RBRACE          reduce using rule 76 (content -> variable_statement content .)
    CASE            reduce using rule 76 (content -> variable_statement content .)
    DEFAULT         reduce using rule 76 (content -> variable_statement content .)


state 233

    (77) content -> array_statement content .

    RBRACE          reduce using rule 77 (content -> array_statement content .)
    CASE            reduce using rule 77 (content -> array_statement content .)
    DEFAULT         reduce using rule 77 (content -> array_statement content .)


state 234

    (78) content -> callback content .

    RBRACE          reduce using rule 78 (content -> callback content .)
    CASE            reduce using rule 78 (content -> callback content .)
    DEFAULT         reduce using rule 78 (content -> callback content .)


state 235

    (195) variable_redeclaration -> callback ASSIGN_OP . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    callback                       shift and go to state 204
    expression                     shift and go to state 319
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 236

    (79) content -> variable_redeclaration content .

    RBRACE          reduce using rule 79 (content -> variable_redeclaration content .)
    CASE            reduce using rule 79 (content -> variable_redeclaration content .)
    DEFAULT         reduce using rule 79 (content -> variable_redeclaration content .)


state 237

    (80) content -> if content .

    RBRACE          reduce using rule 80 (content -> if content .)
    CASE            reduce using rule 80 (content -> if content .)
    DEFAULT         reduce using rule 80 (content -> if content .)


state 238

    (81) content -> for content .

    RBRACE          reduce using rule 81 (content -> for content .)
    CASE            reduce using rule 81 (content -> for content .)
    DEFAULT         reduce using rule 81 (content -> for content .)


state 239

    (82) content -> BREAK content .

    RBRACE          reduce using rule 82 (content -> BREAK content .)
    CASE            reduce using rule 82 (content -> BREAK content .)
    DEFAULT         reduce using rule 82 (content -> BREAK content .)


state 240

    (83) content -> goroutine content .

    RBRACE          reduce using rule 83 (content -> goroutine content .)
    CASE            reduce using rule 83 (content -> goroutine content .)
    DEFAULT         reduce using rule 83 (content -> goroutine content .)


state 241

    (84) content -> increment content .

    RBRACE          reduce using rule 84 (content -> increment content .)
    CASE            reduce using rule 84 (content -> increment content .)
    DEFAULT         reduce using rule 84 (content -> increment content .)


state 242

    (85) content -> decrement content .

    RBRACE          reduce using rule 85 (content -> decrement content .)
    CASE            reduce using rule 85 (content -> decrement content .)
    DEFAULT         reduce using rule 85 (content -> decrement content .)


state 243

    (86) content -> switch content .

    RBRACE          reduce using rule 86 (content -> switch content .)
    CASE            reduce using rule 86 (content -> switch content .)
    DEFAULT         reduce using rule 86 (content -> switch content .)


state 244

    (92) content -> channel content .

    RBRACE          reduce using rule 92 (content -> channel content .)
    CASE            reduce using rule 92 (content -> channel content .)
    DEFAULT         reduce using rule 92 (content -> channel content .)


state 245

    (88) content -> return content .

    RBRACE          reduce using rule 88 (content -> return content .)
    CASE            reduce using rule 88 (content -> return content .)
    DEFAULT         reduce using rule 88 (content -> return content .)


state 246

    (89) content -> defer content .

    RBRACE          reduce using rule 89 (content -> defer content .)
    CASE            reduce using rule 89 (content -> defer content .)
    DEFAULT         reduce using rule 89 (content -> defer content .)


state 247

    (90) content -> continue content .

    RBRACE          reduce using rule 90 (content -> continue content .)
    CASE            reduce using rule 90 (content -> continue content .)
    DEFAULT         reduce using rule 90 (content -> continue content .)


state 248

    (91) content -> select content .

    RBRACE          reduce using rule 91 (content -> select content .)
    CASE            reduce using rule 91 (content -> select content .)
    DEFAULT         reduce using rule 91 (content -> select content .)


state 249

    (177) variable_statement -> VAR ID . EQUAL slice_statement
    (178) variable_statement -> VAR ID . EQUAL array_statement
    (179) variable_statement -> VAR ID . types EQUAL expression
    (180) variable_statement -> VAR ID . EQUAL expression
    (181) variable_statement -> VAR ID . ID EQUAL expression
    (182) variable_statement -> VAR ID . callback
    (188) variable_statement -> VAR ID . TYPES
    (58) types -> . TYPES
    (59) types -> . array_statement
    (60) types -> . pointer_statement
    (61) types -> . slice_statement
    (62) types -> . MAP LBRACKET TYPES RBRACKET
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) pointer_statement -> . POINTER types
    (64) pointer_statement -> . POINTER ID
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    EQUAL           shift and go to state 321
    ID              shift and go to state 320
    TYPES           shift and go to state 324
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]

    slice_statement                shift and go to state 44
    array_statement                shift and go to state 42
    types                          shift and go to state 322
    callback                       shift and go to state 323
    pointer_statement              shift and go to state 43
    function                       shift and go to state 108
    empty                          shift and go to state 109

state 250

    (185) variable_statement -> map_position COLON_EQUAL . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 325
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 251

    (65) array_statement -> LBRACKET NUMBER . RBRACKET TYPES
    (66) array_statement -> LBRACKET NUMBER . RBRACKET TYPES LBRACE values RBRACE
    (190) map_position -> LBRACKET NUMBER . RBRACKET map_position
    (192) map_position -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 326


state 252

    (189) map_position -> LBRACKET STRING . RBRACKET map_position
    (191) map_position -> LBRACKET STRING . RBRACKET

    RBRACKET        shift and go to state 327


state 253

    (118) if -> IF expression . LBRACE content RBRACE else
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    LBRACE          shift and go to state 328
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 254

    (211) callback -> empty .
    (156) map -> empty .

  ! reduce/reduce conflict for LBRACE resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for ARITH_OP resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for REL_OP resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for POINTER resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for GO resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for SWITCH resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for DEFER resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for SELECT resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for ASSIGN_OP resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for COMMA resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 156 (map -> empty .)
  ! reduce/reduce conflict for COLON resolved using rule 156 (map -> empty .)
    LBRACE          reduce using rule 156 (map -> empty .)
    ARITH_OP        reduce using rule 156 (map -> empty .)
    REL_OP          reduce using rule 156 (map -> empty .)
    LOG_OP          reduce using rule 156 (map -> empty .)
    POINTER         reduce using rule 156 (map -> empty .)
    BREAK           reduce using rule 156 (map -> empty .)
    ID              reduce using rule 156 (map -> empty .)
    VAR             reduce using rule 156 (map -> empty .)
    LBRACKET        reduce using rule 156 (map -> empty .)
    IF              reduce using rule 156 (map -> empty .)
    FOR             reduce using rule 156 (map -> empty .)
    GO              reduce using rule 156 (map -> empty .)
    SWITCH          reduce using rule 156 (map -> empty .)
    RETURN          reduce using rule 156 (map -> empty .)
    DEFER           reduce using rule 156 (map -> empty .)
    CONTINUE        reduce using rule 156 (map -> empty .)
    SELECT          reduce using rule 156 (map -> empty .)
    CHANNEL_OP      reduce using rule 156 (map -> empty .)
    ASSIGN_OP       reduce using rule 156 (map -> empty .)
    RBRACE          reduce using rule 156 (map -> empty .)
    CASE            reduce using rule 156 (map -> empty .)
    DEFAULT         reduce using rule 156 (map -> empty .)
    RPAREN          reduce using rule 156 (map -> empty .)
    COMMA           reduce using rule 156 (map -> empty .)
    SEMICOLON       reduce using rule 156 (map -> empty .)
    COLON           reduce using rule 156 (map -> empty .)

  ! LBRACE          [ reduce using rule 211 (callback -> empty .) ]
  ! ARITH_OP        [ reduce using rule 211 (callback -> empty .) ]
  ! REL_OP          [ reduce using rule 211 (callback -> empty .) ]
  ! LOG_OP          [ reduce using rule 211 (callback -> empty .) ]
  ! POINTER         [ reduce using rule 211 (callback -> empty .) ]
  ! BREAK           [ reduce using rule 211 (callback -> empty .) ]
  ! ID              [ reduce using rule 211 (callback -> empty .) ]
  ! VAR             [ reduce using rule 211 (callback -> empty .) ]
  ! LBRACKET        [ reduce using rule 211 (callback -> empty .) ]
  ! IF              [ reduce using rule 211 (callback -> empty .) ]
  ! FOR             [ reduce using rule 211 (callback -> empty .) ]
  ! GO              [ reduce using rule 211 (callback -> empty .) ]
  ! SWITCH          [ reduce using rule 211 (callback -> empty .) ]
  ! RETURN          [ reduce using rule 211 (callback -> empty .) ]
  ! DEFER           [ reduce using rule 211 (callback -> empty .) ]
  ! CONTINUE        [ reduce using rule 211 (callback -> empty .) ]
  ! SELECT          [ reduce using rule 211 (callback -> empty .) ]
  ! CHANNEL_OP      [ reduce using rule 211 (callback -> empty .) ]
  ! ASSIGN_OP       [ reduce using rule 211 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 211 (callback -> empty .) ]
  ! CASE            [ reduce using rule 211 (callback -> empty .) ]
  ! DEFAULT         [ reduce using rule 211 (callback -> empty .) ]
  ! RPAREN          [ reduce using rule 211 (callback -> empty .) ]
  ! COMMA           [ reduce using rule 211 (callback -> empty .) ]
  ! SEMICOLON       [ reduce using rule 211 (callback -> empty .) ]
  ! COLON           [ reduce using rule 211 (callback -> empty .) ]


state 255

    (145) for -> FOR LBRACE . content RBRACE
    (214) value -> LBRACE . values RBRACE
    (157) map -> LBRACE . map RBRACE
    (158) map -> LBRACE . map RBRACE COMMA map
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (72) values -> . value COMMA values
    (73) values -> . value
    (74) values -> . empty
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 331
    LBRACE          shift and go to state 296
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 329
    values                         shift and go to state 128
    map                            shift and go to state 297
    empty                          shift and go to state 330
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    value                          shift and go to state 298
    map_position                   shift and go to state 165
    function                       shift and go to state 108
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 256

    (146) for -> FOR NOT . ID LBRACE content RBRACE
    (128) expression -> NOT . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    ID              shift and go to state 332
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 295
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 257

    (149) for -> FOR ID . COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> FOR ID . COLON_EQUAL RANGE ID LBRACE content RBRACE
    (129) expression -> ID . COLON_EQUAL channel
    (139) expression -> ID .
    (152) for_declaration -> ID . COLON_EQUAL NUMBER
    (201) increment -> ID . INCREMENT
    (202) decrement -> ID . DECREMENT
    (204) struct -> ID . DOT ID
    (205) struct -> ID . DOT struct
    (172) collection_statement -> ID . LBRACE collection_types RBRACE
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (166) struct_declaretion -> ID . LBRACE struct_declaretion_values RBRACE
    (143) collection -> ID . LBRACKET ID RBRACKET DOT ID
    (144) collection -> ID . LBRACKET ID RBRACKET
    (218) map_varible -> ID . brackets
    (199) pointer -> ID . LBRACKET NUMBER RBRACKET
    (200) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> ID . LPAREN parameters RPAREN
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! reduce/reduce conflict for ARITH_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for REL_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for POINTER resolved using rule 139 (expression -> ID .)
    COMMA           shift and go to state 333
    COLON_EQUAL     shift and go to state 334
    ARITH_OP        reduce using rule 139 (expression -> ID .)
    REL_OP          reduce using rule 139 (expression -> ID .)
    LOG_OP          reduce using rule 139 (expression -> ID .)
    POINTER         reduce using rule 139 (expression -> ID .)
    INCREMENT       shift and go to state 228
    DECREMENT       shift and go to state 229
    DOT             shift and go to state 283
    LBRACE          shift and go to state 284
    LBRACKET        shift and go to state 285
    LPAREN          shift and go to state 136

  ! LBRACE          [ reduce using rule 139 (expression -> ID .) ]
  ! LBRACE          [ reduce using rule 208 (callback -> ID .) ]
  ! ARITH_OP        [ reduce using rule 208 (callback -> ID .) ]
  ! REL_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! LOG_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! POINTER         [ reduce using rule 208 (callback -> ID .) ]

    brackets                       shift and go to state 125

state 258

    (147) for -> FOR expression . LBRACE content RBRACE
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    LBRACE          shift and go to state 335
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 259

    (148) for -> FOR for_declaration . SEMICOLON expression SEMICOLON expression LBRACE content RBRACE

    SEMICOLON       shift and go to state 336


state 260

    (150) for -> FOR UNDERSCORE . COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE

    COMMA           shift and go to state 337


state 261

    (116) goroutine -> GO callback .

    BREAK           reduce using rule 116 (goroutine -> GO callback .)
    ID              reduce using rule 116 (goroutine -> GO callback .)
    VAR             reduce using rule 116 (goroutine -> GO callback .)
    LBRACKET        reduce using rule 116 (goroutine -> GO callback .)
    IF              reduce using rule 116 (goroutine -> GO callback .)
    FOR             reduce using rule 116 (goroutine -> GO callback .)
    GO              reduce using rule 116 (goroutine -> GO callback .)
    SWITCH          reduce using rule 116 (goroutine -> GO callback .)
    RETURN          reduce using rule 116 (goroutine -> GO callback .)
    DEFER           reduce using rule 116 (goroutine -> GO callback .)
    CONTINUE        reduce using rule 116 (goroutine -> GO callback .)
    SELECT          reduce using rule 116 (goroutine -> GO callback .)
    CHANNEL_OP      reduce using rule 116 (goroutine -> GO callback .)
    ASSIGN_OP       reduce using rule 116 (goroutine -> GO callback .)
    RBRACE          reduce using rule 116 (goroutine -> GO callback .)
    CASE            reduce using rule 116 (goroutine -> GO callback .)
    DEFAULT         reduce using rule 116 (goroutine -> GO callback .)


state 262

    (117) goroutine -> GO lambda . LPAREN parameters RPAREN

    LPAREN          shift and go to state 338


state 263

    (105) switch -> SWITCH ID . LBRACE cases_value default RBRACE

    LBRACE          shift and go to state 339


state 264

    (106) switch -> SWITCH LBRACE . cases_rel default RBRACE
    (107) cases_rel -> . CASE case_condition COLON content cases_rel
    (108) cases_rel -> . empty
    (219) empty -> .

    CASE            shift and go to state 341
    DEFAULT         reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)

    cases_rel                      shift and go to state 340
    empty                          shift and go to state 342

state 265

    (164) return -> RETURN expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    BREAK           reduce using rule 164 (return -> RETURN expression .)
    ID              reduce using rule 164 (return -> RETURN expression .)
    VAR             reduce using rule 164 (return -> RETURN expression .)
    LBRACKET        reduce using rule 164 (return -> RETURN expression .)
    IF              reduce using rule 164 (return -> RETURN expression .)
    FOR             reduce using rule 164 (return -> RETURN expression .)
    GO              reduce using rule 164 (return -> RETURN expression .)
    SWITCH          reduce using rule 164 (return -> RETURN expression .)
    RETURN          reduce using rule 164 (return -> RETURN expression .)
    DEFER           reduce using rule 164 (return -> RETURN expression .)
    CONTINUE        reduce using rule 164 (return -> RETURN expression .)
    SELECT          reduce using rule 164 (return -> RETURN expression .)
    CHANNEL_OP      reduce using rule 164 (return -> RETURN expression .)
    ASSIGN_OP       reduce using rule 164 (return -> RETURN expression .)
    RBRACE          reduce using rule 164 (return -> RETURN expression .)
    CASE            reduce using rule 164 (return -> RETURN expression .)
    DEFAULT         reduce using rule 164 (return -> RETURN expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 266

    (104) defer -> DEFER callback .

    BREAK           reduce using rule 104 (defer -> DEFER callback .)
    ID              reduce using rule 104 (defer -> DEFER callback .)
    VAR             reduce using rule 104 (defer -> DEFER callback .)
    LBRACKET        reduce using rule 104 (defer -> DEFER callback .)
    IF              reduce using rule 104 (defer -> DEFER callback .)
    FOR             reduce using rule 104 (defer -> DEFER callback .)
    GO              reduce using rule 104 (defer -> DEFER callback .)
    SWITCH          reduce using rule 104 (defer -> DEFER callback .)
    RETURN          reduce using rule 104 (defer -> DEFER callback .)
    DEFER           reduce using rule 104 (defer -> DEFER callback .)
    CONTINUE        reduce using rule 104 (defer -> DEFER callback .)
    SELECT          reduce using rule 104 (defer -> DEFER callback .)
    CHANNEL_OP      reduce using rule 104 (defer -> DEFER callback .)
    ASSIGN_OP       reduce using rule 104 (defer -> DEFER callback .)
    RBRACE          reduce using rule 104 (defer -> DEFER callback .)
    CASE            reduce using rule 104 (defer -> DEFER callback .)
    DEFAULT         reduce using rule 104 (defer -> DEFER callback .)


state 267

    (100) select -> SELECT LBRACE . select_cases RBRACE
    (101) select_cases -> . CASE expression COLON content select_cases
    (102) select_cases -> . DEFAULT COLON content
    (103) select_cases -> . empty
    (219) empty -> .

    CASE            shift and go to state 344
    DEFAULT         shift and go to state 345
    RBRACE          reduce using rule 219 (empty -> .)

    select_cases                   shift and go to state 343
    empty                          shift and go to state 346

state 268

    (94) channel -> CHANNEL_OP value .

    BREAK           reduce using rule 94 (channel -> CHANNEL_OP value .)
    ID              reduce using rule 94 (channel -> CHANNEL_OP value .)
    VAR             reduce using rule 94 (channel -> CHANNEL_OP value .)
    LBRACKET        reduce using rule 94 (channel -> CHANNEL_OP value .)
    IF              reduce using rule 94 (channel -> CHANNEL_OP value .)
    FOR             reduce using rule 94 (channel -> CHANNEL_OP value .)
    GO              reduce using rule 94 (channel -> CHANNEL_OP value .)
    SWITCH          reduce using rule 94 (channel -> CHANNEL_OP value .)
    RETURN          reduce using rule 94 (channel -> CHANNEL_OP value .)
    DEFER           reduce using rule 94 (channel -> CHANNEL_OP value .)
    CONTINUE        reduce using rule 94 (channel -> CHANNEL_OP value .)
    SELECT          reduce using rule 94 (channel -> CHANNEL_OP value .)
    CHANNEL_OP      reduce using rule 94 (channel -> CHANNEL_OP value .)
    ASSIGN_OP       reduce using rule 94 (channel -> CHANNEL_OP value .)
    RBRACE          reduce using rule 94 (channel -> CHANNEL_OP value .)
    COMMA           reduce using rule 94 (channel -> CHANNEL_OP value .)
    ARITH_OP        reduce using rule 94 (channel -> CHANNEL_OP value .)
    REL_OP          reduce using rule 94 (channel -> CHANNEL_OP value .)
    LOG_OP          reduce using rule 94 (channel -> CHANNEL_OP value .)
    POINTER         reduce using rule 94 (channel -> CHANNEL_OP value .)
    RPAREN          reduce using rule 94 (channel -> CHANNEL_OP value .)
    CASE            reduce using rule 94 (channel -> CHANNEL_OP value .)
    DEFAULT         reduce using rule 94 (channel -> CHANNEL_OP value .)
    LBRACE          reduce using rule 94 (channel -> CHANNEL_OP value .)
    SEMICOLON       reduce using rule 94 (channel -> CHANNEL_OP value .)
    COLON           reduce using rule 94 (channel -> CHANNEL_OP value .)


state 269

    (95) channel -> CHANNEL_OP ID .
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (166) struct_declaretion -> ID . LBRACE struct_declaretion_values RBRACE
    (218) map_varible -> ID . brackets
    (199) pointer -> ID . LBRACKET NUMBER RBRACKET
    (200) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> ID . LPAREN parameters RPAREN
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! reduce/reduce conflict for BREAK resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for ID resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for VAR resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for IF resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for FOR resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for GO resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for DEFER resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for SELECT resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for ASSIGN_OP resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for RBRACE resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for ARITH_OP resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for REL_OP resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for POINTER resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for CASE resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for LBRACE resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! reduce/reduce conflict for COLON resolved using rule 95 (channel -> CHANNEL_OP ID .)
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    BREAK           reduce using rule 95 (channel -> CHANNEL_OP ID .)
    ID              reduce using rule 95 (channel -> CHANNEL_OP ID .)
    VAR             reduce using rule 95 (channel -> CHANNEL_OP ID .)
    IF              reduce using rule 95 (channel -> CHANNEL_OP ID .)
    FOR             reduce using rule 95 (channel -> CHANNEL_OP ID .)
    GO              reduce using rule 95 (channel -> CHANNEL_OP ID .)
    SWITCH          reduce using rule 95 (channel -> CHANNEL_OP ID .)
    RETURN          reduce using rule 95 (channel -> CHANNEL_OP ID .)
    DEFER           reduce using rule 95 (channel -> CHANNEL_OP ID .)
    CONTINUE        reduce using rule 95 (channel -> CHANNEL_OP ID .)
    SELECT          reduce using rule 95 (channel -> CHANNEL_OP ID .)
    CHANNEL_OP      reduce using rule 95 (channel -> CHANNEL_OP ID .)
    ASSIGN_OP       reduce using rule 95 (channel -> CHANNEL_OP ID .)
    RBRACE          reduce using rule 95 (channel -> CHANNEL_OP ID .)
    COMMA           reduce using rule 95 (channel -> CHANNEL_OP ID .)
    ARITH_OP        reduce using rule 95 (channel -> CHANNEL_OP ID .)
    REL_OP          reduce using rule 95 (channel -> CHANNEL_OP ID .)
    LOG_OP          reduce using rule 95 (channel -> CHANNEL_OP ID .)
    POINTER         reduce using rule 95 (channel -> CHANNEL_OP ID .)
    RPAREN          reduce using rule 95 (channel -> CHANNEL_OP ID .)
    CASE            reduce using rule 95 (channel -> CHANNEL_OP ID .)
    DEFAULT         reduce using rule 95 (channel -> CHANNEL_OP ID .)
    SEMICOLON       reduce using rule 95 (channel -> CHANNEL_OP ID .)
    COLON           reduce using rule 95 (channel -> CHANNEL_OP ID .)
    DOT             shift and go to state 135
    LBRACE          shift and go to state 347
    LBRACKET        shift and go to state 126
    LPAREN          shift and go to state 136

  ! LBRACKET        [ reduce using rule 95 (channel -> CHANNEL_OP ID .) ]
  ! LBRACE          [ reduce using rule 95 (channel -> CHANNEL_OP ID .) ]
  ! BREAK           [ reduce using rule 208 (callback -> ID .) ]
  ! ID              [ reduce using rule 208 (callback -> ID .) ]
  ! VAR             [ reduce using rule 208 (callback -> ID .) ]
  ! LBRACKET        [ reduce using rule 208 (callback -> ID .) ]
  ! IF              [ reduce using rule 208 (callback -> ID .) ]
  ! FOR             [ reduce using rule 208 (callback -> ID .) ]
  ! GO              [ reduce using rule 208 (callback -> ID .) ]
  ! SWITCH          [ reduce using rule 208 (callback -> ID .) ]
  ! RETURN          [ reduce using rule 208 (callback -> ID .) ]
  ! DEFER           [ reduce using rule 208 (callback -> ID .) ]
  ! CONTINUE        [ reduce using rule 208 (callback -> ID .) ]
  ! SELECT          [ reduce using rule 208 (callback -> ID .) ]
  ! CHANNEL_OP      [ reduce using rule 208 (callback -> ID .) ]
  ! ASSIGN_OP       [ reduce using rule 208 (callback -> ID .) ]
  ! RBRACE          [ reduce using rule 208 (callback -> ID .) ]
  ! COMMA           [ reduce using rule 208 (callback -> ID .) ]
  ! ARITH_OP        [ reduce using rule 208 (callback -> ID .) ]
  ! REL_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! LOG_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! POINTER         [ reduce using rule 208 (callback -> ID .) ]
  ! RPAREN          [ reduce using rule 208 (callback -> ID .) ]
  ! CASE            [ reduce using rule 208 (callback -> ID .) ]
  ! DEFAULT         [ reduce using rule 208 (callback -> ID .) ]
  ! LBRACE          [ reduce using rule 208 (callback -> ID .) ]
  ! SEMICOLON       [ reduce using rule 208 (callback -> ID .) ]
  ! COLON           [ reduce using rule 208 (callback -> ID .) ]

    brackets                       shift and go to state 125

state 270

    (96) channel -> CHANNEL_OP callback .

    BREAK           reduce using rule 96 (channel -> CHANNEL_OP callback .)
    ID              reduce using rule 96 (channel -> CHANNEL_OP callback .)
    VAR             reduce using rule 96 (channel -> CHANNEL_OP callback .)
    LBRACKET        reduce using rule 96 (channel -> CHANNEL_OP callback .)
    IF              reduce using rule 96 (channel -> CHANNEL_OP callback .)
    FOR             reduce using rule 96 (channel -> CHANNEL_OP callback .)
    GO              reduce using rule 96 (channel -> CHANNEL_OP callback .)
    SWITCH          reduce using rule 96 (channel -> CHANNEL_OP callback .)
    RETURN          reduce using rule 96 (channel -> CHANNEL_OP callback .)
    DEFER           reduce using rule 96 (channel -> CHANNEL_OP callback .)
    CONTINUE        reduce using rule 96 (channel -> CHANNEL_OP callback .)
    SELECT          reduce using rule 96 (channel -> CHANNEL_OP callback .)
    CHANNEL_OP      reduce using rule 96 (channel -> CHANNEL_OP callback .)
    ASSIGN_OP       reduce using rule 96 (channel -> CHANNEL_OP callback .)
    RBRACE          reduce using rule 96 (channel -> CHANNEL_OP callback .)
    COMMA           reduce using rule 96 (channel -> CHANNEL_OP callback .)
    ARITH_OP        reduce using rule 96 (channel -> CHANNEL_OP callback .)
    REL_OP          reduce using rule 96 (channel -> CHANNEL_OP callback .)
    LOG_OP          reduce using rule 96 (channel -> CHANNEL_OP callback .)
    POINTER         reduce using rule 96 (channel -> CHANNEL_OP callback .)
    RPAREN          reduce using rule 96 (channel -> CHANNEL_OP callback .)
    CASE            reduce using rule 96 (channel -> CHANNEL_OP callback .)
    DEFAULT         reduce using rule 96 (channel -> CHANNEL_OP callback .)
    LBRACE          reduce using rule 96 (channel -> CHANNEL_OP callback .)
    SEMICOLON       reduce using rule 96 (channel -> CHANNEL_OP callback .)
    COLON           reduce using rule 96 (channel -> CHANNEL_OP callback .)


state 271

    (97) channel -> CHANNEL_OP struct_declaretion .

    BREAK           reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    ID              reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    VAR             reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    LBRACKET        reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    IF              reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    FOR             reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    GO              reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    SWITCH          reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    RETURN          reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    DEFER           reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    CONTINUE        reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    SELECT          reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    CHANNEL_OP      reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    ASSIGN_OP       reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    RBRACE          reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    COMMA           reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    ARITH_OP        reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    REL_OP          reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    LOG_OP          reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    POINTER         reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    RPAREN          reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    CASE            reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    DEFAULT         reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    LBRACE          reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    SEMICOLON       reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)
    COLON           reduce using rule 97 (channel -> CHANNEL_OP struct_declaretion .)


state 272

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args . RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args . RPAREN TYPES LBRACE content RBRACE

    RPAREN          shift and go to state 348


state 273

    (66) array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values . RBRACE

    RBRACE          shift and go to state 349


state 274

    (70) slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .

    FUNC            reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    VAR             reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    TYPE            reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    CONST           reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    $end            reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    COMMA           reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    RPAREN          reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    LBRACE          reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    ID              reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    RBRACE          reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    EQUAL           reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    BREAK           reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    LBRACKET        reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    IF              reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    FOR             reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    GO              reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    SWITCH          reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    RETURN          reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    DEFER           reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    CONTINUE        reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    SELECT          reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    CHANNEL_OP      reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    ASSIGN_OP       reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    CASE            reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    DEFAULT         reduce using rule 70 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)


state 275

    (67) array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .
    (68) array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES . LBRACE values RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
    FUNC            reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    VAR             reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    TYPE            reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    CONST           reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    $end            reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    COMMA           reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    RPAREN          reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    ID              reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    RBRACE          reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    EQUAL           reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    BREAK           reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    LBRACKET        reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    IF              reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    FOR             reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    GO              reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    SWITCH          reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    RETURN          reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    DEFER           reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    CONTINUE        reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    SELECT          reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    CHANNEL_OP      reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    ASSIGN_OP       reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    CASE            reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    DEFAULT         reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    LBRACE          shift and go to state 350

  ! LBRACE          [ reduce using rule 67 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .) ]


state 276

    (27) field -> ID ID DOT ID .

    RBRACE          reduce using rule 27 (field -> ID ID DOT ID .)


state 277

    (18) method_list -> ID LPAREN args RPAREN . types method_list
    (58) types -> . TYPES
    (59) types -> . array_statement
    (60) types -> . pointer_statement
    (61) types -> . slice_statement
    (62) types -> . MAP LBRACKET TYPES RBRACKET
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) pointer_statement -> . POINTER types
    (64) pointer_statement -> . POINTER ID
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 351
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 278

    (199) pointer -> ID LBRACKET NUMBER RBRACKET .
    (52) brackets -> LBRACKET NUMBER RBRACKET . brackets
    (53) brackets -> LBRACKET NUMBER RBRACKET .
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! reduce/reduce conflict for ID resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for RPAREN resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for COMMA resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for RBRACE resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for COLON resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for ARITH_OP resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for REL_OP resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for POINTER resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for LBRACE resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for BREAK resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for VAR resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for FOR resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for GO resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for SWITCH resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for DEFER resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for SELECT resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for ASSIGN_OP resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! shift/reduce conflict for LBRACKET resolved as shift
    ID              reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    COMMA           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    RBRACE          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    COLON           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    ARITH_OP        reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    REL_OP          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    LOG_OP          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    POINTER         reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    LBRACE          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    BREAK           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    VAR             reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    IF              reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    FOR             reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    GO              reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    SWITCH          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    RETURN          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    DEFER           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    CONTINUE        reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    SELECT          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    CHANNEL_OP      reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    ASSIGN_OP       reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    DEFAULT         reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    LBRACKET        shift and go to state 304

  ! ID              [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! RPAREN          [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! COMMA           [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! RBRACE          [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! COLON           [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! ARITH_OP        [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! REL_OP          [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! LOG_OP          [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! POINTER         [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! LBRACE          [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! BREAK           [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! VAR             [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! LBRACKET        [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! IF              [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! FOR             [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! GO              [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! SWITCH          [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! RETURN          [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! DEFER           [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! CONTINUE        [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! SELECT          [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! CHANNEL_OP      [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! ASSIGN_OP       [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! CASE            [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! DEFAULT         [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! SEMICOLON       [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! LBRACKET        [ reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .) ]

    brackets                       shift and go to state 305

state 279

    (200) pointer -> ID LBRACKET NUMBER COLON . NUMBER RBRACKET

    NUMBER          shift and go to state 352


state 280

    (72) values -> value COMMA values .

    RBRACE          reduce using rule 72 (values -> value COMMA values .)


state 281

    (207) callback -> ID DOT ID LPAREN . ID LPAREN ID RPAREN RPAREN
    (31) function -> ID LPAREN . parameters RPAREN
    (32) parameters -> . expression
    (33) parameters -> . CHAN TYPES
    (34) parameters -> . expression COMMA parameters
    (35) parameters -> . empty
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (219) empty -> .
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

    ID              shift and go to state 353
    CHAN            shift and go to state 194
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    RPAREN          reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    parameters                     shift and go to state 192
    expression                     shift and go to state 193
    empty                          shift and go to state 195
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108

state 282

    (129) expression -> ID COLON_EQUAL . channel
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion

    CHANNEL_OP      shift and go to state 175

    channel                        shift and go to state 354

state 283

    (204) struct -> ID DOT . ID
    (205) struct -> ID DOT . struct
    (207) callback -> ID DOT . ID LPAREN ID LPAREN ID RPAREN RPAREN
    (210) callback -> ID DOT . callback
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 355
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    RPAREN          reduce using rule 219 (empty -> .)
    LBRACE          reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    LBRACKET        reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]

    struct                         shift and go to state 356
    callback                       shift and go to state 189
    function                       shift and go to state 108
    empty                          shift and go to state 109

state 284

    (172) collection_statement -> ID LBRACE . collection_types RBRACE
    (166) struct_declaretion -> ID LBRACE . struct_declaretion_values RBRACE
    (173) collection_types -> . ID
    (174) collection_types -> . ID COMMA collection_types
    (175) collection_types -> . ID COLON value
    (176) collection_types -> . ID COLON value COMMA collection_types
    (167) struct_declaretion_values -> . values
    (168) struct_declaretion_values -> . LBRACE struct_declaretion_values RBRACE
    (72) values -> . value COMMA values
    (73) values -> . value
    (74) values -> . empty
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (219) empty -> .
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    ID              shift and go to state 357
    LBRACE          shift and go to state 358
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    RBRACE          reduce using rule 219 (empty -> .)
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    collection_types               shift and go to state 359
    struct_declaretion_values      shift and go to state 360
    value                          shift and go to state 129
    values                         shift and go to state 361
    empty                          shift and go to state 130
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 285

    (143) collection -> ID LBRACKET . ID RBRACKET DOT ID
    (144) collection -> ID LBRACKET . ID RBRACKET
    (199) pointer -> ID LBRACKET . NUMBER RBRACKET
    (200) pointer -> ID LBRACKET . NUMBER COLON NUMBER RBRACKET
    (52) brackets -> LBRACKET . NUMBER RBRACKET brackets
    (53) brackets -> LBRACKET . NUMBER RBRACKET
    (54) brackets -> LBRACKET . STRING RBRACKET brackets
    (55) brackets -> LBRACKET . STRING RBRACKET
    (56) brackets -> LBRACKET . ID RBRACKET
    (57) brackets -> LBRACKET . ID RBRACKET brackets

    ID              shift and go to state 362
    NUMBER          shift and go to state 183
    STRING          shift and go to state 140


state 286

    (123) expression -> LPAREN expression . RPAREN
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    RPAREN          shift and go to state 363
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 287

    (31) function -> ID LPAREN parameters RPAREN .

    DOT             reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    RPAREN          reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    ASSIGN_OP       reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    BREAK           reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    ID              reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    VAR             reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    LBRACKET        reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    IF              reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    FOR             reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    GO              reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    SWITCH          reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    RETURN          reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    DEFER           reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    CONTINUE        reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    SELECT          reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    CHANNEL_OP      reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    RBRACE          reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    COMMA           reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    ARITH_OP        reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    REL_OP          reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    LOG_OP          reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    POINTER         reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    CASE            reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    DEFAULT         reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    LBRACE          reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    SEMICOLON       reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)
    COLON           reduce using rule 31 (function -> ID LPAREN parameters RPAREN .)


state 288

    (34) parameters -> expression COMMA . parameters
    (32) parameters -> . expression
    (33) parameters -> . CHAN TYPES
    (34) parameters -> . expression COMMA parameters
    (35) parameters -> . empty
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (219) empty -> .
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

    CHAN            shift and go to state 194
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    RPAREN          reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    expression                     shift and go to state 193
    parameters                     shift and go to state 364
    empty                          shift and go to state 195
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108

state 289

    (124) expression -> expression ARITH_OP . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    RPAREN          reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 365
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 290

    (125) expression -> expression REL_OP . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    RPAREN          reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 366
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 291

    (126) expression -> expression LOG_OP . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    RPAREN          reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 367
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 292

    (127) expression -> expression POINTER . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    RPAREN          reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 368
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 293

    (33) parameters -> CHAN TYPES .

    RPAREN          reduce using rule 33 (parameters -> CHAN TYPES .)


state 294

    (159) map -> value COLON . value
    (160) map -> value COLON . value COMMA map
    (161) map -> value COLON . map
    (162) map -> value COLON . map COMMA map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (219) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    RPAREN          reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    LBRACKET        reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]

    value                          shift and go to state 369
    map                            shift and go to state 370
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    empty                          shift and go to state 371

state 295

    (128) expression -> NOT expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

  ! shift/reduce conflict for ARITH_OP resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
  ! shift/reduce conflict for LOG_OP resolved as shift
  ! shift/reduce conflict for POINTER resolved as shift
    COMMA           reduce using rule 128 (expression -> NOT expression .)
    RPAREN          reduce using rule 128 (expression -> NOT expression .)
    LBRACE          reduce using rule 128 (expression -> NOT expression .)
    BREAK           reduce using rule 128 (expression -> NOT expression .)
    ID              reduce using rule 128 (expression -> NOT expression .)
    VAR             reduce using rule 128 (expression -> NOT expression .)
    LBRACKET        reduce using rule 128 (expression -> NOT expression .)
    IF              reduce using rule 128 (expression -> NOT expression .)
    FOR             reduce using rule 128 (expression -> NOT expression .)
    GO              reduce using rule 128 (expression -> NOT expression .)
    SWITCH          reduce using rule 128 (expression -> NOT expression .)
    RETURN          reduce using rule 128 (expression -> NOT expression .)
    DEFER           reduce using rule 128 (expression -> NOT expression .)
    CONTINUE        reduce using rule 128 (expression -> NOT expression .)
    SELECT          reduce using rule 128 (expression -> NOT expression .)
    CHANNEL_OP      reduce using rule 128 (expression -> NOT expression .)
    ASSIGN_OP       reduce using rule 128 (expression -> NOT expression .)
    RBRACE          reduce using rule 128 (expression -> NOT expression .)
    CASE            reduce using rule 128 (expression -> NOT expression .)
    DEFAULT         reduce using rule 128 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 128 (expression -> NOT expression .)
    COLON           reduce using rule 128 (expression -> NOT expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292

  ! ARITH_OP        [ reduce using rule 128 (expression -> NOT expression .) ]
  ! REL_OP          [ reduce using rule 128 (expression -> NOT expression .) ]
  ! LOG_OP          [ reduce using rule 128 (expression -> NOT expression .) ]
  ! POINTER         [ reduce using rule 128 (expression -> NOT expression .) ]


state 296

    (157) map -> LBRACE . map RBRACE
    (158) map -> LBRACE . map RBRACE COMMA map
    (214) value -> LBRACE . values RBRACE
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (72) values -> . value COMMA values
    (73) values -> . value
    (74) values -> . empty
    (219) empty -> .
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    LBRACE          shift and go to state 296
    RBRACE          reduce using rule 219 (empty -> .)
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    map                            shift and go to state 297
    values                         shift and go to state 128
    empty                          shift and go to state 372
    value                          shift and go to state 373
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 297

    (157) map -> LBRACE map . RBRACE
    (158) map -> LBRACE map . RBRACE COMMA map

    RBRACE          shift and go to state 374


state 298

    (72) values -> value . COMMA values
    (73) values -> value .
    (159) map -> value . COLON value
    (160) map -> value . COLON value COMMA map
    (161) map -> value . COLON map
    (162) map -> value . COLON map COMMA map

    COMMA           shift and go to state 185
    RBRACE          reduce using rule 73 (values -> value .)
    COLON           shift and go to state 294


state 299

    (74) values -> empty .
    (156) map -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 74 (values -> empty .)
    RBRACE          reduce using rule 74 (values -> empty .)

  ! RBRACE          [ reduce using rule 156 (map -> empty .) ]


state 300

    (98) lambda -> FUNC LPAREN . args RPAREN types LBRACE content RBRACE
    (99) lambda -> FUNC LPAREN . args RPAREN LBRACE content RBRACE
    (36) args -> . ID types
    (37) args -> . ID CHAN ID
    (38) args -> . ID CHAN ID COMMA args
    (39) args -> . ID CHAN types
    (40) args -> . ID CHAN types COMMA args
    (41) args -> . ID types COMMA args
    (42) args -> . ID COMMA args
    (43) args -> . ID collection_args COMMA args
    (44) args -> . ID collection_args
    (45) args -> . ID POINTER callback
    (46) args -> . p_map_args COMMA args
    (47) args -> . p_map_args
    (48) args -> . empty
    (51) p_map_args -> . ID POINTER brackets TYPES
    (219) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 219 (empty -> .)

    args                           shift and go to state 375
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 301

    (169) collection_statement -> LBRACKET RBRACKET . POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> LBRACKET RBRACKET . ID LBRACE collection_types RBRACE

    POINTER         shift and go to state 376
    ID              shift and go to state 377


state 302

    (171) collection_statement -> ADDRESS ID . LBRACE collection_types RBRACE
    (203) address_pointer -> ADDRESS ID .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 378
    COMMA           reduce using rule 203 (address_pointer -> ADDRESS ID .)
    ARITH_OP        reduce using rule 203 (address_pointer -> ADDRESS ID .)
    REL_OP          reduce using rule 203 (address_pointer -> ADDRESS ID .)
    LOG_OP          reduce using rule 203 (address_pointer -> ADDRESS ID .)
    POINTER         reduce using rule 203 (address_pointer -> ADDRESS ID .)
    RPAREN          reduce using rule 203 (address_pointer -> ADDRESS ID .)
    BREAK           reduce using rule 203 (address_pointer -> ADDRESS ID .)
    ID              reduce using rule 203 (address_pointer -> ADDRESS ID .)
    VAR             reduce using rule 203 (address_pointer -> ADDRESS ID .)
    LBRACKET        reduce using rule 203 (address_pointer -> ADDRESS ID .)
    IF              reduce using rule 203 (address_pointer -> ADDRESS ID .)
    FOR             reduce using rule 203 (address_pointer -> ADDRESS ID .)
    GO              reduce using rule 203 (address_pointer -> ADDRESS ID .)
    SWITCH          reduce using rule 203 (address_pointer -> ADDRESS ID .)
    RETURN          reduce using rule 203 (address_pointer -> ADDRESS ID .)
    DEFER           reduce using rule 203 (address_pointer -> ADDRESS ID .)
    CONTINUE        reduce using rule 203 (address_pointer -> ADDRESS ID .)
    SELECT          reduce using rule 203 (address_pointer -> ADDRESS ID .)
    CHANNEL_OP      reduce using rule 203 (address_pointer -> ADDRESS ID .)
    ASSIGN_OP       reduce using rule 203 (address_pointer -> ADDRESS ID .)
    RBRACE          reduce using rule 203 (address_pointer -> ADDRESS ID .)
    CASE            reduce using rule 203 (address_pointer -> ADDRESS ID .)
    DEFAULT         reduce using rule 203 (address_pointer -> ADDRESS ID .)
    SEMICOLON       reduce using rule 203 (address_pointer -> ADDRESS ID .)
    COLON           reduce using rule 203 (address_pointer -> ADDRESS ID .)

  ! LBRACE          [ reduce using rule 203 (address_pointer -> ADDRESS ID .) ]


state 303

    (153) map_statement -> MAP LBRACKET . TYPES RBRACKET map_statement
    (154) map_statement -> MAP LBRACKET . TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> MAP LBRACKET . TYPES RBRACKET TYPES

    TYPES           shift and go to state 379


state 304

    (52) brackets -> LBRACKET . NUMBER RBRACKET brackets
    (53) brackets -> LBRACKET . NUMBER RBRACKET
    (54) brackets -> LBRACKET . STRING RBRACKET brackets
    (55) brackets -> LBRACKET . STRING RBRACKET
    (56) brackets -> LBRACKET . ID RBRACKET
    (57) brackets -> LBRACKET . ID RBRACKET brackets

    NUMBER          shift and go to state 380
    STRING          shift and go to state 140
    ID              shift and go to state 141


state 305

    (52) brackets -> LBRACKET NUMBER RBRACKET brackets .

    TYPES           reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    ID              reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    RPAREN          reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    COMMA           reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    RBRACE          reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    COLON           reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    ARITH_OP        reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    REL_OP          reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    LOG_OP          reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    POINTER         reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    LBRACE          reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    BREAK           reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    VAR             reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    LBRACKET        reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    IF              reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    FOR             reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    GO              reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    SWITCH          reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    RETURN          reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    DEFER           reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    CONTINUE        reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    SELECT          reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    CHANNEL_OP      reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    ASSIGN_OP       reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    CASE            reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    DEFAULT         reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    SEMICOLON       reduce using rule 52 (brackets -> LBRACKET NUMBER RBRACKET brackets .)


state 306

    (54) brackets -> LBRACKET STRING RBRACKET brackets .

    TYPES           reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    ID              reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    RPAREN          reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    COMMA           reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    RBRACE          reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    COLON           reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    ARITH_OP        reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    REL_OP          reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    LOG_OP          reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    POINTER         reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    LBRACE          reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    BREAK           reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    VAR             reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    LBRACKET        reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    IF              reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    FOR             reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    GO              reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    SWITCH          reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    RETURN          reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    DEFER           reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    CONTINUE        reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    SELECT          reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    CHANNEL_OP      reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    ASSIGN_OP       reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    CASE            reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    DEFAULT         reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)
    SEMICOLON       reduce using rule 54 (brackets -> LBRACKET STRING RBRACKET brackets .)


state 307

    (57) brackets -> LBRACKET ID RBRACKET brackets .

    TYPES           reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    ID              reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    RPAREN          reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    COMMA           reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    RBRACE          reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    COLON           reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    ARITH_OP        reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    REL_OP          reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    LOG_OP          reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    POINTER         reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    LBRACE          reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    BREAK           reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    VAR             reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    LBRACKET        reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    IF              reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    FOR             reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    GO              reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    SWITCH          reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    RETURN          reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    DEFER           reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    CONTINUE        reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    SELECT          reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    CHANNEL_OP      reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    ASSIGN_OP       reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    CASE            reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    DEFAULT         reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)
    SEMICOLON       reduce using rule 57 (brackets -> LBRACKET ID RBRACKET brackets .)


state 308

    (29) function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE .

    FUNC            reduce using rule 29 (function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE .)
    VAR             reduce using rule 29 (function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE .)
    TYPE            reduce using rule 29 (function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE .)
    CONST           reduce using rule 29 (function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE .)
    $end            reduce using rule 29 (function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE .)


state 309

    (87) content -> ID channel content .

    RBRACE          reduce using rule 87 (content -> ID channel content .)
    CASE            reduce using rule 87 (content -> ID channel content .)
    DEFAULT         reduce using rule 87 (content -> ID channel content .)


state 310

    (183) variable_statement -> ID map_position EQUAL . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 381
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 311

    (193) variable_redeclaration -> ID EQUAL expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    BREAK           reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    ID              reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    VAR             reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    LBRACKET        reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    IF              reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    FOR             reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    GO              reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    SWITCH          reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    RETURN          reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    DEFER           reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    CONTINUE        reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    SELECT          reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    CHANNEL_OP      reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    ASSIGN_OP       reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    RBRACE          reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    CASE            reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    DEFAULT         reduce using rule 193 (variable_redeclaration -> ID EQUAL expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 312

    (184) variable_statement -> ID COLON_EQUAL expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    BREAK           reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    ID              reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    VAR             reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    LBRACKET        reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    IF              reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    FOR             reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    GO              reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    SWITCH          reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    RETURN          reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    DEFER           reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    CONTINUE        reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    SELECT          reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    CHANNEL_OP      reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    ASSIGN_OP       reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    RBRACE          reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    CASE            reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    DEFAULT         reduce using rule 184 (variable_statement -> ID COLON_EQUAL expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 313

    (186) variable_statement -> ID COLON_EQUAL slice_statement .

    BREAK           reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    ID              reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    VAR             reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    LBRACKET        reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    IF              reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    FOR             reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    GO              reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    SWITCH          reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    RETURN          reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    DEFER           reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    CONTINUE        reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    SELECT          reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    CHANNEL_OP      reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    ASSIGN_OP       reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    RBRACE          reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    CASE            reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)
    DEFAULT         reduce using rule 186 (variable_statement -> ID COLON_EQUAL slice_statement .)


state 314

    (187) variable_statement -> ID COLON_EQUAL array_statement .

    BREAK           reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    ID              reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    VAR             reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    LBRACKET        reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    IF              reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    FOR             reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    GO              reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    SWITCH          reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    RETURN          reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    DEFER           reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    CONTINUE        reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    SELECT          reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    CHANNEL_OP      reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    ASSIGN_OP       reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    RBRACE          reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    CASE            reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)
    DEFAULT         reduce using rule 187 (variable_statement -> ID COLON_EQUAL array_statement .)


state 315

    (69) slice_statement -> LBRACKET . RBRACKET TYPES
    (70) slice_statement -> LBRACKET . RBRACKET TYPES LBRACE values RBRACE
    (65) array_statement -> LBRACKET . NUMBER RBRACKET TYPES
    (66) array_statement -> LBRACKET . NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (169) collection_statement -> LBRACKET . RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> LBRACKET . RBRACKET ID LBRACE collection_types RBRACE

    RBRACKET        shift and go to state 382
    NUMBER          shift and go to state 62
    DOT             shift and go to state 64


state 316

    (207) callback -> ID DOT ID . LPAREN ID LPAREN ID RPAREN RPAREN
    (196) variable_redeclaration -> ID DOT ID . EQUAL expression
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (31) function -> ID . LPAREN parameters RPAREN

    LPAREN          shift and go to state 281
    EQUAL           shift and go to state 383
    DOT             shift and go to state 135
    ASSIGN_OP       reduce using rule 208 (callback -> ID .)
    BREAK           reduce using rule 208 (callback -> ID .)
    ID              reduce using rule 208 (callback -> ID .)
    VAR             reduce using rule 208 (callback -> ID .)
    LBRACKET        reduce using rule 208 (callback -> ID .)
    IF              reduce using rule 208 (callback -> ID .)
    FOR             reduce using rule 208 (callback -> ID .)
    GO              reduce using rule 208 (callback -> ID .)
    SWITCH          reduce using rule 208 (callback -> ID .)
    RETURN          reduce using rule 208 (callback -> ID .)
    DEFER           reduce using rule 208 (callback -> ID .)
    CONTINUE        reduce using rule 208 (callback -> ID .)
    SELECT          reduce using rule 208 (callback -> ID .)
    CHANNEL_OP      reduce using rule 208 (callback -> ID .)
    RBRACE          reduce using rule 208 (callback -> ID .)
    CASE            reduce using rule 208 (callback -> ID .)
    DEFAULT         reduce using rule 208 (callback -> ID .)


state 317

    (194) variable_redeclaration -> ID ASSIGN_OP expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    BREAK           reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    ID              reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    VAR             reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    LBRACKET        reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    IF              reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    FOR             reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    GO              reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    SWITCH          reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    RETURN          reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    DEFER           reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    CONTINUE        reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    SELECT          reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    CHANNEL_OP      reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    ASSIGN_OP       reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    RBRACE          reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    CASE            reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    DEFAULT         reduce using rule 194 (variable_redeclaration -> ID ASSIGN_OP expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 318

    (190) map_position -> LBRACKET NUMBER . RBRACKET map_position
    (192) map_position -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 384


state 319

    (195) variable_redeclaration -> callback ASSIGN_OP expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    BREAK           reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    ID              reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    VAR             reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    LBRACKET        reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    IF              reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    FOR             reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    GO              reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    SWITCH          reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    RETURN          reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    DEFER           reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    CONTINUE        reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    SELECT          reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    CHANNEL_OP      reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    ASSIGN_OP       reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    RBRACE          reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    CASE            reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    DEFAULT         reduce using rule 195 (variable_redeclaration -> callback ASSIGN_OP expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 320

    (181) variable_statement -> VAR ID ID . EQUAL expression
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (31) function -> ID . LPAREN parameters RPAREN

    EQUAL           shift and go to state 385
    DOT             shift and go to state 135
    BREAK           reduce using rule 208 (callback -> ID .)
    ID              reduce using rule 208 (callback -> ID .)
    VAR             reduce using rule 208 (callback -> ID .)
    LBRACKET        reduce using rule 208 (callback -> ID .)
    IF              reduce using rule 208 (callback -> ID .)
    FOR             reduce using rule 208 (callback -> ID .)
    GO              reduce using rule 208 (callback -> ID .)
    SWITCH          reduce using rule 208 (callback -> ID .)
    RETURN          reduce using rule 208 (callback -> ID .)
    DEFER           reduce using rule 208 (callback -> ID .)
    CONTINUE        reduce using rule 208 (callback -> ID .)
    SELECT          reduce using rule 208 (callback -> ID .)
    CHANNEL_OP      reduce using rule 208 (callback -> ID .)
    ASSIGN_OP       reduce using rule 208 (callback -> ID .)
    RBRACE          reduce using rule 208 (callback -> ID .)
    CASE            reduce using rule 208 (callback -> ID .)
    DEFAULT         reduce using rule 208 (callback -> ID .)
    LPAREN          shift and go to state 136


state 321

    (177) variable_statement -> VAR ID EQUAL . slice_statement
    (178) variable_statement -> VAR ID EQUAL . array_statement
    (180) variable_statement -> VAR ID EQUAL . expression
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LBRACKET        shift and go to state 315
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    slice_statement                shift and go to state 386
    array_statement                shift and go to state 387
    expression                     shift and go to state 388
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 322

    (179) variable_statement -> VAR ID types . EQUAL expression

    EQUAL           shift and go to state 389


state 323

    (182) variable_statement -> VAR ID callback .

    BREAK           reduce using rule 182 (variable_statement -> VAR ID callback .)
    ID              reduce using rule 182 (variable_statement -> VAR ID callback .)
    VAR             reduce using rule 182 (variable_statement -> VAR ID callback .)
    LBRACKET        reduce using rule 182 (variable_statement -> VAR ID callback .)
    IF              reduce using rule 182 (variable_statement -> VAR ID callback .)
    FOR             reduce using rule 182 (variable_statement -> VAR ID callback .)
    GO              reduce using rule 182 (variable_statement -> VAR ID callback .)
    SWITCH          reduce using rule 182 (variable_statement -> VAR ID callback .)
    RETURN          reduce using rule 182 (variable_statement -> VAR ID callback .)
    DEFER           reduce using rule 182 (variable_statement -> VAR ID callback .)
    CONTINUE        reduce using rule 182 (variable_statement -> VAR ID callback .)
    SELECT          reduce using rule 182 (variable_statement -> VAR ID callback .)
    CHANNEL_OP      reduce using rule 182 (variable_statement -> VAR ID callback .)
    ASSIGN_OP       reduce using rule 182 (variable_statement -> VAR ID callback .)
    RBRACE          reduce using rule 182 (variable_statement -> VAR ID callback .)
    CASE            reduce using rule 182 (variable_statement -> VAR ID callback .)
    DEFAULT         reduce using rule 182 (variable_statement -> VAR ID callback .)


state 324

    (188) variable_statement -> VAR ID TYPES .
    (58) types -> TYPES .

    BREAK           reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    ID              reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    VAR             reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    LBRACKET        reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    IF              reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    FOR             reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    GO              reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    SWITCH          reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    RETURN          reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    DEFER           reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    CONTINUE        reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    SELECT          reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    CHANNEL_OP      reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    ASSIGN_OP       reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    RBRACE          reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    CASE            reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    DEFAULT         reduce using rule 188 (variable_statement -> VAR ID TYPES .)
    EQUAL           reduce using rule 58 (types -> TYPES .)


state 325

    (185) variable_statement -> map_position COLON_EQUAL expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    BREAK           reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    ID              reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    VAR             reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    LBRACKET        reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    IF              reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    FOR             reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    GO              reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    SWITCH          reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    RETURN          reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    DEFER           reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    CONTINUE        reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    SELECT          reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    CHANNEL_OP      reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    ASSIGN_OP       reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    RBRACE          reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    CASE            reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    DEFAULT         reduce using rule 185 (variable_statement -> map_position COLON_EQUAL expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 326

    (65) array_statement -> LBRACKET NUMBER RBRACKET . TYPES
    (66) array_statement -> LBRACKET NUMBER RBRACKET . TYPES LBRACE values RBRACE
    (190) map_position -> LBRACKET NUMBER RBRACKET . map_position
    (192) map_position -> LBRACKET NUMBER RBRACKET .
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET

    TYPES           shift and go to state 117
    COLON_EQUAL     reduce using rule 192 (map_position -> LBRACKET NUMBER RBRACKET .)
    LBRACKET        shift and go to state 230

    map_position                   shift and go to state 390

state 327

    (189) map_position -> LBRACKET STRING RBRACKET . map_position
    (191) map_position -> LBRACKET STRING RBRACKET .
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET

    COLON_EQUAL     reduce using rule 191 (map_position -> LBRACKET STRING RBRACKET .)
    EQUAL           reduce using rule 191 (map_position -> LBRACKET STRING RBRACKET .)
    LBRACKET        shift and go to state 230

    map_position                   shift and go to state 391

state 328

    (118) if -> IF expression LBRACE . content RBRACE else
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 392
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 329

    (145) for -> FOR LBRACE content . RBRACE

    RBRACE          shift and go to state 393


state 330

    (75) content -> empty .
    (74) values -> empty .
    (156) map -> empty .
    (211) callback -> empty .
    (165) return -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 74 (values -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 74 (values -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 74 (values -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for GO resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for SWITCH resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for DEFER resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for SELECT resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for ASSIGN_OP resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 74 (values -> empty .)
    RBRACE          reduce using rule 74 (values -> empty .)
    BREAK           reduce using rule 165 (return -> empty .)
    ID              reduce using rule 165 (return -> empty .)
    VAR             reduce using rule 165 (return -> empty .)
    LBRACKET        reduce using rule 165 (return -> empty .)
    IF              reduce using rule 165 (return -> empty .)
    FOR             reduce using rule 165 (return -> empty .)
    GO              reduce using rule 165 (return -> empty .)
    SWITCH          reduce using rule 165 (return -> empty .)
    RETURN          reduce using rule 165 (return -> empty .)
    DEFER           reduce using rule 165 (return -> empty .)
    CONTINUE        reduce using rule 165 (return -> empty .)
    SELECT          reduce using rule 165 (return -> empty .)
    CHANNEL_OP      reduce using rule 165 (return -> empty .)
    ASSIGN_OP       reduce using rule 165 (return -> empty .)

  ! RBRACE          [ reduce using rule 75 (content -> empty .) ]
  ! RBRACE          [ reduce using rule 156 (map -> empty .) ]
  ! ASSIGN_OP       [ reduce using rule 211 (callback -> empty .) ]
  ! BREAK           [ reduce using rule 211 (callback -> empty .) ]
  ! ID              [ reduce using rule 211 (callback -> empty .) ]
  ! VAR             [ reduce using rule 211 (callback -> empty .) ]
  ! LBRACKET        [ reduce using rule 211 (callback -> empty .) ]
  ! IF              [ reduce using rule 211 (callback -> empty .) ]
  ! FOR             [ reduce using rule 211 (callback -> empty .) ]
  ! GO              [ reduce using rule 211 (callback -> empty .) ]
  ! SWITCH          [ reduce using rule 211 (callback -> empty .) ]
  ! RETURN          [ reduce using rule 211 (callback -> empty .) ]
  ! DEFER           [ reduce using rule 211 (callback -> empty .) ]
  ! CONTINUE        [ reduce using rule 211 (callback -> empty .) ]
  ! SELECT          [ reduce using rule 211 (callback -> empty .) ]
  ! CHANNEL_OP      [ reduce using rule 211 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 211 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 165 (return -> empty .) ]


state 331

    (87) content -> ID . channel content
    (183) variable_statement -> ID . map_position EQUAL expression
    (184) variable_statement -> ID . COLON_EQUAL expression
    (186) variable_statement -> ID . COLON_EQUAL slice_statement
    (187) variable_statement -> ID . COLON_EQUAL array_statement
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (193) variable_redeclaration -> ID . EQUAL expression
    (194) variable_redeclaration -> ID . ASSIGN_OP expression
    (196) variable_redeclaration -> ID . DOT ID EQUAL expression
    (201) increment -> ID . INCREMENT
    (202) decrement -> ID . DECREMENT
    (31) function -> ID . LPAREN parameters RPAREN
    (218) map_varible -> ID . brackets
    (199) pointer -> ID . LBRACKET NUMBER RBRACKET
    (200) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for ASSIGN_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    COLON_EQUAL     shift and go to state 225
    DOT             shift and go to state 226
    BREAK           reduce using rule 208 (callback -> ID .)
    ID              reduce using rule 208 (callback -> ID .)
    VAR             reduce using rule 208 (callback -> ID .)
    IF              reduce using rule 208 (callback -> ID .)
    FOR             reduce using rule 208 (callback -> ID .)
    GO              reduce using rule 208 (callback -> ID .)
    SWITCH          reduce using rule 208 (callback -> ID .)
    RETURN          reduce using rule 208 (callback -> ID .)
    DEFER           reduce using rule 208 (callback -> ID .)
    CONTINUE        reduce using rule 208 (callback -> ID .)
    SELECT          reduce using rule 208 (callback -> ID .)
    RBRACE          reduce using rule 208 (callback -> ID .)
    EQUAL           shift and go to state 224
    ASSIGN_OP       shift and go to state 227
    INCREMENT       shift and go to state 228
    DECREMENT       shift and go to state 229
    LPAREN          shift and go to state 136
    LBRACKET        shift and go to state 394
    CHANNEL_OP      shift and go to state 175

  ! ASSIGN_OP       [ reduce using rule 208 (callback -> ID .) ]
  ! LBRACKET        [ reduce using rule 208 (callback -> ID .) ]
  ! CHANNEL_OP      [ reduce using rule 208 (callback -> ID .) ]

    channel                        shift and go to state 222
    map_position                   shift and go to state 223
    brackets                       shift and go to state 125

state 332

    (146) for -> FOR NOT ID . LBRACE content RBRACE
    (129) expression -> ID . COLON_EQUAL channel
    (139) expression -> ID .
    (201) increment -> ID . INCREMENT
    (202) decrement -> ID . DECREMENT
    (204) struct -> ID . DOT ID
    (205) struct -> ID . DOT struct
    (172) collection_statement -> ID . LBRACE collection_types RBRACE
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (166) struct_declaretion -> ID . LBRACE struct_declaretion_values RBRACE
    (143) collection -> ID . LBRACKET ID RBRACKET DOT ID
    (144) collection -> ID . LBRACKET ID RBRACKET
    (218) map_varible -> ID . brackets
    (199) pointer -> ID . LBRACKET NUMBER RBRACKET
    (200) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> ID . LPAREN parameters RPAREN
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACE resolved as shift
  ! reduce/reduce conflict for ARITH_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for REL_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for POINTER resolved using rule 139 (expression -> ID .)
  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 395
    COLON_EQUAL     shift and go to state 282
    ARITH_OP        reduce using rule 139 (expression -> ID .)
    REL_OP          reduce using rule 139 (expression -> ID .)
    LOG_OP          reduce using rule 139 (expression -> ID .)
    POINTER         reduce using rule 139 (expression -> ID .)
    INCREMENT       shift and go to state 228
    DECREMENT       shift and go to state 229
    DOT             shift and go to state 283
    LBRACKET        shift and go to state 285
    LPAREN          shift and go to state 136

  ! LBRACE          [ reduce using rule 139 (expression -> ID .) ]
  ! ARITH_OP        [ reduce using rule 208 (callback -> ID .) ]
  ! REL_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! LOG_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! POINTER         [ reduce using rule 208 (callback -> ID .) ]
  ! LBRACE          [ reduce using rule 208 (callback -> ID .) ]

    brackets                       shift and go to state 125

state 333

    (149) for -> FOR ID COMMA . ID COLON_EQUAL RANGE ID LBRACE content RBRACE

    ID              shift and go to state 396


state 334

    (151) for -> FOR ID COLON_EQUAL . RANGE ID LBRACE content RBRACE
    (129) expression -> ID COLON_EQUAL . channel
    (152) for_declaration -> ID COLON_EQUAL . NUMBER
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion

    RANGE           shift and go to state 397
    NUMBER          shift and go to state 398
    CHANNEL_OP      shift and go to state 175

    channel                        shift and go to state 354

state 335

    (147) for -> FOR expression LBRACE . content RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 399
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 336

    (148) for -> FOR for_declaration SEMICOLON . expression SEMICOLON expression LBRACE content RBRACE
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    SEMICOLON       reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)

    expression                     shift and go to state 400
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 337

    (150) for -> FOR UNDERSCORE COMMA . ID COLON_EQUAL RANGE ID LBRACE content RBRACE

    ID              shift and go to state 401


state 338

    (117) goroutine -> GO lambda LPAREN . parameters RPAREN
    (32) parameters -> . expression
    (33) parameters -> . CHAN TYPES
    (34) parameters -> . expression COMMA parameters
    (35) parameters -> . empty
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (219) empty -> .
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

    CHAN            shift and go to state 194
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    RPAREN          reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    lambda                         shift and go to state 200
    parameters                     shift and go to state 402
    expression                     shift and go to state 193
    empty                          shift and go to state 195
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108

state 339

    (105) switch -> SWITCH ID LBRACE . cases_value default RBRACE
    (114) cases_value -> . CASE value COLON content cases_value
    (115) cases_value -> . empty
    (219) empty -> .

    CASE            shift and go to state 404
    DEFAULT         reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)

    cases_value                    shift and go to state 403
    empty                          shift and go to state 405

state 340

    (106) switch -> SWITCH LBRACE cases_rel . default RBRACE
    (112) default -> . DEFAULT COLON content
    (113) default -> . empty
    (219) empty -> .

    DEFAULT         shift and go to state 407
    RBRACE          reduce using rule 219 (empty -> .)

    default                        shift and go to state 406
    empty                          shift and go to state 408

state 341

    (107) cases_rel -> CASE . case_condition COLON content cases_rel
    (109) case_condition -> . ID REL_OP value
    (110) case_condition -> . boolean
    (111) case_condition -> . callback
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

    ID              shift and go to state 410
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    COLON           reduce using rule 219 (empty -> .)

    case_condition                 shift and go to state 409
    boolean                        shift and go to state 411
    callback                       shift and go to state 412
    function                       shift and go to state 108
    empty                          shift and go to state 109

state 342

    (108) cases_rel -> empty .

    DEFAULT         reduce using rule 108 (cases_rel -> empty .)
    RBRACE          reduce using rule 108 (cases_rel -> empty .)


state 343

    (100) select -> SELECT LBRACE select_cases . RBRACE

    RBRACE          shift and go to state 413


state 344

    (101) select_cases -> CASE . expression COLON content select_cases
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    COLON           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)

    expression                     shift and go to state 414
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 345

    (102) select_cases -> DEFAULT . COLON content

    COLON           shift and go to state 415


state 346

    (103) select_cases -> empty .

    RBRACE          reduce using rule 103 (select_cases -> empty .)


state 347

    (166) struct_declaretion -> ID LBRACE . struct_declaretion_values RBRACE
    (167) struct_declaretion_values -> . values
    (168) struct_declaretion_values -> . LBRACE struct_declaretion_values RBRACE
    (72) values -> . value COMMA values
    (73) values -> . value
    (74) values -> . empty
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (219) empty -> .
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    LBRACE          shift and go to state 358
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    RBRACE          reduce using rule 219 (empty -> .)
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    struct_declaretion_values      shift and go to state 360
    values                         shift and go to state 361
    value                          shift and go to state 129
    empty                          shift and go to state 130
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 348

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN . LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN . TYPES LBRACE content RBRACE

    LBRACE          shift and go to state 416
    TYPES           shift and go to state 417


state 349

    (66) array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .

    FUNC            reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    VAR             reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    TYPE            reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    CONST           reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    $end            reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    COMMA           reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    RPAREN          reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    LBRACE          reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    ID              reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    RBRACE          reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    EQUAL           reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    BREAK           reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    LBRACKET        reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    IF              reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    FOR             reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    GO              reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    SWITCH          reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    RETURN          reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    DEFER           reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    CONTINUE        reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    SELECT          reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    CHANNEL_OP      reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    ASSIGN_OP       reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    CASE            reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    DEFAULT         reduce using rule 66 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)


state 350

    (68) array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE . values RBRACE
    (72) values -> . value COMMA values
    (73) values -> . value
    (74) values -> . empty
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (219) empty -> .
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 94
    RBRACE          reduce using rule 219 (empty -> .)
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    values                         shift and go to state 418
    value                          shift and go to state 129
    empty                          shift and go to state 130
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 351

    (18) method_list -> ID LPAREN args RPAREN types . method_list
    (18) method_list -> . ID LPAREN args RPAREN types method_list
    (19) method_list -> . empty
    (219) empty -> .

    ID              shift and go to state 87
    RBRACE          reduce using rule 219 (empty -> .)

    method_list                    shift and go to state 419
    empty                          shift and go to state 89

state 352

    (200) pointer -> ID LBRACKET NUMBER COLON NUMBER . RBRACKET

    RBRACKET        shift and go to state 420


state 353

    (207) callback -> ID DOT ID LPAREN ID . LPAREN ID RPAREN RPAREN
    (129) expression -> ID . COLON_EQUAL channel
    (139) expression -> ID .
    (201) increment -> ID . INCREMENT
    (202) decrement -> ID . DECREMENT
    (204) struct -> ID . DOT ID
    (205) struct -> ID . DOT struct
    (172) collection_statement -> ID . LBRACE collection_types RBRACE
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (166) struct_declaretion -> ID . LBRACE struct_declaretion_values RBRACE
    (143) collection -> ID . LBRACKET ID RBRACKET DOT ID
    (144) collection -> ID . LBRACKET ID RBRACKET
    (218) map_varible -> ID . brackets
    (199) pointer -> ID . LBRACKET NUMBER RBRACKET
    (200) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> ID . LPAREN parameters RPAREN
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! reduce/reduce conflict for COMMA resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for ARITH_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for REL_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for POINTER resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 139 (expression -> ID .)
    LPAREN          shift and go to state 421
    COLON_EQUAL     shift and go to state 282
    COMMA           reduce using rule 139 (expression -> ID .)
    ARITH_OP        reduce using rule 139 (expression -> ID .)
    REL_OP          reduce using rule 139 (expression -> ID .)
    LOG_OP          reduce using rule 139 (expression -> ID .)
    POINTER         reduce using rule 139 (expression -> ID .)
    RPAREN          reduce using rule 139 (expression -> ID .)
    INCREMENT       shift and go to state 228
    DECREMENT       shift and go to state 229
    DOT             shift and go to state 283
    LBRACE          shift and go to state 284
    LBRACKET        shift and go to state 285

  ! COMMA           [ reduce using rule 208 (callback -> ID .) ]
  ! ARITH_OP        [ reduce using rule 208 (callback -> ID .) ]
  ! REL_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! LOG_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! POINTER         [ reduce using rule 208 (callback -> ID .) ]
  ! RPAREN          [ reduce using rule 208 (callback -> ID .) ]

    brackets                       shift and go to state 125

state 354

    (129) expression -> ID COLON_EQUAL channel .

    COMMA           reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    ARITH_OP        reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    REL_OP          reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    LOG_OP          reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    POINTER         reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    RPAREN          reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    LBRACE          reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    BREAK           reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    ID              reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    VAR             reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    LBRACKET        reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    IF              reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    FOR             reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    GO              reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    SWITCH          reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    RETURN          reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    DEFER           reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    CONTINUE        reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    SELECT          reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    CHANNEL_OP      reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    ASSIGN_OP       reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    RBRACE          reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    CASE            reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    DEFAULT         reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    SEMICOLON       reduce using rule 129 (expression -> ID COLON_EQUAL channel .)
    COLON           reduce using rule 129 (expression -> ID COLON_EQUAL channel .)


state 355

    (204) struct -> ID DOT ID .
    (207) callback -> ID DOT ID . LPAREN ID LPAREN ID RPAREN RPAREN
    (204) struct -> ID . DOT ID
    (205) struct -> ID . DOT struct
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (31) function -> ID . LPAREN parameters RPAREN

  ! reduce/reduce conflict for COMMA resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for ARITH_OP resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for REL_OP resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for POINTER resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for LBRACE resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for BREAK resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for ID resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for VAR resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for IF resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for FOR resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for GO resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for DEFER resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for SELECT resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for ASSIGN_OP resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for RBRACE resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for CASE resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 204 (struct -> ID DOT ID .)
  ! reduce/reduce conflict for COLON resolved using rule 204 (struct -> ID DOT ID .)
    COMMA           reduce using rule 204 (struct -> ID DOT ID .)
    ARITH_OP        reduce using rule 204 (struct -> ID DOT ID .)
    REL_OP          reduce using rule 204 (struct -> ID DOT ID .)
    LOG_OP          reduce using rule 204 (struct -> ID DOT ID .)
    POINTER         reduce using rule 204 (struct -> ID DOT ID .)
    RPAREN          reduce using rule 204 (struct -> ID DOT ID .)
    LBRACE          reduce using rule 204 (struct -> ID DOT ID .)
    BREAK           reduce using rule 204 (struct -> ID DOT ID .)
    ID              reduce using rule 204 (struct -> ID DOT ID .)
    VAR             reduce using rule 204 (struct -> ID DOT ID .)
    LBRACKET        reduce using rule 204 (struct -> ID DOT ID .)
    IF              reduce using rule 204 (struct -> ID DOT ID .)
    FOR             reduce using rule 204 (struct -> ID DOT ID .)
    GO              reduce using rule 204 (struct -> ID DOT ID .)
    SWITCH          reduce using rule 204 (struct -> ID DOT ID .)
    RETURN          reduce using rule 204 (struct -> ID DOT ID .)
    DEFER           reduce using rule 204 (struct -> ID DOT ID .)
    CONTINUE        reduce using rule 204 (struct -> ID DOT ID .)
    SELECT          reduce using rule 204 (struct -> ID DOT ID .)
    CHANNEL_OP      reduce using rule 204 (struct -> ID DOT ID .)
    ASSIGN_OP       reduce using rule 204 (struct -> ID DOT ID .)
    RBRACE          reduce using rule 204 (struct -> ID DOT ID .)
    CASE            reduce using rule 204 (struct -> ID DOT ID .)
    DEFAULT         reduce using rule 204 (struct -> ID DOT ID .)
    SEMICOLON       reduce using rule 204 (struct -> ID DOT ID .)
    COLON           reduce using rule 204 (struct -> ID DOT ID .)
    LPAREN          shift and go to state 281
    DOT             shift and go to state 283

  ! COMMA           [ reduce using rule 208 (callback -> ID .) ]
  ! ARITH_OP        [ reduce using rule 208 (callback -> ID .) ]
  ! REL_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! LOG_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! POINTER         [ reduce using rule 208 (callback -> ID .) ]
  ! RPAREN          [ reduce using rule 208 (callback -> ID .) ]
  ! LBRACE          [ reduce using rule 208 (callback -> ID .) ]
  ! BREAK           [ reduce using rule 208 (callback -> ID .) ]
  ! ID              [ reduce using rule 208 (callback -> ID .) ]
  ! VAR             [ reduce using rule 208 (callback -> ID .) ]
  ! LBRACKET        [ reduce using rule 208 (callback -> ID .) ]
  ! IF              [ reduce using rule 208 (callback -> ID .) ]
  ! FOR             [ reduce using rule 208 (callback -> ID .) ]
  ! GO              [ reduce using rule 208 (callback -> ID .) ]
  ! SWITCH          [ reduce using rule 208 (callback -> ID .) ]
  ! RETURN          [ reduce using rule 208 (callback -> ID .) ]
  ! DEFER           [ reduce using rule 208 (callback -> ID .) ]
  ! CONTINUE        [ reduce using rule 208 (callback -> ID .) ]
  ! SELECT          [ reduce using rule 208 (callback -> ID .) ]
  ! CHANNEL_OP      [ reduce using rule 208 (callback -> ID .) ]
  ! ASSIGN_OP       [ reduce using rule 208 (callback -> ID .) ]
  ! RBRACE          [ reduce using rule 208 (callback -> ID .) ]
  ! CASE            [ reduce using rule 208 (callback -> ID .) ]
  ! DEFAULT         [ reduce using rule 208 (callback -> ID .) ]
  ! SEMICOLON       [ reduce using rule 208 (callback -> ID .) ]
  ! COLON           [ reduce using rule 208 (callback -> ID .) ]


state 356

    (205) struct -> ID DOT struct .

    COMMA           reduce using rule 205 (struct -> ID DOT struct .)
    ARITH_OP        reduce using rule 205 (struct -> ID DOT struct .)
    REL_OP          reduce using rule 205 (struct -> ID DOT struct .)
    LOG_OP          reduce using rule 205 (struct -> ID DOT struct .)
    POINTER         reduce using rule 205 (struct -> ID DOT struct .)
    RPAREN          reduce using rule 205 (struct -> ID DOT struct .)
    LBRACE          reduce using rule 205 (struct -> ID DOT struct .)
    BREAK           reduce using rule 205 (struct -> ID DOT struct .)
    ID              reduce using rule 205 (struct -> ID DOT struct .)
    VAR             reduce using rule 205 (struct -> ID DOT struct .)
    LBRACKET        reduce using rule 205 (struct -> ID DOT struct .)
    IF              reduce using rule 205 (struct -> ID DOT struct .)
    FOR             reduce using rule 205 (struct -> ID DOT struct .)
    GO              reduce using rule 205 (struct -> ID DOT struct .)
    SWITCH          reduce using rule 205 (struct -> ID DOT struct .)
    RETURN          reduce using rule 205 (struct -> ID DOT struct .)
    DEFER           reduce using rule 205 (struct -> ID DOT struct .)
    CONTINUE        reduce using rule 205 (struct -> ID DOT struct .)
    SELECT          reduce using rule 205 (struct -> ID DOT struct .)
    CHANNEL_OP      reduce using rule 205 (struct -> ID DOT struct .)
    ASSIGN_OP       reduce using rule 205 (struct -> ID DOT struct .)
    RBRACE          reduce using rule 205 (struct -> ID DOT struct .)
    CASE            reduce using rule 205 (struct -> ID DOT struct .)
    DEFAULT         reduce using rule 205 (struct -> ID DOT struct .)
    SEMICOLON       reduce using rule 205 (struct -> ID DOT struct .)
    COLON           reduce using rule 205 (struct -> ID DOT struct .)


state 357

    (173) collection_types -> ID .
    (174) collection_types -> ID . COMMA collection_types
    (175) collection_types -> ID . COLON value
    (176) collection_types -> ID . COLON value COMMA collection_types
    (218) map_varible -> ID . brackets
    (199) pointer -> ID . LBRACKET NUMBER RBRACKET
    (200) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

    RBRACE          reduce using rule 173 (collection_types -> ID .)
    COMMA           shift and go to state 422
    COLON           shift and go to state 423
    LBRACKET        shift and go to state 126

    brackets                       shift and go to state 125

state 358

    (168) struct_declaretion_values -> LBRACE . struct_declaretion_values RBRACE
    (214) value -> LBRACE . values RBRACE
    (167) struct_declaretion_values -> . values
    (168) struct_declaretion_values -> . LBRACE struct_declaretion_values RBRACE
    (72) values -> . value COMMA values
    (73) values -> . value
    (74) values -> . empty
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (219) empty -> .
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    LBRACE          shift and go to state 358
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    RBRACE          reduce using rule 219 (empty -> .)
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    struct_declaretion_values      shift and go to state 424
    values                         shift and go to state 425
    value                          shift and go to state 129
    empty                          shift and go to state 130
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 359

    (172) collection_statement -> ID LBRACE collection_types . RBRACE

    RBRACE          shift and go to state 426


state 360

    (166) struct_declaretion -> ID LBRACE struct_declaretion_values . RBRACE

    RBRACE          shift and go to state 427


state 361

    (167) struct_declaretion_values -> values .

    RBRACE          reduce using rule 167 (struct_declaretion_values -> values .)


state 362

    (143) collection -> ID LBRACKET ID . RBRACKET DOT ID
    (144) collection -> ID LBRACKET ID . RBRACKET
    (56) brackets -> LBRACKET ID . RBRACKET
    (57) brackets -> LBRACKET ID . RBRACKET brackets

    RBRACKET        shift and go to state 428


state 363

    (123) expression -> LPAREN expression RPAREN .

    COMMA           reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    ARITH_OP        reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    REL_OP          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    LOG_OP          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    POINTER         reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    GO              reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    DEFER           reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    SELECT          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    CHANNEL_OP      reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    ASSIGN_OP       reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 123 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 123 (expression -> LPAREN expression RPAREN .)


state 364

    (34) parameters -> expression COMMA parameters .

    RPAREN          reduce using rule 34 (parameters -> expression COMMA parameters .)


state 365

    (124) expression -> expression ARITH_OP expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

  ! shift/reduce conflict for ARITH_OP resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
  ! shift/reduce conflict for LOG_OP resolved as shift
  ! shift/reduce conflict for POINTER resolved as shift
    COMMA           reduce using rule 124 (expression -> expression ARITH_OP expression .)
    RPAREN          reduce using rule 124 (expression -> expression ARITH_OP expression .)
    LBRACE          reduce using rule 124 (expression -> expression ARITH_OP expression .)
    BREAK           reduce using rule 124 (expression -> expression ARITH_OP expression .)
    ID              reduce using rule 124 (expression -> expression ARITH_OP expression .)
    VAR             reduce using rule 124 (expression -> expression ARITH_OP expression .)
    LBRACKET        reduce using rule 124 (expression -> expression ARITH_OP expression .)
    IF              reduce using rule 124 (expression -> expression ARITH_OP expression .)
    FOR             reduce using rule 124 (expression -> expression ARITH_OP expression .)
    GO              reduce using rule 124 (expression -> expression ARITH_OP expression .)
    SWITCH          reduce using rule 124 (expression -> expression ARITH_OP expression .)
    RETURN          reduce using rule 124 (expression -> expression ARITH_OP expression .)
    DEFER           reduce using rule 124 (expression -> expression ARITH_OP expression .)
    CONTINUE        reduce using rule 124 (expression -> expression ARITH_OP expression .)
    SELECT          reduce using rule 124 (expression -> expression ARITH_OP expression .)
    CHANNEL_OP      reduce using rule 124 (expression -> expression ARITH_OP expression .)
    ASSIGN_OP       reduce using rule 124 (expression -> expression ARITH_OP expression .)
    RBRACE          reduce using rule 124 (expression -> expression ARITH_OP expression .)
    CASE            reduce using rule 124 (expression -> expression ARITH_OP expression .)
    DEFAULT         reduce using rule 124 (expression -> expression ARITH_OP expression .)
    SEMICOLON       reduce using rule 124 (expression -> expression ARITH_OP expression .)
    COLON           reduce using rule 124 (expression -> expression ARITH_OP expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292

  ! ARITH_OP        [ reduce using rule 124 (expression -> expression ARITH_OP expression .) ]
  ! REL_OP          [ reduce using rule 124 (expression -> expression ARITH_OP expression .) ]
  ! LOG_OP          [ reduce using rule 124 (expression -> expression ARITH_OP expression .) ]
  ! POINTER         [ reduce using rule 124 (expression -> expression ARITH_OP expression .) ]


state 366

    (125) expression -> expression REL_OP expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

  ! shift/reduce conflict for ARITH_OP resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
  ! shift/reduce conflict for LOG_OP resolved as shift
  ! shift/reduce conflict for POINTER resolved as shift
    COMMA           reduce using rule 125 (expression -> expression REL_OP expression .)
    RPAREN          reduce using rule 125 (expression -> expression REL_OP expression .)
    LBRACE          reduce using rule 125 (expression -> expression REL_OP expression .)
    BREAK           reduce using rule 125 (expression -> expression REL_OP expression .)
    ID              reduce using rule 125 (expression -> expression REL_OP expression .)
    VAR             reduce using rule 125 (expression -> expression REL_OP expression .)
    LBRACKET        reduce using rule 125 (expression -> expression REL_OP expression .)
    IF              reduce using rule 125 (expression -> expression REL_OP expression .)
    FOR             reduce using rule 125 (expression -> expression REL_OP expression .)
    GO              reduce using rule 125 (expression -> expression REL_OP expression .)
    SWITCH          reduce using rule 125 (expression -> expression REL_OP expression .)
    RETURN          reduce using rule 125 (expression -> expression REL_OP expression .)
    DEFER           reduce using rule 125 (expression -> expression REL_OP expression .)
    CONTINUE        reduce using rule 125 (expression -> expression REL_OP expression .)
    SELECT          reduce using rule 125 (expression -> expression REL_OP expression .)
    CHANNEL_OP      reduce using rule 125 (expression -> expression REL_OP expression .)
    ASSIGN_OP       reduce using rule 125 (expression -> expression REL_OP expression .)
    RBRACE          reduce using rule 125 (expression -> expression REL_OP expression .)
    CASE            reduce using rule 125 (expression -> expression REL_OP expression .)
    DEFAULT         reduce using rule 125 (expression -> expression REL_OP expression .)
    SEMICOLON       reduce using rule 125 (expression -> expression REL_OP expression .)
    COLON           reduce using rule 125 (expression -> expression REL_OP expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292

  ! ARITH_OP        [ reduce using rule 125 (expression -> expression REL_OP expression .) ]
  ! REL_OP          [ reduce using rule 125 (expression -> expression REL_OP expression .) ]
  ! LOG_OP          [ reduce using rule 125 (expression -> expression REL_OP expression .) ]
  ! POINTER         [ reduce using rule 125 (expression -> expression REL_OP expression .) ]


state 367

    (126) expression -> expression LOG_OP expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

  ! shift/reduce conflict for ARITH_OP resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
  ! shift/reduce conflict for LOG_OP resolved as shift
  ! shift/reduce conflict for POINTER resolved as shift
    COMMA           reduce using rule 126 (expression -> expression LOG_OP expression .)
    RPAREN          reduce using rule 126 (expression -> expression LOG_OP expression .)
    LBRACE          reduce using rule 126 (expression -> expression LOG_OP expression .)
    BREAK           reduce using rule 126 (expression -> expression LOG_OP expression .)
    ID              reduce using rule 126 (expression -> expression LOG_OP expression .)
    VAR             reduce using rule 126 (expression -> expression LOG_OP expression .)
    LBRACKET        reduce using rule 126 (expression -> expression LOG_OP expression .)
    IF              reduce using rule 126 (expression -> expression LOG_OP expression .)
    FOR             reduce using rule 126 (expression -> expression LOG_OP expression .)
    GO              reduce using rule 126 (expression -> expression LOG_OP expression .)
    SWITCH          reduce using rule 126 (expression -> expression LOG_OP expression .)
    RETURN          reduce using rule 126 (expression -> expression LOG_OP expression .)
    DEFER           reduce using rule 126 (expression -> expression LOG_OP expression .)
    CONTINUE        reduce using rule 126 (expression -> expression LOG_OP expression .)
    SELECT          reduce using rule 126 (expression -> expression LOG_OP expression .)
    CHANNEL_OP      reduce using rule 126 (expression -> expression LOG_OP expression .)
    ASSIGN_OP       reduce using rule 126 (expression -> expression LOG_OP expression .)
    RBRACE          reduce using rule 126 (expression -> expression LOG_OP expression .)
    CASE            reduce using rule 126 (expression -> expression LOG_OP expression .)
    DEFAULT         reduce using rule 126 (expression -> expression LOG_OP expression .)
    SEMICOLON       reduce using rule 126 (expression -> expression LOG_OP expression .)
    COLON           reduce using rule 126 (expression -> expression LOG_OP expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292

  ! ARITH_OP        [ reduce using rule 126 (expression -> expression LOG_OP expression .) ]
  ! REL_OP          [ reduce using rule 126 (expression -> expression LOG_OP expression .) ]
  ! LOG_OP          [ reduce using rule 126 (expression -> expression LOG_OP expression .) ]
  ! POINTER         [ reduce using rule 126 (expression -> expression LOG_OP expression .) ]


state 368

    (127) expression -> expression POINTER expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

  ! shift/reduce conflict for ARITH_OP resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
  ! shift/reduce conflict for LOG_OP resolved as shift
  ! shift/reduce conflict for POINTER resolved as shift
    COMMA           reduce using rule 127 (expression -> expression POINTER expression .)
    RPAREN          reduce using rule 127 (expression -> expression POINTER expression .)
    LBRACE          reduce using rule 127 (expression -> expression POINTER expression .)
    BREAK           reduce using rule 127 (expression -> expression POINTER expression .)
    ID              reduce using rule 127 (expression -> expression POINTER expression .)
    VAR             reduce using rule 127 (expression -> expression POINTER expression .)
    LBRACKET        reduce using rule 127 (expression -> expression POINTER expression .)
    IF              reduce using rule 127 (expression -> expression POINTER expression .)
    FOR             reduce using rule 127 (expression -> expression POINTER expression .)
    GO              reduce using rule 127 (expression -> expression POINTER expression .)
    SWITCH          reduce using rule 127 (expression -> expression POINTER expression .)
    RETURN          reduce using rule 127 (expression -> expression POINTER expression .)
    DEFER           reduce using rule 127 (expression -> expression POINTER expression .)
    CONTINUE        reduce using rule 127 (expression -> expression POINTER expression .)
    SELECT          reduce using rule 127 (expression -> expression POINTER expression .)
    CHANNEL_OP      reduce using rule 127 (expression -> expression POINTER expression .)
    ASSIGN_OP       reduce using rule 127 (expression -> expression POINTER expression .)
    RBRACE          reduce using rule 127 (expression -> expression POINTER expression .)
    CASE            reduce using rule 127 (expression -> expression POINTER expression .)
    DEFAULT         reduce using rule 127 (expression -> expression POINTER expression .)
    SEMICOLON       reduce using rule 127 (expression -> expression POINTER expression .)
    COLON           reduce using rule 127 (expression -> expression POINTER expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292

  ! ARITH_OP        [ reduce using rule 127 (expression -> expression POINTER expression .) ]
  ! REL_OP          [ reduce using rule 127 (expression -> expression POINTER expression .) ]
  ! LOG_OP          [ reduce using rule 127 (expression -> expression POINTER expression .) ]
  ! POINTER         [ reduce using rule 127 (expression -> expression POINTER expression .) ]


state 369

    (159) map -> value COLON value .
    (160) map -> value COLON value . COMMA map
    (159) map -> value . COLON value
    (160) map -> value . COLON value COMMA map
    (161) map -> value . COLON map
    (162) map -> value . COLON map COMMA map

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    ARITH_OP        reduce using rule 159 (map -> value COLON value .)
    REL_OP          reduce using rule 159 (map -> value COLON value .)
    LOG_OP          reduce using rule 159 (map -> value COLON value .)
    POINTER         reduce using rule 159 (map -> value COLON value .)
    RPAREN          reduce using rule 159 (map -> value COLON value .)
    LBRACE          reduce using rule 159 (map -> value COLON value .)
    BREAK           reduce using rule 159 (map -> value COLON value .)
    ID              reduce using rule 159 (map -> value COLON value .)
    VAR             reduce using rule 159 (map -> value COLON value .)
    LBRACKET        reduce using rule 159 (map -> value COLON value .)
    IF              reduce using rule 159 (map -> value COLON value .)
    FOR             reduce using rule 159 (map -> value COLON value .)
    GO              reduce using rule 159 (map -> value COLON value .)
    SWITCH          reduce using rule 159 (map -> value COLON value .)
    RETURN          reduce using rule 159 (map -> value COLON value .)
    DEFER           reduce using rule 159 (map -> value COLON value .)
    CONTINUE        reduce using rule 159 (map -> value COLON value .)
    SELECT          reduce using rule 159 (map -> value COLON value .)
    CHANNEL_OP      reduce using rule 159 (map -> value COLON value .)
    ASSIGN_OP       reduce using rule 159 (map -> value COLON value .)
    RBRACE          reduce using rule 159 (map -> value COLON value .)
    CASE            reduce using rule 159 (map -> value COLON value .)
    DEFAULT         reduce using rule 159 (map -> value COLON value .)
    SEMICOLON       reduce using rule 159 (map -> value COLON value .)
    COMMA           shift and go to state 429
    COLON           shift and go to state 294

  ! COMMA           [ reduce using rule 159 (map -> value COLON value .) ]
  ! COLON           [ reduce using rule 159 (map -> value COLON value .) ]


state 370

    (161) map -> value COLON map .
    (162) map -> value COLON map . COMMA map

  ! shift/reduce conflict for COMMA resolved as shift
    ARITH_OP        reduce using rule 161 (map -> value COLON map .)
    REL_OP          reduce using rule 161 (map -> value COLON map .)
    LOG_OP          reduce using rule 161 (map -> value COLON map .)
    POINTER         reduce using rule 161 (map -> value COLON map .)
    RPAREN          reduce using rule 161 (map -> value COLON map .)
    LBRACE          reduce using rule 161 (map -> value COLON map .)
    BREAK           reduce using rule 161 (map -> value COLON map .)
    ID              reduce using rule 161 (map -> value COLON map .)
    VAR             reduce using rule 161 (map -> value COLON map .)
    LBRACKET        reduce using rule 161 (map -> value COLON map .)
    IF              reduce using rule 161 (map -> value COLON map .)
    FOR             reduce using rule 161 (map -> value COLON map .)
    GO              reduce using rule 161 (map -> value COLON map .)
    SWITCH          reduce using rule 161 (map -> value COLON map .)
    RETURN          reduce using rule 161 (map -> value COLON map .)
    DEFER           reduce using rule 161 (map -> value COLON map .)
    CONTINUE        reduce using rule 161 (map -> value COLON map .)
    SELECT          reduce using rule 161 (map -> value COLON map .)
    CHANNEL_OP      reduce using rule 161 (map -> value COLON map .)
    ASSIGN_OP       reduce using rule 161 (map -> value COLON map .)
    RBRACE          reduce using rule 161 (map -> value COLON map .)
    CASE            reduce using rule 161 (map -> value COLON map .)
    DEFAULT         reduce using rule 161 (map -> value COLON map .)
    SEMICOLON       reduce using rule 161 (map -> value COLON map .)
    COLON           reduce using rule 161 (map -> value COLON map .)
    COMMA           shift and go to state 430

  ! COMMA           [ reduce using rule 161 (map -> value COLON map .) ]


state 371

    (156) map -> empty .

    COMMA           reduce using rule 156 (map -> empty .)
    ARITH_OP        reduce using rule 156 (map -> empty .)
    REL_OP          reduce using rule 156 (map -> empty .)
    LOG_OP          reduce using rule 156 (map -> empty .)
    POINTER         reduce using rule 156 (map -> empty .)
    RPAREN          reduce using rule 156 (map -> empty .)
    LBRACE          reduce using rule 156 (map -> empty .)
    BREAK           reduce using rule 156 (map -> empty .)
    ID              reduce using rule 156 (map -> empty .)
    VAR             reduce using rule 156 (map -> empty .)
    LBRACKET        reduce using rule 156 (map -> empty .)
    IF              reduce using rule 156 (map -> empty .)
    FOR             reduce using rule 156 (map -> empty .)
    GO              reduce using rule 156 (map -> empty .)
    SWITCH          reduce using rule 156 (map -> empty .)
    RETURN          reduce using rule 156 (map -> empty .)
    DEFER           reduce using rule 156 (map -> empty .)
    CONTINUE        reduce using rule 156 (map -> empty .)
    SELECT          reduce using rule 156 (map -> empty .)
    CHANNEL_OP      reduce using rule 156 (map -> empty .)
    ASSIGN_OP       reduce using rule 156 (map -> empty .)
    RBRACE          reduce using rule 156 (map -> empty .)
    CASE            reduce using rule 156 (map -> empty .)
    DEFAULT         reduce using rule 156 (map -> empty .)
    SEMICOLON       reduce using rule 156 (map -> empty .)
    COLON           reduce using rule 156 (map -> empty .)


state 372

    (156) map -> empty .
    (74) values -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 74 (values -> empty .)
    RBRACE          reduce using rule 74 (values -> empty .)

  ! RBRACE          [ reduce using rule 156 (map -> empty .) ]


state 373

    (159) map -> value . COLON value
    (160) map -> value . COLON value COMMA map
    (161) map -> value . COLON map
    (162) map -> value . COLON map COMMA map
    (72) values -> value . COMMA values
    (73) values -> value .

    COLON           shift and go to state 294
    COMMA           shift and go to state 185
    RBRACE          reduce using rule 73 (values -> value .)


state 374

    (157) map -> LBRACE map RBRACE .
    (158) map -> LBRACE map RBRACE . COMMA map

  ! shift/reduce conflict for COMMA resolved as shift
    ARITH_OP        reduce using rule 157 (map -> LBRACE map RBRACE .)
    REL_OP          reduce using rule 157 (map -> LBRACE map RBRACE .)
    LOG_OP          reduce using rule 157 (map -> LBRACE map RBRACE .)
    POINTER         reduce using rule 157 (map -> LBRACE map RBRACE .)
    RPAREN          reduce using rule 157 (map -> LBRACE map RBRACE .)
    LBRACE          reduce using rule 157 (map -> LBRACE map RBRACE .)
    BREAK           reduce using rule 157 (map -> LBRACE map RBRACE .)
    ID              reduce using rule 157 (map -> LBRACE map RBRACE .)
    VAR             reduce using rule 157 (map -> LBRACE map RBRACE .)
    LBRACKET        reduce using rule 157 (map -> LBRACE map RBRACE .)
    IF              reduce using rule 157 (map -> LBRACE map RBRACE .)
    FOR             reduce using rule 157 (map -> LBRACE map RBRACE .)
    GO              reduce using rule 157 (map -> LBRACE map RBRACE .)
    SWITCH          reduce using rule 157 (map -> LBRACE map RBRACE .)
    RETURN          reduce using rule 157 (map -> LBRACE map RBRACE .)
    DEFER           reduce using rule 157 (map -> LBRACE map RBRACE .)
    CONTINUE        reduce using rule 157 (map -> LBRACE map RBRACE .)
    SELECT          reduce using rule 157 (map -> LBRACE map RBRACE .)
    CHANNEL_OP      reduce using rule 157 (map -> LBRACE map RBRACE .)
    ASSIGN_OP       reduce using rule 157 (map -> LBRACE map RBRACE .)
    RBRACE          reduce using rule 157 (map -> LBRACE map RBRACE .)
    CASE            reduce using rule 157 (map -> LBRACE map RBRACE .)
    DEFAULT         reduce using rule 157 (map -> LBRACE map RBRACE .)
    SEMICOLON       reduce using rule 157 (map -> LBRACE map RBRACE .)
    COLON           reduce using rule 157 (map -> LBRACE map RBRACE .)
    COMMA           shift and go to state 431

  ! COMMA           [ reduce using rule 157 (map -> LBRACE map RBRACE .) ]


state 375

    (98) lambda -> FUNC LPAREN args . RPAREN types LBRACE content RBRACE
    (99) lambda -> FUNC LPAREN args . RPAREN LBRACE content RBRACE

    RPAREN          shift and go to state 432


state 376

    (169) collection_statement -> LBRACKET RBRACKET POINTER . ID LBRACE collection_types RBRACE

    ID              shift and go to state 433


state 377

    (170) collection_statement -> LBRACKET RBRACKET ID . LBRACE collection_types RBRACE

    LBRACE          shift and go to state 434


state 378

    (171) collection_statement -> ADDRESS ID LBRACE . collection_types RBRACE
    (173) collection_types -> . ID
    (174) collection_types -> . ID COMMA collection_types
    (175) collection_types -> . ID COLON value
    (176) collection_types -> . ID COLON value COMMA collection_types

    ID              shift and go to state 435

    collection_types               shift and go to state 436

state 379

    (153) map_statement -> MAP LBRACKET TYPES . RBRACKET map_statement
    (154) map_statement -> MAP LBRACKET TYPES . RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> MAP LBRACKET TYPES . RBRACKET TYPES

    RBRACKET        shift and go to state 437


state 380

    (52) brackets -> LBRACKET NUMBER . RBRACKET brackets
    (53) brackets -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 438


state 381

    (183) variable_statement -> ID map_position EQUAL expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    BREAK           reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    ID              reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    VAR             reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    LBRACKET        reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    IF              reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    FOR             reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    GO              reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    SWITCH          reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    RETURN          reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    DEFER           reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    CONTINUE        reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    SELECT          reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    CHANNEL_OP      reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    ASSIGN_OP       reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    RBRACE          reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    CASE            reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    DEFAULT         reduce using rule 183 (variable_statement -> ID map_position EQUAL expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 382

    (69) slice_statement -> LBRACKET RBRACKET . TYPES
    (70) slice_statement -> LBRACKET RBRACKET . TYPES LBRACE values RBRACE
    (169) collection_statement -> LBRACKET RBRACKET . POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> LBRACKET RBRACKET . ID LBRACE collection_types RBRACE

    TYPES           shift and go to state 82
    POINTER         shift and go to state 376
    ID              shift and go to state 377


state 383

    (196) variable_redeclaration -> ID DOT ID EQUAL . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 439
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 384

    (190) map_position -> LBRACKET NUMBER RBRACKET . map_position
    (192) map_position -> LBRACKET NUMBER RBRACKET .
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET

    EQUAL           reduce using rule 192 (map_position -> LBRACKET NUMBER RBRACKET .)
    COLON_EQUAL     reduce using rule 192 (map_position -> LBRACKET NUMBER RBRACKET .)
    LBRACKET        shift and go to state 230

    map_position                   shift and go to state 390

state 385

    (181) variable_statement -> VAR ID ID EQUAL . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 440
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 386

    (177) variable_statement -> VAR ID EQUAL slice_statement .

    BREAK           reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    ID              reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    VAR             reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    LBRACKET        reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    IF              reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    FOR             reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    GO              reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    SWITCH          reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    RETURN          reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    DEFER           reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    CONTINUE        reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    SELECT          reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    CHANNEL_OP      reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    ASSIGN_OP       reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    RBRACE          reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    CASE            reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)
    DEFAULT         reduce using rule 177 (variable_statement -> VAR ID EQUAL slice_statement .)


state 387

    (178) variable_statement -> VAR ID EQUAL array_statement .

    BREAK           reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    ID              reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    VAR             reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    LBRACKET        reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    IF              reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    FOR             reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    GO              reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    SWITCH          reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    RETURN          reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    DEFER           reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    CONTINUE        reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    SELECT          reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    CHANNEL_OP      reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    ASSIGN_OP       reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    RBRACE          reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    CASE            reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)
    DEFAULT         reduce using rule 178 (variable_statement -> VAR ID EQUAL array_statement .)


state 388

    (180) variable_statement -> VAR ID EQUAL expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    BREAK           reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    ID              reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    VAR             reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    LBRACKET        reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    IF              reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    FOR             reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    GO              reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    SWITCH          reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    RETURN          reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    DEFER           reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    CONTINUE        reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    SELECT          reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    CHANNEL_OP      reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    ASSIGN_OP       reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    RBRACE          reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    CASE            reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    DEFAULT         reduce using rule 180 (variable_statement -> VAR ID EQUAL expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 389

    (179) variable_statement -> VAR ID types EQUAL . expression
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 441
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 390

    (190) map_position -> LBRACKET NUMBER RBRACKET map_position .

    COLON_EQUAL     reduce using rule 190 (map_position -> LBRACKET NUMBER RBRACKET map_position .)
    EQUAL           reduce using rule 190 (map_position -> LBRACKET NUMBER RBRACKET map_position .)


state 391

    (189) map_position -> LBRACKET STRING RBRACKET map_position .

    COLON_EQUAL     reduce using rule 189 (map_position -> LBRACKET STRING RBRACKET map_position .)
    EQUAL           reduce using rule 189 (map_position -> LBRACKET STRING RBRACKET map_position .)


state 392

    (118) if -> IF expression LBRACE content . RBRACE else

    RBRACE          shift and go to state 442


state 393

    (145) for -> FOR LBRACE content RBRACE .

    BREAK           reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    ID              reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    VAR             reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    LBRACKET        reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    IF              reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    FOR             reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    GO              reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    SWITCH          reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    RETURN          reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    DEFER           reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    CONTINUE        reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    SELECT          reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    ASSIGN_OP       reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    RBRACE          reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    CASE            reduce using rule 145 (for -> FOR LBRACE content RBRACE .)
    DEFAULT         reduce using rule 145 (for -> FOR LBRACE content RBRACE .)


state 394

    (199) pointer -> ID LBRACKET . NUMBER RBRACKET
    (200) pointer -> ID LBRACKET . NUMBER COLON NUMBER RBRACKET
    (189) map_position -> LBRACKET . STRING RBRACKET map_position
    (190) map_position -> LBRACKET . NUMBER RBRACKET map_position
    (191) map_position -> LBRACKET . STRING RBRACKET
    (192) map_position -> LBRACKET . NUMBER RBRACKET
    (52) brackets -> LBRACKET . NUMBER RBRACKET brackets
    (53) brackets -> LBRACKET . NUMBER RBRACKET
    (54) brackets -> LBRACKET . STRING RBRACKET brackets
    (55) brackets -> LBRACKET . STRING RBRACKET
    (56) brackets -> LBRACKET . ID RBRACKET
    (57) brackets -> LBRACKET . ID RBRACKET brackets

    NUMBER          shift and go to state 443
    STRING          shift and go to state 444
    ID              shift and go to state 141


state 395

    (146) for -> FOR NOT ID LBRACE . content RBRACE
    (172) collection_statement -> ID LBRACE . collection_types RBRACE
    (166) struct_declaretion -> ID LBRACE . struct_declaretion_values RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (173) collection_types -> . ID
    (174) collection_types -> . ID COMMA collection_types
    (175) collection_types -> . ID COLON value
    (176) collection_types -> . ID COLON value COMMA collection_types
    (167) struct_declaretion_values -> . values
    (168) struct_declaretion_values -> . LBRACE struct_declaretion_values RBRACE
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (72) values -> . value COMMA values
    (73) values -> . value
    (74) values -> . empty
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 445
    LBRACE          shift and go to state 358
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 446
    collection_types               shift and go to state 359
    struct_declaretion_values      shift and go to state 360
    empty                          shift and go to state 447
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    value                          shift and go to state 129
    values                         shift and go to state 361
    map_position                   shift and go to state 165
    function                       shift and go to state 108
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 396

    (149) for -> FOR ID COMMA ID . COLON_EQUAL RANGE ID LBRACE content RBRACE

    COLON_EQUAL     shift and go to state 448


state 397

    (151) for -> FOR ID COLON_EQUAL RANGE . ID LBRACE content RBRACE

    ID              shift and go to state 449


state 398

    (152) for_declaration -> ID COLON_EQUAL NUMBER .

    SEMICOLON       reduce using rule 152 (for_declaration -> ID COLON_EQUAL NUMBER .)


state 399

    (147) for -> FOR expression LBRACE content . RBRACE

    RBRACE          shift and go to state 450


state 400

    (148) for -> FOR for_declaration SEMICOLON expression . SEMICOLON expression LBRACE content RBRACE
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    SEMICOLON       shift and go to state 451
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 401

    (150) for -> FOR UNDERSCORE COMMA ID . COLON_EQUAL RANGE ID LBRACE content RBRACE

    COLON_EQUAL     shift and go to state 452


state 402

    (117) goroutine -> GO lambda LPAREN parameters . RPAREN

    RPAREN          shift and go to state 453


state 403

    (105) switch -> SWITCH ID LBRACE cases_value . default RBRACE
    (112) default -> . DEFAULT COLON content
    (113) default -> . empty
    (219) empty -> .

    DEFAULT         shift and go to state 407
    RBRACE          reduce using rule 219 (empty -> .)

    default                        shift and go to state 454
    empty                          shift and go to state 408

state 404

    (114) cases_value -> CASE . value COLON content cases_value
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 94
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    value                          shift and go to state 455
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 405

    (115) cases_value -> empty .

    DEFAULT         reduce using rule 115 (cases_value -> empty .)
    RBRACE          reduce using rule 115 (cases_value -> empty .)


state 406

    (106) switch -> SWITCH LBRACE cases_rel default . RBRACE

    RBRACE          shift and go to state 456


state 407

    (112) default -> DEFAULT . COLON content

    COLON           shift and go to state 457


state 408

    (113) default -> empty .

    RBRACE          reduce using rule 113 (default -> empty .)


state 409

    (107) cases_rel -> CASE case_condition . COLON content cases_rel

    COLON           shift and go to state 458


state 410

    (109) case_condition -> ID . REL_OP value
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (31) function -> ID . LPAREN parameters RPAREN

    REL_OP          shift and go to state 459
    DOT             shift and go to state 135
    COLON           reduce using rule 208 (callback -> ID .)
    LPAREN          shift and go to state 136


state 411

    (110) case_condition -> boolean .

    COLON           reduce using rule 110 (case_condition -> boolean .)


state 412

    (111) case_condition -> callback .

    COLON           reduce using rule 111 (case_condition -> callback .)


state 413

    (100) select -> SELECT LBRACE select_cases RBRACE .

    BREAK           reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    ID              reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    VAR             reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    LBRACKET        reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    IF              reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    FOR             reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    GO              reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    SWITCH          reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    RETURN          reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    DEFER           reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    CONTINUE        reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    SELECT          reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    CHANNEL_OP      reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    ASSIGN_OP       reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    RBRACE          reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    CASE            reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)
    DEFAULT         reduce using rule 100 (select -> SELECT LBRACE select_cases RBRACE .)


state 414

    (101) select_cases -> CASE expression . COLON content select_cases
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    COLON           shift and go to state 460
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 415

    (102) select_cases -> DEFAULT COLON . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 461
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 416

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE . content RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 462
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 417

    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES . LBRACE content RBRACE

    LBRACE          shift and go to state 463


state 418

    (68) array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values . RBRACE

    RBRACE          shift and go to state 464


state 419

    (18) method_list -> ID LPAREN args RPAREN types method_list .

    RBRACE          reduce using rule 18 (method_list -> ID LPAREN args RPAREN types method_list .)


state 420

    (200) pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .

    ID              reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    RPAREN          reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    COMMA           reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    RBRACE          reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    COLON           reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    ARITH_OP        reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    REL_OP          reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    LOG_OP          reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    POINTER         reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    LBRACE          reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    BREAK           reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    VAR             reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    LBRACKET        reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    IF              reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    FOR             reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    GO              reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    SWITCH          reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    RETURN          reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    DEFER           reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    CONTINUE        reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    SELECT          reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    CHANNEL_OP      reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    ASSIGN_OP       reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    CASE            reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    DEFAULT         reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 200 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)


state 421

    (207) callback -> ID DOT ID LPAREN ID LPAREN . ID RPAREN RPAREN
    (31) function -> ID LPAREN . parameters RPAREN
    (32) parameters -> . expression
    (33) parameters -> . CHAN TYPES
    (34) parameters -> . expression COMMA parameters
    (35) parameters -> . empty
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (219) empty -> .
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

    ID              shift and go to state 465
    CHAN            shift and go to state 194
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    RPAREN          reduce using rule 219 (empty -> .)
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    parameters                     shift and go to state 192
    expression                     shift and go to state 193
    empty                          shift and go to state 195
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108

state 422

    (174) collection_types -> ID COMMA . collection_types
    (173) collection_types -> . ID
    (174) collection_types -> . ID COMMA collection_types
    (175) collection_types -> . ID COLON value
    (176) collection_types -> . ID COLON value COMMA collection_types

    ID              shift and go to state 435

    collection_types               shift and go to state 466

state 423

    (175) collection_types -> ID COLON . value
    (176) collection_types -> ID COLON . value COMMA collection_types
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 94
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    value                          shift and go to state 467
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 424

    (168) struct_declaretion_values -> LBRACE struct_declaretion_values . RBRACE

    RBRACE          shift and go to state 468


state 425

    (214) value -> LBRACE values . RBRACE
    (167) struct_declaretion_values -> values .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 184

  ! RBRACE          [ reduce using rule 167 (struct_declaretion_values -> values .) ]


state 426

    (172) collection_statement -> ID LBRACE collection_types RBRACE .

    COMMA           reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    ARITH_OP        reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    REL_OP          reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    LOG_OP          reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    POINTER         reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    RPAREN          reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    LBRACE          reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    BREAK           reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    ID              reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    VAR             reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    LBRACKET        reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    IF              reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    FOR             reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    GO              reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    SWITCH          reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    RETURN          reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    DEFER           reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    CONTINUE        reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    SELECT          reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    CHANNEL_OP      reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    ASSIGN_OP       reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    RBRACE          reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    CASE            reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    DEFAULT         reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    SEMICOLON       reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)
    COLON           reduce using rule 172 (collection_statement -> ID LBRACE collection_types RBRACE .)


state 427

    (166) struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .

    COMMA           reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    ARITH_OP        reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    REL_OP          reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    LOG_OP          reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    POINTER         reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    RPAREN          reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    LBRACE          reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    BREAK           reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    ID              reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    VAR             reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    LBRACKET        reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    IF              reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    FOR             reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    GO              reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    SWITCH          reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    RETURN          reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    DEFER           reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    CONTINUE        reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    SELECT          reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    CHANNEL_OP      reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    ASSIGN_OP       reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    RBRACE          reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    CASE            reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    DEFAULT         reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    SEMICOLON       reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    COLON           reduce using rule 166 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)


state 428

    (143) collection -> ID LBRACKET ID RBRACKET . DOT ID
    (144) collection -> ID LBRACKET ID RBRACKET .
    (56) brackets -> LBRACKET ID RBRACKET .
    (57) brackets -> LBRACKET ID RBRACKET . brackets
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! reduce/reduce conflict for COLON resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for COMMA resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for ARITH_OP resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for REL_OP resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for POINTER resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for RPAREN resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for LBRACE resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for BREAK resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for ID resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for VAR resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for FOR resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for GO resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for SWITCH resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for DEFER resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for SELECT resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for ASSIGN_OP resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for RBRACE resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 56 (brackets -> LBRACKET ID RBRACKET .)
  ! shift/reduce conflict for LBRACKET resolved as shift
    DOT             shift and go to state 469
    COLON           reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    COMMA           reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    ARITH_OP        reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    REL_OP          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    LOG_OP          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    POINTER         reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    RPAREN          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    LBRACE          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    BREAK           reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    ID              reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    VAR             reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    IF              reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    FOR             reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    GO              reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    SWITCH          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    RETURN          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    DEFER           reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    CONTINUE        reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    SELECT          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    CHANNEL_OP      reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    ASSIGN_OP       reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    RBRACE          reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    CASE            reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    DEFAULT         reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    SEMICOLON       reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .)
    LBRACKET        shift and go to state 304

  ! COMMA           [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! ARITH_OP        [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! REL_OP          [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! LOG_OP          [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! POINTER         [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! RPAREN          [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! LBRACE          [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! BREAK           [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! ID              [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! VAR             [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! LBRACKET        [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! IF              [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! FOR             [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! GO              [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! SWITCH          [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! RETURN          [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! DEFER           [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! CONTINUE        [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! SELECT          [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! CHANNEL_OP      [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! ASSIGN_OP       [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! RBRACE          [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! CASE            [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! DEFAULT         [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! SEMICOLON       [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! COLON           [ reduce using rule 144 (collection -> ID LBRACKET ID RBRACKET .) ]
  ! LBRACKET        [ reduce using rule 56 (brackets -> LBRACKET ID RBRACKET .) ]

    brackets                       shift and go to state 307

state 429

    (160) map -> value COLON value COMMA . map
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (219) empty -> .
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    LBRACE          shift and go to state 296
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    RPAREN          reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    LBRACKET        reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]

    value                          shift and go to state 470
    map                            shift and go to state 471
    empty                          shift and go to state 371
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 430

    (162) map -> value COLON map COMMA . map
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (219) empty -> .
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    LBRACE          shift and go to state 296
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    RPAREN          reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    LBRACKET        reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]

    value                          shift and go to state 470
    map                            shift and go to state 472
    empty                          shift and go to state 371
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 431

    (158) map -> LBRACE map RBRACE COMMA . map
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (219) empty -> .
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    LBRACE          shift and go to state 296
    COMMA           reduce using rule 219 (empty -> .)
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)
    RPAREN          reduce using rule 219 (empty -> .)
    BREAK           reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    LBRACKET        reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    SEMICOLON       reduce using rule 219 (empty -> .)
    COLON           reduce using rule 219 (empty -> .)
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]

    map                            shift and go to state 473
    empty                          shift and go to state 371
    value                          shift and go to state 470
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 432

    (98) lambda -> FUNC LPAREN args RPAREN . types LBRACE content RBRACE
    (99) lambda -> FUNC LPAREN args RPAREN . LBRACE content RBRACE
    (58) types -> . TYPES
    (59) types -> . array_statement
    (60) types -> . pointer_statement
    (61) types -> . slice_statement
    (62) types -> . MAP LBRACKET TYPES RBRACKET
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) pointer_statement -> . POINTER types
    (64) pointer_statement -> . POINTER ID
    (69) slice_statement -> . LBRACKET RBRACKET TYPES
    (70) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    LBRACE          shift and go to state 475
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 474
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 433

    (169) collection_statement -> LBRACKET RBRACKET POINTER ID . LBRACE collection_types RBRACE

    LBRACE          shift and go to state 476


state 434

    (170) collection_statement -> LBRACKET RBRACKET ID LBRACE . collection_types RBRACE
    (173) collection_types -> . ID
    (174) collection_types -> . ID COMMA collection_types
    (175) collection_types -> . ID COLON value
    (176) collection_types -> . ID COLON value COMMA collection_types

    ID              shift and go to state 435

    collection_types               shift and go to state 477

state 435

    (173) collection_types -> ID .
    (174) collection_types -> ID . COMMA collection_types
    (175) collection_types -> ID . COLON value
    (176) collection_types -> ID . COLON value COMMA collection_types

    RBRACE          reduce using rule 173 (collection_types -> ID .)
    COMMA           shift and go to state 422
    COLON           shift and go to state 423


state 436

    (171) collection_statement -> ADDRESS ID LBRACE collection_types . RBRACE

    RBRACE          shift and go to state 478


state 437

    (153) map_statement -> MAP LBRACKET TYPES RBRACKET . map_statement
    (154) map_statement -> MAP LBRACKET TYPES RBRACKET . TYPES LBRACE map RBRACE
    (155) map_statement -> MAP LBRACKET TYPES RBRACKET . TYPES
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES

    TYPES           shift and go to state 479
    MAP             shift and go to state 214

    map_statement                  shift and go to state 480

state 438

    (52) brackets -> LBRACKET NUMBER RBRACKET . brackets
    (53) brackets -> LBRACKET NUMBER RBRACKET .
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACKET resolved as shift
    TYPES           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    COMMA           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    RBRACE          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    COLON           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    ARITH_OP        reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    REL_OP          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    LOG_OP          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    POINTER         reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    LBRACE          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    BREAK           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    VAR             reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    IF              reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    FOR             reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    GO              reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    SWITCH          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    RETURN          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    DEFER           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    CONTINUE        reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    SELECT          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    CHANNEL_OP      reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    ASSIGN_OP       reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    DEFAULT         reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    LBRACKET        shift and go to state 304

  ! LBRACKET        [ reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .) ]

    brackets                       shift and go to state 305

state 439

    (196) variable_redeclaration -> ID DOT ID EQUAL expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    BREAK           reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    ID              reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    VAR             reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    LBRACKET        reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    IF              reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    FOR             reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    GO              reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    SWITCH          reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    RETURN          reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    DEFER           reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    CONTINUE        reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    SELECT          reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    CHANNEL_OP      reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    ASSIGN_OP       reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    RBRACE          reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    CASE            reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    DEFAULT         reduce using rule 196 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 440

    (181) variable_statement -> VAR ID ID EQUAL expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    BREAK           reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    ID              reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    VAR             reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    LBRACKET        reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    IF              reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    FOR             reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    GO              reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    SWITCH          reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    RETURN          reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    DEFER           reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    CONTINUE        reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    SELECT          reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    CHANNEL_OP      reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    ASSIGN_OP       reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    RBRACE          reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    CASE            reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    DEFAULT         reduce using rule 181 (variable_statement -> VAR ID ID EQUAL expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 441

    (179) variable_statement -> VAR ID types EQUAL expression .
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    BREAK           reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    ID              reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    VAR             reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    LBRACKET        reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    IF              reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    FOR             reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    GO              reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    SWITCH          reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    RETURN          reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    DEFER           reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    CONTINUE        reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    SELECT          reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    CHANNEL_OP      reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    ASSIGN_OP       reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    RBRACE          reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    CASE            reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    DEFAULT         reduce using rule 179 (variable_statement -> VAR ID types EQUAL expression .)
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 442

    (118) if -> IF expression LBRACE content RBRACE . else
    (119) else -> . ELSE LBRACE content RBRACE
    (120) else -> . ELSE if
    (121) else -> . empty
    (219) empty -> .

    ELSE            shift and go to state 482
    BREAK           reduce using rule 219 (empty -> .)
    ID              reduce using rule 219 (empty -> .)
    VAR             reduce using rule 219 (empty -> .)
    LBRACKET        reduce using rule 219 (empty -> .)
    IF              reduce using rule 219 (empty -> .)
    FOR             reduce using rule 219 (empty -> .)
    GO              reduce using rule 219 (empty -> .)
    SWITCH          reduce using rule 219 (empty -> .)
    RETURN          reduce using rule 219 (empty -> .)
    DEFER           reduce using rule 219 (empty -> .)
    CONTINUE        reduce using rule 219 (empty -> .)
    SELECT          reduce using rule 219 (empty -> .)
    CHANNEL_OP      reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)

    else                           shift and go to state 481
    empty                          shift and go to state 483

state 443

    (199) pointer -> ID LBRACKET NUMBER . RBRACKET
    (200) pointer -> ID LBRACKET NUMBER . COLON NUMBER RBRACKET
    (190) map_position -> LBRACKET NUMBER . RBRACKET map_position
    (192) map_position -> LBRACKET NUMBER . RBRACKET
    (52) brackets -> LBRACKET NUMBER . RBRACKET brackets
    (53) brackets -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 484
    COLON           shift and go to state 279


state 444

    (189) map_position -> LBRACKET STRING . RBRACKET map_position
    (191) map_position -> LBRACKET STRING . RBRACKET
    (54) brackets -> LBRACKET STRING . RBRACKET brackets
    (55) brackets -> LBRACKET STRING . RBRACKET

    RBRACKET        shift and go to state 485


state 445

    (87) content -> ID . channel content
    (173) collection_types -> ID .
    (174) collection_types -> ID . COMMA collection_types
    (175) collection_types -> ID . COLON value
    (176) collection_types -> ID . COLON value COMMA collection_types
    (183) variable_statement -> ID . map_position EQUAL expression
    (184) variable_statement -> ID . COLON_EQUAL expression
    (186) variable_statement -> ID . COLON_EQUAL slice_statement
    (187) variable_statement -> ID . COLON_EQUAL array_statement
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (193) variable_redeclaration -> ID . EQUAL expression
    (194) variable_redeclaration -> ID . ASSIGN_OP expression
    (196) variable_redeclaration -> ID . DOT ID EQUAL expression
    (201) increment -> ID . INCREMENT
    (202) decrement -> ID . DECREMENT
    (31) function -> ID . LPAREN parameters RPAREN
    (218) map_varible -> ID . brackets
    (199) pointer -> ID . LBRACKET NUMBER RBRACKET
    (200) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! reduce/reduce conflict for RBRACE resolved using rule 173 (collection_types -> ID .)
  ! shift/reduce conflict for ASSIGN_OP resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    RBRACE          reduce using rule 173 (collection_types -> ID .)
    COMMA           shift and go to state 422
    COLON           shift and go to state 423
    COLON_EQUAL     shift and go to state 225
    DOT             shift and go to state 226
    BREAK           reduce using rule 208 (callback -> ID .)
    ID              reduce using rule 208 (callback -> ID .)
    VAR             reduce using rule 208 (callback -> ID .)
    IF              reduce using rule 208 (callback -> ID .)
    FOR             reduce using rule 208 (callback -> ID .)
    GO              reduce using rule 208 (callback -> ID .)
    SWITCH          reduce using rule 208 (callback -> ID .)
    RETURN          reduce using rule 208 (callback -> ID .)
    DEFER           reduce using rule 208 (callback -> ID .)
    CONTINUE        reduce using rule 208 (callback -> ID .)
    SELECT          reduce using rule 208 (callback -> ID .)
    EQUAL           shift and go to state 224
    ASSIGN_OP       shift and go to state 227
    INCREMENT       shift and go to state 228
    DECREMENT       shift and go to state 229
    LPAREN          shift and go to state 136
    LBRACKET        shift and go to state 394
    CHANNEL_OP      shift and go to state 175

  ! ASSIGN_OP       [ reduce using rule 208 (callback -> ID .) ]
  ! LBRACKET        [ reduce using rule 208 (callback -> ID .) ]
  ! CHANNEL_OP      [ reduce using rule 208 (callback -> ID .) ]
  ! RBRACE          [ reduce using rule 208 (callback -> ID .) ]

    channel                        shift and go to state 222
    map_position                   shift and go to state 223
    brackets                       shift and go to state 125

state 446

    (146) for -> FOR NOT ID LBRACE content . RBRACE

    RBRACE          shift and go to state 486


state 447

    (75) content -> empty .
    (211) callback -> empty .
    (165) return -> empty .
    (74) values -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 75 (content -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for GO resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for SWITCH resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for DEFER resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for SELECT resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for ASSIGN_OP resolved using rule 165 (return -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 75 (content -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 74 (values -> empty .)
    BREAK           reduce using rule 165 (return -> empty .)
    ID              reduce using rule 165 (return -> empty .)
    VAR             reduce using rule 165 (return -> empty .)
    LBRACKET        reduce using rule 165 (return -> empty .)
    IF              reduce using rule 165 (return -> empty .)
    FOR             reduce using rule 165 (return -> empty .)
    GO              reduce using rule 165 (return -> empty .)
    SWITCH          reduce using rule 165 (return -> empty .)
    RETURN          reduce using rule 165 (return -> empty .)
    DEFER           reduce using rule 165 (return -> empty .)
    CONTINUE        reduce using rule 165 (return -> empty .)
    SELECT          reduce using rule 165 (return -> empty .)
    CHANNEL_OP      reduce using rule 165 (return -> empty .)
    ASSIGN_OP       reduce using rule 165 (return -> empty .)
    RBRACE          reduce using rule 74 (values -> empty .)

  ! RBRACE          [ reduce using rule 75 (content -> empty .) ]
  ! ASSIGN_OP       [ reduce using rule 211 (callback -> empty .) ]
  ! BREAK           [ reduce using rule 211 (callback -> empty .) ]
  ! ID              [ reduce using rule 211 (callback -> empty .) ]
  ! VAR             [ reduce using rule 211 (callback -> empty .) ]
  ! LBRACKET        [ reduce using rule 211 (callback -> empty .) ]
  ! IF              [ reduce using rule 211 (callback -> empty .) ]
  ! FOR             [ reduce using rule 211 (callback -> empty .) ]
  ! GO              [ reduce using rule 211 (callback -> empty .) ]
  ! SWITCH          [ reduce using rule 211 (callback -> empty .) ]
  ! RETURN          [ reduce using rule 211 (callback -> empty .) ]
  ! DEFER           [ reduce using rule 211 (callback -> empty .) ]
  ! CONTINUE        [ reduce using rule 211 (callback -> empty .) ]
  ! SELECT          [ reduce using rule 211 (callback -> empty .) ]
  ! CHANNEL_OP      [ reduce using rule 211 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 211 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 165 (return -> empty .) ]


state 448

    (149) for -> FOR ID COMMA ID COLON_EQUAL . RANGE ID LBRACE content RBRACE

    RANGE           shift and go to state 487


state 449

    (151) for -> FOR ID COLON_EQUAL RANGE ID . LBRACE content RBRACE

    LBRACE          shift and go to state 488


state 450

    (147) for -> FOR expression LBRACE content RBRACE .

    BREAK           reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    ID              reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    VAR             reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    LBRACKET        reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    IF              reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    FOR             reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    GO              reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    SWITCH          reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    RETURN          reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    DEFER           reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    CONTINUE        reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    SELECT          reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    ASSIGN_OP       reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    RBRACE          reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    CASE            reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)
    DEFAULT         reduce using rule 147 (for -> FOR expression LBRACE content RBRACE .)


state 451

    (148) for -> FOR for_declaration SEMICOLON expression SEMICOLON . expression LBRACE content RBRACE
    (122) expression -> . value
    (123) expression -> . LPAREN expression RPAREN
    (124) expression -> . expression ARITH_OP expression
    (125) expression -> . expression REL_OP expression
    (126) expression -> . expression LOG_OP expression
    (127) expression -> . expression POINTER expression
    (128) expression -> . NOT expression
    (129) expression -> . ID COLON_EQUAL channel
    (130) expression -> . channel
    (131) expression -> . increment
    (132) expression -> . lambda
    (133) expression -> . decrement
    (134) expression -> . struct
    (135) expression -> . collection_statement
    (136) expression -> . callback
    (137) expression -> . struct_declaretion
    (138) expression -> . address_pointer
    (139) expression -> . ID
    (140) expression -> . collection
    (141) expression -> . map_statement
    (142) expression -> . map
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (201) increment -> . ID INCREMENT
    (98) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (99) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (202) decrement -> . ID DECREMENT
    (204) struct -> . ID DOT ID
    (205) struct -> . ID DOT struct
    (169) collection_statement -> . LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE
    (170) collection_statement -> . LBRACKET RBRACKET ID LBRACE collection_types RBRACE
    (171) collection_statement -> . ADDRESS ID LBRACE collection_types RBRACE
    (172) collection_statement -> . ID LBRACE collection_types RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (166) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (203) address_pointer -> . ADDRESS ID
    (143) collection -> . ID LBRACKET ID RBRACKET DOT ID
    (144) collection -> . ID LBRACKET ID RBRACKET
    (153) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (154) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (155) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN
    (219) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LPAREN          shift and go to state 191
    NOT             shift and go to state 197
    ID              shift and go to state 190
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 175
    FUNC            shift and go to state 211
    LBRACKET        shift and go to state 212
    ADDRESS         shift and go to state 213
    MAP             shift and go to state 214
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99
    ARITH_OP        reduce using rule 219 (empty -> .)
    REL_OP          reduce using rule 219 (empty -> .)
    LOG_OP          reduce using rule 219 (empty -> .)
    POINTER         reduce using rule 219 (empty -> .)

  ! LBRACE          [ reduce using rule 219 (empty -> .) ]

    expression                     shift and go to state 489
    value                          shift and go to state 196
    channel                        shift and go to state 198
    increment                      shift and go to state 199
    lambda                         shift and go to state 200
    decrement                      shift and go to state 201
    struct                         shift and go to state 202
    collection_statement           shift and go to state 203
    callback                       shift and go to state 204
    struct_declaretion             shift and go to state 205
    address_pointer                shift and go to state 206
    collection                     shift and go to state 207
    map_statement                  shift and go to state 208
    map                            shift and go to state 209
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97
    function                       shift and go to state 108
    empty                          shift and go to state 254

state 452

    (150) for -> FOR UNDERSCORE COMMA ID COLON_EQUAL . RANGE ID LBRACE content RBRACE

    RANGE           shift and go to state 490


state 453

    (117) goroutine -> GO lambda LPAREN parameters RPAREN .

    BREAK           reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    ID              reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    VAR             reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    LBRACKET        reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    IF              reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    FOR             reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    GO              reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    SWITCH          reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    RETURN          reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    DEFER           reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    CONTINUE        reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    SELECT          reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    CHANNEL_OP      reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    ASSIGN_OP       reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    RBRACE          reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    CASE            reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    DEFAULT         reduce using rule 117 (goroutine -> GO lambda LPAREN parameters RPAREN .)


state 454

    (105) switch -> SWITCH ID LBRACE cases_value default . RBRACE

    RBRACE          shift and go to state 491


state 455

    (114) cases_value -> CASE value . COLON content cases_value

    COLON           shift and go to state 492


state 456

    (106) switch -> SWITCH LBRACE cases_rel default RBRACE .

    BREAK           reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    ID              reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    VAR             reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    LBRACKET        reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    IF              reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    FOR             reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    GO              reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    SWITCH          reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    RETURN          reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    DEFER           reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    CONTINUE        reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    SELECT          reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    CHANNEL_OP      reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    ASSIGN_OP       reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    RBRACE          reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    CASE            reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    DEFAULT         reduce using rule 106 (switch -> SWITCH LBRACE cases_rel default RBRACE .)


state 457

    (112) default -> DEFAULT COLON . content
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 493
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 458

    (107) cases_rel -> CASE case_condition COLON . content cases_rel
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 494
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 459

    (109) case_condition -> ID REL_OP . value
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    LBRACE          shift and go to state 94
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    value                          shift and go to state 495
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 460

    (101) select_cases -> CASE expression COLON . content select_cases
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 496
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 461

    (102) select_cases -> DEFAULT COLON content .

    RBRACE          reduce using rule 102 (select_cases -> DEFAULT COLON content .)


state 462

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content . RBRACE

    RBRACE          shift and go to state 497


state 463

    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE . content RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 498
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 464

    (68) array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .

    FUNC            reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    VAR             reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    TYPE            reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    CONST           reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    $end            reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    COMMA           reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    RPAREN          reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    LBRACE          reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    ID              reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    RBRACE          reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    EQUAL           reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    BREAK           reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    LBRACKET        reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    IF              reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    FOR             reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    GO              reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    SWITCH          reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    RETURN          reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    DEFER           reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    CONTINUE        reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    SELECT          reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    CHANNEL_OP      reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    ASSIGN_OP       reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    CASE            reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    DEFAULT         reduce using rule 68 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)


state 465

    (207) callback -> ID DOT ID LPAREN ID LPAREN ID . RPAREN RPAREN
    (129) expression -> ID . COLON_EQUAL channel
    (139) expression -> ID .
    (201) increment -> ID . INCREMENT
    (202) decrement -> ID . DECREMENT
    (204) struct -> ID . DOT ID
    (205) struct -> ID . DOT struct
    (172) collection_statement -> ID . LBRACE collection_types RBRACE
    (207) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> ID .
    (210) callback -> ID . DOT callback
    (166) struct_declaretion -> ID . LBRACE struct_declaretion_values RBRACE
    (143) collection -> ID . LBRACKET ID RBRACKET DOT ID
    (144) collection -> ID . LBRACKET ID RBRACKET
    (218) map_varible -> ID . brackets
    (199) pointer -> ID . LBRACKET NUMBER RBRACKET
    (200) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (31) function -> ID . LPAREN parameters RPAREN
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for RPAREN resolved as shift
  ! reduce/reduce conflict for COMMA resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for ARITH_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for REL_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 139 (expression -> ID .)
  ! reduce/reduce conflict for POINTER resolved using rule 139 (expression -> ID .)
  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 499
    COLON_EQUAL     shift and go to state 282
    COMMA           reduce using rule 139 (expression -> ID .)
    ARITH_OP        reduce using rule 139 (expression -> ID .)
    REL_OP          reduce using rule 139 (expression -> ID .)
    LOG_OP          reduce using rule 139 (expression -> ID .)
    POINTER         reduce using rule 139 (expression -> ID .)
    INCREMENT       shift and go to state 228
    DECREMENT       shift and go to state 229
    DOT             shift and go to state 283
    LBRACE          shift and go to state 284
    LBRACKET        shift and go to state 285
    LPAREN          shift and go to state 136

  ! RPAREN          [ reduce using rule 139 (expression -> ID .) ]
  ! COMMA           [ reduce using rule 208 (callback -> ID .) ]
  ! ARITH_OP        [ reduce using rule 208 (callback -> ID .) ]
  ! REL_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! LOG_OP          [ reduce using rule 208 (callback -> ID .) ]
  ! POINTER         [ reduce using rule 208 (callback -> ID .) ]
  ! RPAREN          [ reduce using rule 208 (callback -> ID .) ]

    brackets                       shift and go to state 125

state 466

    (174) collection_types -> ID COMMA collection_types .

    RBRACE          reduce using rule 174 (collection_types -> ID COMMA collection_types .)


state 467

    (175) collection_types -> ID COLON value .
    (176) collection_types -> ID COLON value . COMMA collection_types

    RBRACE          reduce using rule 175 (collection_types -> ID COLON value .)
    COMMA           shift and go to state 500


state 468

    (168) struct_declaretion_values -> LBRACE struct_declaretion_values RBRACE .

    RBRACE          reduce using rule 168 (struct_declaretion_values -> LBRACE struct_declaretion_values RBRACE .)


state 469

    (143) collection -> ID LBRACKET ID RBRACKET DOT . ID

    ID              shift and go to state 501


state 470

    (159) map -> value . COLON value
    (160) map -> value . COLON value COMMA map
    (161) map -> value . COLON map
    (162) map -> value . COLON map COMMA map

    COLON           shift and go to state 294


state 471

    (160) map -> value COLON value COMMA map .

    COMMA           reduce using rule 160 (map -> value COLON value COMMA map .)
    ARITH_OP        reduce using rule 160 (map -> value COLON value COMMA map .)
    REL_OP          reduce using rule 160 (map -> value COLON value COMMA map .)
    LOG_OP          reduce using rule 160 (map -> value COLON value COMMA map .)
    POINTER         reduce using rule 160 (map -> value COLON value COMMA map .)
    RPAREN          reduce using rule 160 (map -> value COLON value COMMA map .)
    LBRACE          reduce using rule 160 (map -> value COLON value COMMA map .)
    BREAK           reduce using rule 160 (map -> value COLON value COMMA map .)
    ID              reduce using rule 160 (map -> value COLON value COMMA map .)
    VAR             reduce using rule 160 (map -> value COLON value COMMA map .)
    LBRACKET        reduce using rule 160 (map -> value COLON value COMMA map .)
    IF              reduce using rule 160 (map -> value COLON value COMMA map .)
    FOR             reduce using rule 160 (map -> value COLON value COMMA map .)
    GO              reduce using rule 160 (map -> value COLON value COMMA map .)
    SWITCH          reduce using rule 160 (map -> value COLON value COMMA map .)
    RETURN          reduce using rule 160 (map -> value COLON value COMMA map .)
    DEFER           reduce using rule 160 (map -> value COLON value COMMA map .)
    CONTINUE        reduce using rule 160 (map -> value COLON value COMMA map .)
    SELECT          reduce using rule 160 (map -> value COLON value COMMA map .)
    CHANNEL_OP      reduce using rule 160 (map -> value COLON value COMMA map .)
    ASSIGN_OP       reduce using rule 160 (map -> value COLON value COMMA map .)
    RBRACE          reduce using rule 160 (map -> value COLON value COMMA map .)
    CASE            reduce using rule 160 (map -> value COLON value COMMA map .)
    DEFAULT         reduce using rule 160 (map -> value COLON value COMMA map .)
    SEMICOLON       reduce using rule 160 (map -> value COLON value COMMA map .)
    COLON           reduce using rule 160 (map -> value COLON value COMMA map .)


state 472

    (162) map -> value COLON map COMMA map .

    COMMA           reduce using rule 162 (map -> value COLON map COMMA map .)
    ARITH_OP        reduce using rule 162 (map -> value COLON map COMMA map .)
    REL_OP          reduce using rule 162 (map -> value COLON map COMMA map .)
    LOG_OP          reduce using rule 162 (map -> value COLON map COMMA map .)
    POINTER         reduce using rule 162 (map -> value COLON map COMMA map .)
    RPAREN          reduce using rule 162 (map -> value COLON map COMMA map .)
    LBRACE          reduce using rule 162 (map -> value COLON map COMMA map .)
    BREAK           reduce using rule 162 (map -> value COLON map COMMA map .)
    ID              reduce using rule 162 (map -> value COLON map COMMA map .)
    VAR             reduce using rule 162 (map -> value COLON map COMMA map .)
    LBRACKET        reduce using rule 162 (map -> value COLON map COMMA map .)
    IF              reduce using rule 162 (map -> value COLON map COMMA map .)
    FOR             reduce using rule 162 (map -> value COLON map COMMA map .)
    GO              reduce using rule 162 (map -> value COLON map COMMA map .)
    SWITCH          reduce using rule 162 (map -> value COLON map COMMA map .)
    RETURN          reduce using rule 162 (map -> value COLON map COMMA map .)
    DEFER           reduce using rule 162 (map -> value COLON map COMMA map .)
    CONTINUE        reduce using rule 162 (map -> value COLON map COMMA map .)
    SELECT          reduce using rule 162 (map -> value COLON map COMMA map .)
    CHANNEL_OP      reduce using rule 162 (map -> value COLON map COMMA map .)
    ASSIGN_OP       reduce using rule 162 (map -> value COLON map COMMA map .)
    RBRACE          reduce using rule 162 (map -> value COLON map COMMA map .)
    CASE            reduce using rule 162 (map -> value COLON map COMMA map .)
    DEFAULT         reduce using rule 162 (map -> value COLON map COMMA map .)
    SEMICOLON       reduce using rule 162 (map -> value COLON map COMMA map .)
    COLON           reduce using rule 162 (map -> value COLON map COMMA map .)


state 473

    (158) map -> LBRACE map RBRACE COMMA map .

    COMMA           reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    ARITH_OP        reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    REL_OP          reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    LOG_OP          reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    POINTER         reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    RPAREN          reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    LBRACE          reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    BREAK           reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    ID              reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    VAR             reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    LBRACKET        reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    IF              reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    FOR             reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    GO              reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    SWITCH          reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    RETURN          reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    DEFER           reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    CONTINUE        reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    SELECT          reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    CHANNEL_OP      reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    ASSIGN_OP       reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    RBRACE          reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    CASE            reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    DEFAULT         reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    SEMICOLON       reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)
    COLON           reduce using rule 158 (map -> LBRACE map RBRACE COMMA map .)


state 474

    (98) lambda -> FUNC LPAREN args RPAREN types . LBRACE content RBRACE

    LBRACE          shift and go to state 502


state 475

    (99) lambda -> FUNC LPAREN args RPAREN LBRACE . content RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 503
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 476

    (169) collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE . collection_types RBRACE
    (173) collection_types -> . ID
    (174) collection_types -> . ID COMMA collection_types
    (175) collection_types -> . ID COLON value
    (176) collection_types -> . ID COLON value COMMA collection_types

    ID              shift and go to state 435

    collection_types               shift and go to state 504

state 477

    (170) collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types . RBRACE

    RBRACE          shift and go to state 505


state 478

    (171) collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .

    COMMA           reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    ARITH_OP        reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    REL_OP          reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    LOG_OP          reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    POINTER         reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    RPAREN          reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    LBRACE          reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    BREAK           reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    ID              reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    VAR             reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    LBRACKET        reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    IF              reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    FOR             reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    GO              reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    SWITCH          reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    RETURN          reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    DEFER           reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    CONTINUE        reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    SELECT          reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    CHANNEL_OP      reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    ASSIGN_OP       reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    RBRACE          reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    CASE            reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    DEFAULT         reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    SEMICOLON       reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)
    COLON           reduce using rule 171 (collection_statement -> ADDRESS ID LBRACE collection_types RBRACE .)


state 479

    (154) map_statement -> MAP LBRACKET TYPES RBRACKET TYPES . LBRACE map RBRACE
    (155) map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 506
    COMMA           reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    ARITH_OP        reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    REL_OP          reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    LOG_OP          reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    POINTER         reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    RPAREN          reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    BREAK           reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    ID              reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    VAR             reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    LBRACKET        reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    IF              reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    FOR             reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    GO              reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    SWITCH          reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    RETURN          reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    DEFER           reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    CONTINUE        reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    SELECT          reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    CHANNEL_OP      reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    ASSIGN_OP       reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    RBRACE          reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    CASE            reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    DEFAULT         reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    SEMICOLON       reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    COLON           reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)

  ! LBRACE          [ reduce using rule 155 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .) ]


state 480

    (153) map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .

    COMMA           reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    ARITH_OP        reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    REL_OP          reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    LOG_OP          reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    POINTER         reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    RPAREN          reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    LBRACE          reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    BREAK           reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    ID              reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    VAR             reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    LBRACKET        reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    IF              reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    FOR             reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    GO              reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    SWITCH          reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    RETURN          reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    DEFER           reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    CONTINUE        reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    SELECT          reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    CHANNEL_OP      reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    ASSIGN_OP       reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    RBRACE          reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    CASE            reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    DEFAULT         reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    SEMICOLON       reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    COLON           reduce using rule 153 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)


state 481

    (118) if -> IF expression LBRACE content RBRACE else .

    BREAK           reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    ID              reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    VAR             reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    LBRACKET        reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    IF              reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    FOR             reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    GO              reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    SWITCH          reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    RETURN          reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    DEFER           reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    CONTINUE        reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    SELECT          reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    CHANNEL_OP      reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    ASSIGN_OP       reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    RBRACE          reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    CASE            reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)
    DEFAULT         reduce using rule 118 (if -> IF expression LBRACE content RBRACE else .)


state 482

    (119) else -> ELSE . LBRACE content RBRACE
    (120) else -> ELSE . if
    (118) if -> . IF expression LBRACE content RBRACE else

    LBRACE          shift and go to state 507
    IF              shift and go to state 167

    if                             shift and go to state 508

state 483

    (121) else -> empty .

    BREAK           reduce using rule 121 (else -> empty .)
    ID              reduce using rule 121 (else -> empty .)
    VAR             reduce using rule 121 (else -> empty .)
    LBRACKET        reduce using rule 121 (else -> empty .)
    IF              reduce using rule 121 (else -> empty .)
    FOR             reduce using rule 121 (else -> empty .)
    GO              reduce using rule 121 (else -> empty .)
    SWITCH          reduce using rule 121 (else -> empty .)
    RETURN          reduce using rule 121 (else -> empty .)
    DEFER           reduce using rule 121 (else -> empty .)
    CONTINUE        reduce using rule 121 (else -> empty .)
    SELECT          reduce using rule 121 (else -> empty .)
    CHANNEL_OP      reduce using rule 121 (else -> empty .)
    ASSIGN_OP       reduce using rule 121 (else -> empty .)
    RBRACE          reduce using rule 121 (else -> empty .)
    CASE            reduce using rule 121 (else -> empty .)
    DEFAULT         reduce using rule 121 (else -> empty .)


state 484

    (199) pointer -> ID LBRACKET NUMBER RBRACKET .
    (190) map_position -> LBRACKET NUMBER RBRACKET . map_position
    (192) map_position -> LBRACKET NUMBER RBRACKET .
    (52) brackets -> LBRACKET NUMBER RBRACKET . brackets
    (53) brackets -> LBRACKET NUMBER RBRACKET .
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

  ! reduce/reduce conflict for COMMA resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for COLON resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for RBRACE resolved using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    EQUAL           reduce using rule 192 (map_position -> LBRACKET NUMBER RBRACKET .)
    COMMA           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    COLON           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    RBRACE          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    LBRACKET        shift and go to state 509

  ! COMMA           [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! COLON           [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! RBRACE          [ reduce using rule 199 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]

    map_position                   shift and go to state 390
    brackets                       shift and go to state 305

state 485

    (189) map_position -> LBRACKET STRING RBRACKET . map_position
    (191) map_position -> LBRACKET STRING RBRACKET .
    (54) brackets -> LBRACKET STRING RBRACKET . brackets
    (55) brackets -> LBRACKET STRING RBRACKET .
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

    EQUAL           reduce using rule 191 (map_position -> LBRACKET STRING RBRACKET .)
    COMMA           reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    COLON           reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    RBRACE          reduce using rule 55 (brackets -> LBRACKET STRING RBRACKET .)
    LBRACKET        shift and go to state 509

    map_position                   shift and go to state 391
    brackets                       shift and go to state 306

state 486

    (146) for -> FOR NOT ID LBRACE content RBRACE .

    BREAK           reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    ID              reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    VAR             reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    LBRACKET        reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    IF              reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    FOR             reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    GO              reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    SWITCH          reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    RETURN          reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    DEFER           reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    CONTINUE        reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    SELECT          reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    ASSIGN_OP       reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    RBRACE          reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    CASE            reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)
    DEFAULT         reduce using rule 146 (for -> FOR NOT ID LBRACE content RBRACE .)


state 487

    (149) for -> FOR ID COMMA ID COLON_EQUAL RANGE . ID LBRACE content RBRACE

    ID              shift and go to state 510


state 488

    (151) for -> FOR ID COLON_EQUAL RANGE ID LBRACE . content RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 511
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 489

    (148) for -> FOR for_declaration SEMICOLON expression SEMICOLON expression . LBRACE content RBRACE
    (124) expression -> expression . ARITH_OP expression
    (125) expression -> expression . REL_OP expression
    (126) expression -> expression . LOG_OP expression
    (127) expression -> expression . POINTER expression

    LBRACE          shift and go to state 512
    ARITH_OP        shift and go to state 289
    REL_OP          shift and go to state 290
    LOG_OP          shift and go to state 291
    POINTER         shift and go to state 292


state 490

    (150) for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE . ID LBRACE content RBRACE

    ID              shift and go to state 513


state 491

    (105) switch -> SWITCH ID LBRACE cases_value default RBRACE .

    BREAK           reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    ID              reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    VAR             reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    LBRACKET        reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    IF              reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    FOR             reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    GO              reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    SWITCH          reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    RETURN          reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    DEFER           reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    CONTINUE        reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    SELECT          reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    CHANNEL_OP      reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    ASSIGN_OP       reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    RBRACE          reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    CASE            reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    DEFAULT         reduce using rule 105 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)


state 492

    (114) cases_value -> CASE value COLON . content cases_value
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    CASE            reduce using rule 219 (empty -> .)
    DEFAULT         reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 514
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 493

    (112) default -> DEFAULT COLON content .

    RBRACE          reduce using rule 112 (default -> DEFAULT COLON content .)


state 494

    (107) cases_rel -> CASE case_condition COLON content . cases_rel
    (107) cases_rel -> . CASE case_condition COLON content cases_rel
    (108) cases_rel -> . empty
    (219) empty -> .

    CASE            shift and go to state 341
    DEFAULT         reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)

    cases_rel                      shift and go to state 515
    empty                          shift and go to state 342

state 495

    (109) case_condition -> ID REL_OP value .

    COLON           reduce using rule 109 (case_condition -> ID REL_OP value .)


state 496

    (101) select_cases -> CASE expression COLON content . select_cases
    (101) select_cases -> . CASE expression COLON content select_cases
    (102) select_cases -> . DEFAULT COLON content
    (103) select_cases -> . empty
    (219) empty -> .

    CASE            shift and go to state 344
    DEFAULT         shift and go to state 345
    RBRACE          reduce using rule 219 (empty -> .)

    select_cases                   shift and go to state 516
    empty                          shift and go to state 346

state 497

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE .

    FUNC            reduce using rule 20 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE .)
    VAR             reduce using rule 20 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE .)
    TYPE            reduce using rule 20 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE .)
    CONST           reduce using rule 20 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE .)
    $end            reduce using rule 20 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE .)


state 498

    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content . RBRACE

    RBRACE          shift and go to state 517


state 499

    (207) callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN . RPAREN

    RPAREN          shift and go to state 518


state 500

    (176) collection_types -> ID COLON value COMMA . collection_types
    (173) collection_types -> . ID
    (174) collection_types -> . ID COMMA collection_types
    (175) collection_types -> . ID COLON value
    (176) collection_types -> . ID COLON value COMMA collection_types

    ID              shift and go to state 435

    collection_types               shift and go to state 519

state 501

    (143) collection -> ID LBRACKET ID RBRACKET DOT ID .

    COMMA           reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    ARITH_OP        reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    REL_OP          reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    LOG_OP          reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    POINTER         reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    RPAREN          reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    LBRACE          reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    BREAK           reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    ID              reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    VAR             reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    LBRACKET        reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    IF              reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    FOR             reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    GO              reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    SWITCH          reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    RETURN          reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    DEFER           reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    CONTINUE        reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    SELECT          reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    CHANNEL_OP      reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    ASSIGN_OP       reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    RBRACE          reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    CASE            reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    DEFAULT         reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    SEMICOLON       reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)
    COLON           reduce using rule 143 (collection -> ID LBRACKET ID RBRACKET DOT ID .)


state 502

    (98) lambda -> FUNC LPAREN args RPAREN types LBRACE . content RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 520
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 503

    (99) lambda -> FUNC LPAREN args RPAREN LBRACE content . RBRACE

    RBRACE          shift and go to state 521


state 504

    (169) collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types . RBRACE

    RBRACE          shift and go to state 522


state 505

    (170) collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .

    COMMA           reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    ARITH_OP        reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    REL_OP          reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    LOG_OP          reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    POINTER         reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    RPAREN          reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    LBRACE          reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    BREAK           reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    ID              reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    VAR             reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    LBRACKET        reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    IF              reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    FOR             reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    GO              reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    SWITCH          reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    RETURN          reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    DEFER           reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    CONTINUE        reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    SELECT          reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    CHANNEL_OP      reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    ASSIGN_OP       reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    RBRACE          reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    CASE            reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    DEFAULT         reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    SEMICOLON       reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)
    COLON           reduce using rule 170 (collection_statement -> LBRACKET RBRACKET ID LBRACE collection_types RBRACE .)


state 506

    (154) map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE . map RBRACE
    (156) map -> . empty
    (157) map -> . LBRACE map RBRACE
    (158) map -> . LBRACE map RBRACE COMMA map
    (159) map -> . value COLON value
    (160) map -> . value COLON value COMMA map
    (161) map -> . value COLON map
    (162) map -> . value COLON map COMMA map
    (219) empty -> .
    (212) value -> . NUMBER
    (213) value -> . STRING
    (214) value -> . LBRACE values RBRACE
    (215) value -> . map_varible
    (216) value -> . boolean
    (217) value -> . pointer
    (218) map_varible -> . ID brackets
    (197) boolean -> . FALSE
    (198) boolean -> . TRUE
    (199) pointer -> . ID LBRACKET NUMBER RBRACKET
    (200) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    LBRACE          shift and go to state 296
    RBRACE          reduce using rule 219 (empty -> .)
    NUMBER          shift and go to state 92
    STRING          shift and go to state 93
    ID              shift and go to state 90
    FALSE           shift and go to state 98
    TRUE            shift and go to state 99

    map                            shift and go to state 523
    empty                          shift and go to state 371
    value                          shift and go to state 470
    map_varible                    shift and go to state 95
    boolean                        shift and go to state 96
    pointer                        shift and go to state 97

state 507

    (119) else -> ELSE LBRACE . content RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 524
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 508

    (120) else -> ELSE if .

    BREAK           reduce using rule 120 (else -> ELSE if .)
    ID              reduce using rule 120 (else -> ELSE if .)
    VAR             reduce using rule 120 (else -> ELSE if .)
    LBRACKET        reduce using rule 120 (else -> ELSE if .)
    IF              reduce using rule 120 (else -> ELSE if .)
    FOR             reduce using rule 120 (else -> ELSE if .)
    GO              reduce using rule 120 (else -> ELSE if .)
    SWITCH          reduce using rule 120 (else -> ELSE if .)
    RETURN          reduce using rule 120 (else -> ELSE if .)
    DEFER           reduce using rule 120 (else -> ELSE if .)
    CONTINUE        reduce using rule 120 (else -> ELSE if .)
    SELECT          reduce using rule 120 (else -> ELSE if .)
    CHANNEL_OP      reduce using rule 120 (else -> ELSE if .)
    ASSIGN_OP       reduce using rule 120 (else -> ELSE if .)
    RBRACE          reduce using rule 120 (else -> ELSE if .)
    CASE            reduce using rule 120 (else -> ELSE if .)
    DEFAULT         reduce using rule 120 (else -> ELSE if .)


state 509

    (189) map_position -> LBRACKET . STRING RBRACKET map_position
    (190) map_position -> LBRACKET . NUMBER RBRACKET map_position
    (191) map_position -> LBRACKET . STRING RBRACKET
    (192) map_position -> LBRACKET . NUMBER RBRACKET
    (52) brackets -> LBRACKET . NUMBER RBRACKET brackets
    (53) brackets -> LBRACKET . NUMBER RBRACKET
    (54) brackets -> LBRACKET . STRING RBRACKET brackets
    (55) brackets -> LBRACKET . STRING RBRACKET
    (56) brackets -> LBRACKET . ID RBRACKET
    (57) brackets -> LBRACKET . ID RBRACKET brackets

    STRING          shift and go to state 444
    NUMBER          shift and go to state 525
    ID              shift and go to state 141


state 510

    (149) for -> FOR ID COMMA ID COLON_EQUAL RANGE ID . LBRACE content RBRACE

    LBRACE          shift and go to state 526


state 511

    (151) for -> FOR ID COLON_EQUAL RANGE ID LBRACE content . RBRACE

    RBRACE          shift and go to state 527


state 512

    (148) for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE . content RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 528
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 513

    (150) for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID . LBRACE content RBRACE

    LBRACE          shift and go to state 529


state 514

    (114) cases_value -> CASE value COLON content . cases_value
    (114) cases_value -> . CASE value COLON content cases_value
    (115) cases_value -> . empty
    (219) empty -> .

    CASE            shift and go to state 404
    DEFAULT         reduce using rule 219 (empty -> .)
    RBRACE          reduce using rule 219 (empty -> .)

    cases_value                    shift and go to state 530
    empty                          shift and go to state 405

state 515

    (107) cases_rel -> CASE case_condition COLON content cases_rel .

    DEFAULT         reduce using rule 107 (cases_rel -> CASE case_condition COLON content cases_rel .)
    RBRACE          reduce using rule 107 (cases_rel -> CASE case_condition COLON content cases_rel .)


state 516

    (101) select_cases -> CASE expression COLON content select_cases .

    RBRACE          reduce using rule 101 (select_cases -> CASE expression COLON content select_cases .)


state 517

    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE .

    FUNC            reduce using rule 21 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE .)
    VAR             reduce using rule 21 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE .)
    TYPE            reduce using rule 21 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE .)
    CONST           reduce using rule 21 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE .)
    $end            reduce using rule 21 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE .)


state 518

    (207) callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .

    RPAREN          reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    ASSIGN_OP       reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    BREAK           reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    ID              reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    VAR             reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    LBRACKET        reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    IF              reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    FOR             reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    GO              reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    SWITCH          reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    RETURN          reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    DEFER           reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    CONTINUE        reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    SELECT          reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    CHANNEL_OP      reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    RBRACE          reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    COMMA           reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    ARITH_OP        reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    REL_OP          reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    LOG_OP          reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    POINTER         reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    CASE            reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    DEFAULT         reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    LBRACE          reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    SEMICOLON       reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    COLON           reduce using rule 207 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)


state 519

    (176) collection_types -> ID COLON value COMMA collection_types .

    RBRACE          reduce using rule 176 (collection_types -> ID COLON value COMMA collection_types .)


state 520

    (98) lambda -> FUNC LPAREN args RPAREN types LBRACE content . RBRACE

    RBRACE          shift and go to state 531


state 521

    (99) lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .

    COMMA           reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    ARITH_OP        reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    REL_OP          reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    LOG_OP          reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    POINTER         reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    RPAREN          reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    LBRACE          reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    LPAREN          reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    BREAK           reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    ID              reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    VAR             reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    LBRACKET        reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    IF              reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    FOR             reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    GO              reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    SWITCH          reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    RETURN          reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    DEFER           reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    CONTINUE        reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    SELECT          reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    ASSIGN_OP       reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    RBRACE          reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    CASE            reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    DEFAULT         reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    SEMICOLON       reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    COLON           reduce using rule 99 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)


state 522

    (169) collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .

    COMMA           reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    ARITH_OP        reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    REL_OP          reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    LOG_OP          reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    POINTER         reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    RPAREN          reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    LBRACE          reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    BREAK           reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    ID              reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    VAR             reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    LBRACKET        reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    IF              reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    FOR             reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    GO              reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    SWITCH          reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    RETURN          reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    DEFER           reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    CONTINUE        reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    SELECT          reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    CHANNEL_OP      reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    ASSIGN_OP       reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    RBRACE          reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    CASE            reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    DEFAULT         reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    SEMICOLON       reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)
    COLON           reduce using rule 169 (collection_statement -> LBRACKET RBRACKET POINTER ID LBRACE collection_types RBRACE .)


state 523

    (154) map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map . RBRACE

    RBRACE          shift and go to state 532


state 524

    (119) else -> ELSE LBRACE content . RBRACE

    RBRACE          shift and go to state 533


state 525

    (190) map_position -> LBRACKET NUMBER . RBRACKET map_position
    (192) map_position -> LBRACKET NUMBER . RBRACKET
    (52) brackets -> LBRACKET NUMBER . RBRACKET brackets
    (53) brackets -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 534


state 526

    (149) for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE . content RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 535
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 527

    (151) for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .

    BREAK           reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    ID              reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    VAR             reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    LBRACKET        reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    IF              reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    FOR             reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    GO              reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    SWITCH          reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    RETURN          reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    DEFER           reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CONTINUE        reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    SELECT          reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    ASSIGN_OP       reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    RBRACE          reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CASE            reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    DEFAULT         reduce using rule 151 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)


state 528

    (148) for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content . RBRACE

    RBRACE          shift and go to state 536


state 529

    (150) for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE . content RBRACE
    (75) content -> . empty
    (76) content -> . variable_statement content
    (77) content -> . array_statement content
    (78) content -> . callback content
    (79) content -> . variable_redeclaration content
    (80) content -> . if content
    (81) content -> . for content
    (82) content -> . BREAK content
    (83) content -> . goroutine content
    (84) content -> . increment content
    (85) content -> . decrement content
    (86) content -> . switch content
    (87) content -> . ID channel content
    (88) content -> . return content
    (89) content -> . defer content
    (90) content -> . continue content
    (91) content -> . select content
    (92) content -> . channel content
    (219) empty -> .
    (177) variable_statement -> . VAR ID EQUAL slice_statement
    (178) variable_statement -> . VAR ID EQUAL array_statement
    (179) variable_statement -> . VAR ID types EQUAL expression
    (180) variable_statement -> . VAR ID EQUAL expression
    (181) variable_statement -> . VAR ID ID EQUAL expression
    (182) variable_statement -> . VAR ID callback
    (183) variable_statement -> . ID map_position EQUAL expression
    (184) variable_statement -> . ID COLON_EQUAL expression
    (185) variable_statement -> . map_position COLON_EQUAL expression
    (186) variable_statement -> . ID COLON_EQUAL slice_statement
    (187) variable_statement -> . ID COLON_EQUAL array_statement
    (188) variable_statement -> . VAR ID TYPES
    (65) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (66) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (67) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (68) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (206) callback -> . function
    (207) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (208) callback -> . ID
    (209) callback -> . function DOT callback
    (210) callback -> . ID DOT callback
    (211) callback -> . empty
    (193) variable_redeclaration -> . ID EQUAL expression
    (194) variable_redeclaration -> . ID ASSIGN_OP expression
    (195) variable_redeclaration -> . callback ASSIGN_OP expression
    (196) variable_redeclaration -> . ID DOT ID EQUAL expression
    (118) if -> . IF expression LBRACE content RBRACE else
    (145) for -> . FOR LBRACE content RBRACE
    (146) for -> . FOR NOT ID LBRACE content RBRACE
    (147) for -> . FOR expression LBRACE content RBRACE
    (148) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (149) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (150) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (151) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) goroutine -> . GO callback
    (117) goroutine -> . GO lambda LPAREN parameters RPAREN
    (201) increment -> . ID INCREMENT
    (202) decrement -> . ID DECREMENT
    (105) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (106) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (163) return -> . RETURN
    (164) return -> . RETURN expression
    (165) return -> . empty
    (104) defer -> . DEFER callback
    (93) continue -> . CONTINUE
    (100) select -> . SELECT LBRACE select_cases RBRACE
    (94) channel -> . CHANNEL_OP value
    (95) channel -> . CHANNEL_OP ID
    (96) channel -> . CHANNEL_OP callback
    (97) channel -> . CHANNEL_OP struct_declaretion
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (31) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 154
    ID              shift and go to state 145
    RBRACE          reduce using rule 219 (empty -> .)
    ASSIGN_OP       reduce using rule 219 (empty -> .)
    VAR             shift and go to state 164
    LBRACKET        shift and go to state 166
    IF              shift and go to state 167
    FOR             shift and go to state 168
    GO              shift and go to state 169
    SWITCH          shift and go to state 170
    RETURN          shift and go to state 171
    DEFER           shift and go to state 172
    CONTINUE        shift and go to state 173
    SELECT          shift and go to state 174
    CHANNEL_OP      shift and go to state 175

  ! BREAK           [ reduce using rule 219 (empty -> .) ]
  ! ID              [ reduce using rule 219 (empty -> .) ]
  ! VAR             [ reduce using rule 219 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 219 (empty -> .) ]
  ! IF              [ reduce using rule 219 (empty -> .) ]
  ! FOR             [ reduce using rule 219 (empty -> .) ]
  ! GO              [ reduce using rule 219 (empty -> .) ]
  ! SWITCH          [ reduce using rule 219 (empty -> .) ]
  ! RETURN          [ reduce using rule 219 (empty -> .) ]
  ! DEFER           [ reduce using rule 219 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 219 (empty -> .) ]
  ! SELECT          [ reduce using rule 219 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 219 (empty -> .) ]

    content                        shift and go to state 537
    empty                          shift and go to state 147
    variable_statement             shift and go to state 148
    array_statement                shift and go to state 149
    callback                       shift and go to state 150
    variable_redeclaration         shift and go to state 151
    if                             shift and go to state 152
    for                            shift and go to state 153
    goroutine                      shift and go to state 155
    increment                      shift and go to state 156
    decrement                      shift and go to state 157
    switch                         shift and go to state 158
    channel                        shift and go to state 159
    return                         shift and go to state 160
    defer                          shift and go to state 161
    continue                       shift and go to state 162
    select                         shift and go to state 163
    map_position                   shift and go to state 165
    function                       shift and go to state 108

state 530

    (114) cases_value -> CASE value COLON content cases_value .

    DEFAULT         reduce using rule 114 (cases_value -> CASE value COLON content cases_value .)
    RBRACE          reduce using rule 114 (cases_value -> CASE value COLON content cases_value .)


state 531

    (98) lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .

    COMMA           reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    ARITH_OP        reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    REL_OP          reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    LOG_OP          reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    POINTER         reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    RPAREN          reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    LBRACE          reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    LPAREN          reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    BREAK           reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    ID              reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    VAR             reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    LBRACKET        reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    IF              reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    FOR             reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    GO              reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    SWITCH          reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    RETURN          reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    DEFER           reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    CONTINUE        reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    SELECT          reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    ASSIGN_OP       reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    RBRACE          reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    CASE            reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    DEFAULT         reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    SEMICOLON       reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    COLON           reduce using rule 98 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)


state 532

    (154) map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .

    COMMA           reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    ARITH_OP        reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    REL_OP          reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    LOG_OP          reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    POINTER         reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    RPAREN          reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    LBRACE          reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    BREAK           reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    ID              reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    VAR             reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    LBRACKET        reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    IF              reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    FOR             reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    GO              reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    SWITCH          reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    RETURN          reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    DEFER           reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    CONTINUE        reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    SELECT          reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    CHANNEL_OP      reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    ASSIGN_OP       reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    RBRACE          reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    CASE            reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    DEFAULT         reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    SEMICOLON       reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    COLON           reduce using rule 154 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)


state 533

    (119) else -> ELSE LBRACE content RBRACE .

    BREAK           reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    ID              reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    VAR             reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    LBRACKET        reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    IF              reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    FOR             reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    GO              reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    SWITCH          reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    RETURN          reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    DEFER           reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    CONTINUE        reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    SELECT          reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    ASSIGN_OP       reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    RBRACE          reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    CASE            reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)
    DEFAULT         reduce using rule 119 (else -> ELSE LBRACE content RBRACE .)


state 534

    (190) map_position -> LBRACKET NUMBER RBRACKET . map_position
    (192) map_position -> LBRACKET NUMBER RBRACKET .
    (52) brackets -> LBRACKET NUMBER RBRACKET . brackets
    (53) brackets -> LBRACKET NUMBER RBRACKET .
    (189) map_position -> . LBRACKET STRING RBRACKET map_position
    (190) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (191) map_position -> . LBRACKET STRING RBRACKET
    (192) map_position -> . LBRACKET NUMBER RBRACKET
    (52) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (53) brackets -> . LBRACKET NUMBER RBRACKET
    (54) brackets -> . LBRACKET STRING RBRACKET brackets
    (55) brackets -> . LBRACKET STRING RBRACKET
    (56) brackets -> . LBRACKET ID RBRACKET
    (57) brackets -> . LBRACKET ID RBRACKET brackets

    EQUAL           reduce using rule 192 (map_position -> LBRACKET NUMBER RBRACKET .)
    COMMA           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    COLON           reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    RBRACE          reduce using rule 53 (brackets -> LBRACKET NUMBER RBRACKET .)
    LBRACKET        shift and go to state 509

    map_position                   shift and go to state 390
    brackets                       shift and go to state 305

state 535

    (149) for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content . RBRACE

    RBRACE          shift and go to state 538


state 536

    (148) for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .

    BREAK           reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    ID              reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    VAR             reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    LBRACKET        reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    IF              reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    FOR             reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    GO              reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    SWITCH          reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    RETURN          reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    DEFER           reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    CONTINUE        reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    SELECT          reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    ASSIGN_OP       reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    RBRACE          reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    CASE            reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    DEFAULT         reduce using rule 148 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)


state 537

    (150) for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content . RBRACE

    RBRACE          shift and go to state 539


state 538

    (149) for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .

    BREAK           reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    ID              reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    VAR             reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    LBRACKET        reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    IF              reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    FOR             reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    GO              reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    SWITCH          reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    RETURN          reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    DEFER           reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CONTINUE        reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    SELECT          reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    ASSIGN_OP       reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    RBRACE          reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CASE            reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    DEFAULT         reduce using rule 149 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)


state 539

    (150) for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .

    BREAK           reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    ID              reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    VAR             reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    LBRACKET        reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    IF              reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    FOR             reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    GO              reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    SWITCH          reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    RETURN          reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    DEFER           reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CONTINUE        reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    SELECT          reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    ASSIGN_OP       reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    RBRACE          reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CASE            reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    DEFAULT         reduce using rule 150 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACE in state 82 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 113 resolved as shift
WARNING: shift/reduce conflict for VAR in state 113 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 113 resolved as shift
WARNING: shift/reduce conflict for IF in state 113 resolved as shift
WARNING: shift/reduce conflict for FOR in state 113 resolved as shift
WARNING: shift/reduce conflict for GO in state 113 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 113 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 113 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 113 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 113 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 113 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 113 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 117 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
WARNING: shift/reduce conflict for ID in state 138 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 144 resolved as shift
WARNING: shift/reduce conflict for ID in state 144 resolved as shift
WARNING: shift/reduce conflict for VAR in state 144 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 144 resolved as shift
WARNING: shift/reduce conflict for IF in state 144 resolved as shift
WARNING: shift/reduce conflict for FOR in state 144 resolved as shift
WARNING: shift/reduce conflict for GO in state 144 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 144 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 144 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 144 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 144 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 144 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 144 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_OP in state 145 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 145 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 145 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 148 resolved as shift
WARNING: shift/reduce conflict for ID in state 148 resolved as shift
WARNING: shift/reduce conflict for VAR in state 148 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 148 resolved as shift
WARNING: shift/reduce conflict for IF in state 148 resolved as shift
WARNING: shift/reduce conflict for FOR in state 148 resolved as shift
WARNING: shift/reduce conflict for GO in state 148 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 148 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 148 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 148 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 148 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 148 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 148 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 149 resolved as shift
WARNING: shift/reduce conflict for ID in state 149 resolved as shift
WARNING: shift/reduce conflict for VAR in state 149 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 149 resolved as shift
WARNING: shift/reduce conflict for IF in state 149 resolved as shift
WARNING: shift/reduce conflict for FOR in state 149 resolved as shift
WARNING: shift/reduce conflict for GO in state 149 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 149 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 149 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 149 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 149 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 149 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 149 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_OP in state 150 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 150 resolved as shift
WARNING: shift/reduce conflict for ID in state 150 resolved as shift
WARNING: shift/reduce conflict for VAR in state 150 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 150 resolved as shift
WARNING: shift/reduce conflict for IF in state 150 resolved as shift
WARNING: shift/reduce conflict for FOR in state 150 resolved as shift
WARNING: shift/reduce conflict for GO in state 150 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 150 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 150 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 150 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 150 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 150 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 150 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 151 resolved as shift
WARNING: shift/reduce conflict for ID in state 151 resolved as shift
WARNING: shift/reduce conflict for VAR in state 151 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 151 resolved as shift
WARNING: shift/reduce conflict for IF in state 151 resolved as shift
WARNING: shift/reduce conflict for FOR in state 151 resolved as shift
WARNING: shift/reduce conflict for GO in state 151 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 151 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 151 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 151 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 151 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 151 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 151 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 152 resolved as shift
WARNING: shift/reduce conflict for ID in state 152 resolved as shift
WARNING: shift/reduce conflict for VAR in state 152 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 152 resolved as shift
WARNING: shift/reduce conflict for IF in state 152 resolved as shift
WARNING: shift/reduce conflict for FOR in state 152 resolved as shift
WARNING: shift/reduce conflict for GO in state 152 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 152 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 152 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 152 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 152 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 152 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 152 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 153 resolved as shift
WARNING: shift/reduce conflict for ID in state 153 resolved as shift
WARNING: shift/reduce conflict for VAR in state 153 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 153 resolved as shift
WARNING: shift/reduce conflict for IF in state 153 resolved as shift
WARNING: shift/reduce conflict for FOR in state 153 resolved as shift
WARNING: shift/reduce conflict for GO in state 153 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 153 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 153 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 153 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 153 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 153 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 153 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 154 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for VAR in state 154 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 154 resolved as shift
WARNING: shift/reduce conflict for FOR in state 154 resolved as shift
WARNING: shift/reduce conflict for GO in state 154 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 154 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 154 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 154 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 154 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 154 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 154 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 155 resolved as shift
WARNING: shift/reduce conflict for ID in state 155 resolved as shift
WARNING: shift/reduce conflict for VAR in state 155 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 155 resolved as shift
WARNING: shift/reduce conflict for IF in state 155 resolved as shift
WARNING: shift/reduce conflict for FOR in state 155 resolved as shift
WARNING: shift/reduce conflict for GO in state 155 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 155 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 155 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 155 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 155 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 155 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 155 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 156 resolved as shift
WARNING: shift/reduce conflict for ID in state 156 resolved as shift
WARNING: shift/reduce conflict for VAR in state 156 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 156 resolved as shift
WARNING: shift/reduce conflict for IF in state 156 resolved as shift
WARNING: shift/reduce conflict for FOR in state 156 resolved as shift
WARNING: shift/reduce conflict for GO in state 156 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 156 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 156 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 156 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 156 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 156 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 156 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 157 resolved as shift
WARNING: shift/reduce conflict for ID in state 157 resolved as shift
WARNING: shift/reduce conflict for VAR in state 157 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 157 resolved as shift
WARNING: shift/reduce conflict for IF in state 157 resolved as shift
WARNING: shift/reduce conflict for FOR in state 157 resolved as shift
WARNING: shift/reduce conflict for GO in state 157 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 157 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 157 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 157 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 157 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 157 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 157 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 158 resolved as shift
WARNING: shift/reduce conflict for VAR in state 158 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 158 resolved as shift
WARNING: shift/reduce conflict for IF in state 158 resolved as shift
WARNING: shift/reduce conflict for FOR in state 158 resolved as shift
WARNING: shift/reduce conflict for GO in state 158 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 158 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 158 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 158 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 158 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 158 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 158 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 159 resolved as shift
WARNING: shift/reduce conflict for ID in state 159 resolved as shift
WARNING: shift/reduce conflict for VAR in state 159 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 159 resolved as shift
WARNING: shift/reduce conflict for IF in state 159 resolved as shift
WARNING: shift/reduce conflict for FOR in state 159 resolved as shift
WARNING: shift/reduce conflict for GO in state 159 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 159 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 159 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 159 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 159 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 159 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 159 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 160 resolved as shift
WARNING: shift/reduce conflict for ID in state 160 resolved as shift
WARNING: shift/reduce conflict for VAR in state 160 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 160 resolved as shift
WARNING: shift/reduce conflict for IF in state 160 resolved as shift
WARNING: shift/reduce conflict for FOR in state 160 resolved as shift
WARNING: shift/reduce conflict for GO in state 160 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 160 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 160 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 160 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 160 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 160 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 160 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 161 resolved as shift
WARNING: shift/reduce conflict for ID in state 161 resolved as shift
WARNING: shift/reduce conflict for VAR in state 161 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 161 resolved as shift
WARNING: shift/reduce conflict for IF in state 161 resolved as shift
WARNING: shift/reduce conflict for FOR in state 161 resolved as shift
WARNING: shift/reduce conflict for GO in state 161 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 161 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 161 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 161 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 161 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 161 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 161 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 162 resolved as shift
WARNING: shift/reduce conflict for ID in state 162 resolved as shift
WARNING: shift/reduce conflict for VAR in state 162 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 162 resolved as shift
WARNING: shift/reduce conflict for IF in state 162 resolved as shift
WARNING: shift/reduce conflict for FOR in state 162 resolved as shift
WARNING: shift/reduce conflict for GO in state 162 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 162 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 162 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 162 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 162 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 162 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 162 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 163 resolved as shift
WARNING: shift/reduce conflict for ID in state 163 resolved as shift
WARNING: shift/reduce conflict for VAR in state 163 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 163 resolved as shift
WARNING: shift/reduce conflict for IF in state 163 resolved as shift
WARNING: shift/reduce conflict for FOR in state 163 resolved as shift
WARNING: shift/reduce conflict for GO in state 163 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 163 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 163 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 163 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 163 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 163 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 163 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 167 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 168 resolved as shift
WARNING: shift/reduce conflict for ID in state 169 resolved as shift
WARNING: shift/reduce conflict for ID in state 171 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 171 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 171 resolved as shift
WARNING: shift/reduce conflict for ID in state 171 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 171 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 171 resolved as shift
WARNING: shift/reduce conflict for ID in state 172 resolved as shift
WARNING: shift/reduce conflict for ID in state 175 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 175 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 190 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 190 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 190 resolved as shift
WARNING: shift/reduce conflict for COLON in state 196 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 197 resolved as shift
WARNING: shift/reduce conflict for ID in state 197 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 197 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 197 resolved as shift
WARNING: shift/reduce conflict for TYPES in state 217 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 218 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 219 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 222 resolved as shift
WARNING: shift/reduce conflict for ID in state 222 resolved as shift
WARNING: shift/reduce conflict for VAR in state 222 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 222 resolved as shift
WARNING: shift/reduce conflict for IF in state 222 resolved as shift
WARNING: shift/reduce conflict for FOR in state 222 resolved as shift
WARNING: shift/reduce conflict for GO in state 222 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 222 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 222 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 222 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 222 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 222 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 222 resolved as shift
WARNING: shift/reduce conflict for ID in state 224 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 224 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 224 resolved as shift
WARNING: shift/reduce conflict for ID in state 225 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 225 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 225 resolved as shift
WARNING: shift/reduce conflict for ID in state 226 resolved as shift
WARNING: shift/reduce conflict for ID in state 227 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 227 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 227 resolved as shift
WARNING: shift/reduce conflict for ID in state 235 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 235 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 235 resolved as shift
WARNING: shift/reduce conflict for ID in state 249 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 249 resolved as shift
WARNING: shift/reduce conflict for ID in state 250 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 250 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 250 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 255 resolved as shift
WARNING: shift/reduce conflict for ID in state 255 resolved as shift
WARNING: shift/reduce conflict for VAR in state 255 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 255 resolved as shift
WARNING: shift/reduce conflict for IF in state 255 resolved as shift
WARNING: shift/reduce conflict for FOR in state 255 resolved as shift
WARNING: shift/reduce conflict for GO in state 255 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 255 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 255 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 255 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 255 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 255 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 255 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 256 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 257 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 257 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 269 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 269 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 275 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 278 resolved as shift
WARNING: shift/reduce conflict for ID in state 283 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 289 resolved as shift
WARNING: shift/reduce conflict for ID in state 289 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 289 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 289 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 290 resolved as shift
WARNING: shift/reduce conflict for ID in state 290 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 290 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 290 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 291 resolved as shift
WARNING: shift/reduce conflict for ID in state 291 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 291 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 291 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 292 resolved as shift
WARNING: shift/reduce conflict for ID in state 292 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 292 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 292 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 294 resolved as shift
WARNING: shift/reduce conflict for ID in state 294 resolved as shift
WARNING: shift/reduce conflict for ARITH_OP in state 295 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 295 resolved as shift
WARNING: shift/reduce conflict for LOG_OP in state 295 resolved as shift
WARNING: shift/reduce conflict for POINTER in state 295 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 302 resolved as shift
WARNING: shift/reduce conflict for ID in state 310 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 310 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 310 resolved as shift
WARNING: shift/reduce conflict for ID in state 321 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 321 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 321 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 328 resolved as shift
WARNING: shift/reduce conflict for ID in state 328 resolved as shift
WARNING: shift/reduce conflict for VAR in state 328 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 328 resolved as shift
WARNING: shift/reduce conflict for IF in state 328 resolved as shift
WARNING: shift/reduce conflict for FOR in state 328 resolved as shift
WARNING: shift/reduce conflict for GO in state 328 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 328 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 328 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 328 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 328 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 328 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 328 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_OP in state 331 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 331 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 331 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 332 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 332 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 335 resolved as shift
WARNING: shift/reduce conflict for ID in state 335 resolved as shift
WARNING: shift/reduce conflict for VAR in state 335 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 335 resolved as shift
WARNING: shift/reduce conflict for IF in state 335 resolved as shift
WARNING: shift/reduce conflict for FOR in state 335 resolved as shift
WARNING: shift/reduce conflict for GO in state 335 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 335 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 335 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 335 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 335 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 335 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 335 resolved as shift
WARNING: shift/reduce conflict for ARITH_OP in state 365 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 365 resolved as shift
WARNING: shift/reduce conflict for LOG_OP in state 365 resolved as shift
WARNING: shift/reduce conflict for POINTER in state 365 resolved as shift
WARNING: shift/reduce conflict for ARITH_OP in state 366 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 366 resolved as shift
WARNING: shift/reduce conflict for LOG_OP in state 366 resolved as shift
WARNING: shift/reduce conflict for POINTER in state 366 resolved as shift
WARNING: shift/reduce conflict for ARITH_OP in state 367 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 367 resolved as shift
WARNING: shift/reduce conflict for LOG_OP in state 367 resolved as shift
WARNING: shift/reduce conflict for POINTER in state 367 resolved as shift
WARNING: shift/reduce conflict for ARITH_OP in state 368 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 368 resolved as shift
WARNING: shift/reduce conflict for LOG_OP in state 368 resolved as shift
WARNING: shift/reduce conflict for POINTER in state 368 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 369 resolved as shift
WARNING: shift/reduce conflict for COLON in state 369 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 370 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 374 resolved as shift
WARNING: shift/reduce conflict for ID in state 383 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 383 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 383 resolved as shift
WARNING: shift/reduce conflict for ID in state 385 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 385 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 385 resolved as shift
WARNING: shift/reduce conflict for ID in state 389 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 389 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 389 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 395 resolved as shift
WARNING: shift/reduce conflict for ID in state 395 resolved as shift
WARNING: shift/reduce conflict for VAR in state 395 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 395 resolved as shift
WARNING: shift/reduce conflict for IF in state 395 resolved as shift
WARNING: shift/reduce conflict for FOR in state 395 resolved as shift
WARNING: shift/reduce conflict for GO in state 395 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 395 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 395 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 395 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 395 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 395 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 395 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 415 resolved as shift
WARNING: shift/reduce conflict for ID in state 415 resolved as shift
WARNING: shift/reduce conflict for VAR in state 415 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 415 resolved as shift
WARNING: shift/reduce conflict for IF in state 415 resolved as shift
WARNING: shift/reduce conflict for FOR in state 415 resolved as shift
WARNING: shift/reduce conflict for GO in state 415 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 415 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 415 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 415 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 415 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 415 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 415 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 416 resolved as shift
WARNING: shift/reduce conflict for ID in state 416 resolved as shift
WARNING: shift/reduce conflict for VAR in state 416 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 416 resolved as shift
WARNING: shift/reduce conflict for IF in state 416 resolved as shift
WARNING: shift/reduce conflict for FOR in state 416 resolved as shift
WARNING: shift/reduce conflict for GO in state 416 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 416 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 416 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 416 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 416 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 416 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 416 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 425 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 428 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 429 resolved as shift
WARNING: shift/reduce conflict for ID in state 429 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 430 resolved as shift
WARNING: shift/reduce conflict for ID in state 430 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 431 resolved as shift
WARNING: shift/reduce conflict for ID in state 431 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 438 resolved as shift
WARNING: shift/reduce conflict for ASSIGN_OP in state 445 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 445 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 445 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 451 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 457 resolved as shift
WARNING: shift/reduce conflict for ID in state 457 resolved as shift
WARNING: shift/reduce conflict for VAR in state 457 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 457 resolved as shift
WARNING: shift/reduce conflict for IF in state 457 resolved as shift
WARNING: shift/reduce conflict for FOR in state 457 resolved as shift
WARNING: shift/reduce conflict for GO in state 457 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 457 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 457 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 457 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 457 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 457 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 457 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 458 resolved as shift
WARNING: shift/reduce conflict for ID in state 458 resolved as shift
WARNING: shift/reduce conflict for VAR in state 458 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 458 resolved as shift
WARNING: shift/reduce conflict for IF in state 458 resolved as shift
WARNING: shift/reduce conflict for FOR in state 458 resolved as shift
WARNING: shift/reduce conflict for GO in state 458 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 458 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 458 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 458 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 458 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 458 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 458 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 460 resolved as shift
WARNING: shift/reduce conflict for ID in state 460 resolved as shift
WARNING: shift/reduce conflict for VAR in state 460 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 460 resolved as shift
WARNING: shift/reduce conflict for IF in state 460 resolved as shift
WARNING: shift/reduce conflict for FOR in state 460 resolved as shift
WARNING: shift/reduce conflict for GO in state 460 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 460 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 460 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 460 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 460 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 460 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 460 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 463 resolved as shift
WARNING: shift/reduce conflict for ID in state 463 resolved as shift
WARNING: shift/reduce conflict for VAR in state 463 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 463 resolved as shift
WARNING: shift/reduce conflict for IF in state 463 resolved as shift
WARNING: shift/reduce conflict for FOR in state 463 resolved as shift
WARNING: shift/reduce conflict for GO in state 463 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 463 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 463 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 463 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 463 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 463 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 463 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 465 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 465 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 475 resolved as shift
WARNING: shift/reduce conflict for ID in state 475 resolved as shift
WARNING: shift/reduce conflict for VAR in state 475 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 475 resolved as shift
WARNING: shift/reduce conflict for IF in state 475 resolved as shift
WARNING: shift/reduce conflict for FOR in state 475 resolved as shift
WARNING: shift/reduce conflict for GO in state 475 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 475 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 475 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 475 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 475 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 475 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 475 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 479 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 488 resolved as shift
WARNING: shift/reduce conflict for ID in state 488 resolved as shift
WARNING: shift/reduce conflict for VAR in state 488 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 488 resolved as shift
WARNING: shift/reduce conflict for IF in state 488 resolved as shift
WARNING: shift/reduce conflict for FOR in state 488 resolved as shift
WARNING: shift/reduce conflict for GO in state 488 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 488 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 488 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 488 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 488 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 488 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 488 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 492 resolved as shift
WARNING: shift/reduce conflict for ID in state 492 resolved as shift
WARNING: shift/reduce conflict for VAR in state 492 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 492 resolved as shift
WARNING: shift/reduce conflict for IF in state 492 resolved as shift
WARNING: shift/reduce conflict for FOR in state 492 resolved as shift
WARNING: shift/reduce conflict for GO in state 492 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 492 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 492 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 492 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 492 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 492 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 492 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 502 resolved as shift
WARNING: shift/reduce conflict for ID in state 502 resolved as shift
WARNING: shift/reduce conflict for VAR in state 502 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 502 resolved as shift
WARNING: shift/reduce conflict for IF in state 502 resolved as shift
WARNING: shift/reduce conflict for FOR in state 502 resolved as shift
WARNING: shift/reduce conflict for GO in state 502 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 502 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 502 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 502 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 502 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 502 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 502 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 507 resolved as shift
WARNING: shift/reduce conflict for ID in state 507 resolved as shift
WARNING: shift/reduce conflict for VAR in state 507 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 507 resolved as shift
WARNING: shift/reduce conflict for IF in state 507 resolved as shift
WARNING: shift/reduce conflict for FOR in state 507 resolved as shift
WARNING: shift/reduce conflict for GO in state 507 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 507 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 507 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 507 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 507 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 507 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 507 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 512 resolved as shift
WARNING: shift/reduce conflict for ID in state 512 resolved as shift
WARNING: shift/reduce conflict for VAR in state 512 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 512 resolved as shift
WARNING: shift/reduce conflict for IF in state 512 resolved as shift
WARNING: shift/reduce conflict for FOR in state 512 resolved as shift
WARNING: shift/reduce conflict for GO in state 512 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 512 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 512 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 512 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 512 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 512 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 512 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 526 resolved as shift
WARNING: shift/reduce conflict for ID in state 526 resolved as shift
WARNING: shift/reduce conflict for VAR in state 526 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 526 resolved as shift
WARNING: shift/reduce conflict for IF in state 526 resolved as shift
WARNING: shift/reduce conflict for FOR in state 526 resolved as shift
WARNING: shift/reduce conflict for GO in state 526 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 526 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 526 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 526 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 526 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 526 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 526 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 529 resolved as shift
WARNING: shift/reduce conflict for ID in state 529 resolved as shift
WARNING: shift/reduce conflict for VAR in state 529 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 529 resolved as shift
WARNING: shift/reduce conflict for IF in state 529 resolved as shift
WARNING: shift/reduce conflict for FOR in state 529 resolved as shift
WARNING: shift/reduce conflict for GO in state 529 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 529 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 529 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 529 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 529 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 529 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 529 resolved as shift
WARNING: reduce/reduce conflict in state 105 resolved using rule (pointer_statement -> POINTER ID)
WARNING: rejected rule (callback -> ID) in state 105
WARNING: reduce/reduce conflict in state 147 resolved using rule (content -> empty)
WARNING: rejected rule (callback -> empty) in state 147
WARNING: reduce/reduce conflict in state 147 resolved using rule (return -> empty)
WARNING: rejected rule (callback -> empty) in state 147
WARNING: reduce/reduce conflict in state 147 resolved using rule (content -> empty)
WARNING: rejected rule (return -> empty) in state 147
WARNING: reduce/reduce conflict in state 171 resolved using rule (return -> RETURN)
WARNING: rejected rule (empty -> <empty>) in state 171
WARNING: reduce/reduce conflict in state 190 resolved using rule (expression -> ID)
WARNING: rejected rule (callback -> ID) in state 190
WARNING: reduce/reduce conflict in state 195 resolved using rule (parameters -> empty)
WARNING: rejected rule (callback -> empty) in state 195
WARNING: reduce/reduce conflict in state 195 resolved using rule (map -> empty)
WARNING: rejected rule (callback -> empty) in state 195
WARNING: reduce/reduce conflict in state 195 resolved using rule (parameters -> empty)
WARNING: rejected rule (map -> empty) in state 195
WARNING: reduce/reduce conflict in state 254 resolved using rule (map -> empty)
WARNING: rejected rule (callback -> empty) in state 254
WARNING: reduce/reduce conflict in state 257 resolved using rule (expression -> ID)
WARNING: rejected rule (callback -> ID) in state 257
WARNING: reduce/reduce conflict in state 269 resolved using rule (channel -> CHANNEL_OP ID)
WARNING: rejected rule (callback -> ID) in state 269
WARNING: reduce/reduce conflict in state 278 resolved using rule (brackets -> LBRACKET NUMBER RBRACKET)
WARNING: rejected rule (pointer -> ID LBRACKET NUMBER RBRACKET) in state 278
WARNING: reduce/reduce conflict in state 299 resolved using rule (values -> empty)
WARNING: rejected rule (map -> empty) in state 299
WARNING: reduce/reduce conflict in state 330 resolved using rule (values -> empty)
WARNING: rejected rule (content -> empty) in state 330
WARNING: reduce/reduce conflict in state 330 resolved using rule (values -> empty)
WARNING: rejected rule (map -> empty) in state 330
WARNING: reduce/reduce conflict in state 330 resolved using rule (values -> empty)
WARNING: rejected rule (callback -> empty) in state 330
WARNING: reduce/reduce conflict in state 330 resolved using rule (return -> empty)
WARNING: rejected rule (callback -> empty) in state 330
WARNING: reduce/reduce conflict in state 330 resolved using rule (values -> empty)
WARNING: rejected rule (return -> empty) in state 330
WARNING: reduce/reduce conflict in state 332 resolved using rule (expression -> ID)
WARNING: rejected rule (callback -> ID) in state 332
WARNING: reduce/reduce conflict in state 353 resolved using rule (expression -> ID)
WARNING: rejected rule (callback -> ID) in state 353
WARNING: reduce/reduce conflict in state 355 resolved using rule (struct -> ID DOT ID)
WARNING: rejected rule (callback -> ID) in state 355
WARNING: reduce/reduce conflict in state 372 resolved using rule (values -> empty)
WARNING: rejected rule (map -> empty) in state 372
WARNING: reduce/reduce conflict in state 428 resolved using rule (brackets -> LBRACKET ID RBRACKET)
WARNING: rejected rule (collection -> ID LBRACKET ID RBRACKET) in state 428
WARNING: reduce/reduce conflict in state 445 resolved using rule (collection_types -> ID)
WARNING: rejected rule (callback -> ID) in state 445
WARNING: reduce/reduce conflict in state 447 resolved using rule (content -> empty)
WARNING: rejected rule (callback -> empty) in state 447
WARNING: reduce/reduce conflict in state 447 resolved using rule (return -> empty)
WARNING: rejected rule (callback -> empty) in state 447
WARNING: reduce/reduce conflict in state 447 resolved using rule (content -> empty)
WARNING: rejected rule (return -> empty) in state 447
WARNING: reduce/reduce conflict in state 447 resolved using rule (values -> empty)
WARNING: rejected rule (content -> empty) in state 447
WARNING: reduce/reduce conflict in state 465 resolved using rule (expression -> ID)
WARNING: rejected rule (callback -> ID) in state 465
WARNING: reduce/reduce conflict in state 484 resolved using rule (brackets -> LBRACKET NUMBER RBRACKET)
WARNING: rejected rule (pointer -> ID LBRACKET NUMBER RBRACKET) in state 484
WARNING: Rule (pointer -> ID LBRACKET NUMBER RBRACKET) is never reduced
WARNING: Rule (collection -> ID LBRACKET ID RBRACKET) is never reduced
