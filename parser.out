Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    COMMENT_BLOCK
    COMPILER_DIRECTIVE
    RUNE

Grammar

Rule 0     S' -> program
Rule 1     program -> package imports statement
Rule 2     package -> PACKAGE ID
Rule 3     imports -> IMPORT STRING
Rule 4     imports -> IMPORT LPAREN import RPAREN
Rule 5     imports -> empty
Rule 6     import -> STRING import
Rule 7     import -> empty
Rule 8     statement -> function_statement statement
Rule 9     statement -> variable_global_statement statement
Rule 10    statement -> struct_statement statement
Rule 11    statement -> const statement
Rule 12    statement -> method_statement statement
Rule 13    statement -> interface_statement statement
Rule 14    statement -> type_alias statement
Rule 15    statement -> empty
Rule 16    type_alias -> TYPE ID types
Rule 17    interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE
Rule 18    method_list -> ID LPAREN args RPAREN types method_list
Rule 19    method_list -> empty
Rule 20    method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
Rule 21    method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
Rule 22    const -> CONST LPAREN constant RPAREN
Rule 23    constant -> ID EQUAL value constant
Rule 24    constant -> empty
Rule 25    struct_statement -> TYPE ID STRUCT LBRACE field RBRACE
Rule 26    field -> ID types field
Rule 27    field -> empty
Rule 28    function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
Rule 29    function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE
Rule 30    function -> ID LPAREN parameters RPAREN
Rule 31    parameters -> expression
Rule 32    parameters -> CHAN TYPES
Rule 33    parameters -> expression COMMA parameters
Rule 34    parameters -> empty
Rule 35    args -> ID types
Rule 36    args -> ID CHAN ID
Rule 37    args -> ID CHAN ID COMMA args
Rule 38    args -> ID CHAN types
Rule 39    args -> ID CHAN types COMMA args
Rule 40    args -> ID types COMMA args
Rule 41    args -> ID COMMA args
Rule 42    args -> p_map_args COMMA args
Rule 43    args -> p_map_args
Rule 44    args -> empty
Rule 45    p_map_args -> ID POINTER brackets TYPES
Rule 46    brackets -> LBRACKET NUMBER RBRACKET brackets
Rule 47    brackets -> LBRACKET NUMBER RBRACKET
Rule 48    brackets -> LBRACKET STRING RBRACKET brackets
Rule 49    brackets -> LBRACKET STRING RBRACKET
Rule 50    brackets -> LBRACKET ID RBRACKET
Rule 51    brackets -> LBRACKET ID RBRACKET brackets
Rule 52    types -> TYPES
Rule 53    types -> array_statement
Rule 54    types -> pointer_statement
Rule 55    types -> slice_statement
Rule 56    types -> MAP LBRACKET TYPES RBRACKET
Rule 57    pointer_statement -> POINTER types
Rule 58    pointer_statement -> POINTER ID
Rule 59    array_statement -> LBRACKET NUMBER RBRACKET TYPES
Rule 60    array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
Rule 61    array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES
Rule 62    array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
Rule 63    slice_statement -> LBRACKET RBRACKET TYPES
Rule 64    slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE
Rule 65    variable_global_statement -> VAR ID types
Rule 66    values -> value COMMA values
Rule 67    values -> value
Rule 68    values -> empty
Rule 69    content -> empty
Rule 70    content -> variable_statement content
Rule 71    content -> array_statement content
Rule 72    content -> callback content
Rule 73    content -> variable_redeclaration content
Rule 74    content -> if content
Rule 75    content -> for content
Rule 76    content -> BREAK content
Rule 77    content -> goroutine content
Rule 78    content -> increment content
Rule 79    content -> decrement content
Rule 80    content -> switch content
Rule 81    content -> ID channel content
Rule 82    content -> return content
Rule 83    content -> defer content
Rule 84    content -> continue content
Rule 85    content -> select content
Rule 86    content -> channel content
Rule 87    continue -> CONTINUE
Rule 88    channel -> CHANNEL_OP value
Rule 89    channel -> CHANNEL_OP ID
Rule 90    channel -> CHANNEL_OP callback
Rule 91    channel -> CHANNEL_OP struct_declaretion
Rule 92    lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE
Rule 93    lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE
Rule 94    select -> SELECT LBRACE select_cases RBRACE
Rule 95    select_cases -> CASE expression COLON content select_cases
Rule 96    select_cases -> DEFAULT COLON content
Rule 97    select_cases -> empty
Rule 98    defer -> DEFER function
Rule 99    switch -> SWITCH ID LBRACE cases_value default RBRACE
Rule 100   switch -> SWITCH LBRACE cases_rel default RBRACE
Rule 101   cases_rel -> CASE case_condition COLON content cases_rel
Rule 102   cases_rel -> empty
Rule 103   case_condition -> ID REL_OP value
Rule 104   case_condition -> boolean
Rule 105   case_condition -> callback
Rule 106   default -> DEFAULT COLON content
Rule 107   default -> empty
Rule 108   cases_value -> CASE value COLON content cases_value
Rule 109   cases_value -> empty
Rule 110   goroutine -> GO callback
Rule 111   goroutine -> GO lambda LPAREN parameters RPAREN
Rule 112   if -> IF expression LBRACE content RBRACE else
Rule 113   else -> ELSE LBRACE content RBRACE
Rule 114   else -> ELSE if
Rule 115   else -> empty
Rule 116   expression -> value
Rule 117   expression -> LPAREN expression RPAREN
Rule 118   expression -> expression ARITH_OP expression
Rule 119   expression -> expression REL_OP expression
Rule 120   expression -> expression LOG_OP expression
Rule 121   expression -> expression POINTER expression
Rule 122   expression -> NOT expression
Rule 123   expression -> ID COLON_EQUAL channel
Rule 124   expression -> channel
Rule 125   expression -> increment
Rule 126   expression -> lambda
Rule 127   expression -> decrement
Rule 128   expression -> struct
Rule 129   expression -> callback
Rule 130   expression -> struct_declaretion
Rule 131   expression -> address_pointer
Rule 132   expression -> ID
Rule 133   expression -> map_statement
Rule 134   expression -> map
Rule 135   for -> FOR LBRACE content RBRACE
Rule 136   for -> FOR NOT ID LBRACE content RBRACE
Rule 137   for -> FOR expression LBRACE content RBRACE
Rule 138   for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
Rule 139   for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
Rule 140   for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
Rule 141   for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
Rule 142   for_declaration -> ID COLON_EQUAL NUMBER
Rule 143   map_statement -> MAP LBRACKET TYPES RBRACKET map_statement
Rule 144   map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
Rule 145   map_statement -> MAP LBRACKET TYPES RBRACKET TYPES
Rule 146   map -> empty
Rule 147   map -> LBRACE map RBRACE
Rule 148   map -> LBRACE map RBRACE COMMA map
Rule 149   map -> value COLON value
Rule 150   map -> value COLON value COMMA map
Rule 151   map -> value COLON map
Rule 152   map -> value COLON map COMMA map
Rule 153   return -> RETURN
Rule 154   return -> RETURN expression
Rule 155   return -> empty
Rule 156   struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE
Rule 157   struct_declaretion_values -> values
Rule 158   struct_declaretion_values -> LBRACE struct_declaretion_values RBRACE
Rule 159   variable_statement -> VAR ID EQUAL slice_statement
Rule 160   variable_statement -> VAR ID EQUAL array_statement
Rule 161   variable_statement -> VAR ID types EQUAL expression
Rule 162   variable_statement -> VAR ID EQUAL expression
Rule 163   variable_statement -> VAR ID ID EQUAL expression
Rule 164   variable_statement -> ID map_position EQUAL expression
Rule 165   variable_statement -> ID COLON_EQUAL expression
Rule 166   variable_statement -> map_position COLON_EQUAL expression
Rule 167   variable_statement -> ID COLON_EQUAL slice_statement
Rule 168   variable_statement -> ID COLON_EQUAL array_statement
Rule 169   variable_statement -> VAR ID TYPES
Rule 170   map_position -> LBRACKET STRING RBRACKET map_position
Rule 171   map_position -> LBRACKET NUMBER RBRACKET map_position
Rule 172   map_position -> LBRACKET STRING RBRACKET
Rule 173   map_position -> LBRACKET NUMBER RBRACKET
Rule 174   variable_redeclaration -> ID EQUAL expression
Rule 175   variable_redeclaration -> ID ASSIGN_OP expression
Rule 176   variable_redeclaration -> ID DOT ID EQUAL expression
Rule 177   boolean -> FALSE
Rule 178   boolean -> TRUE
Rule 179   pointer -> ID LBRACKET NUMBER RBRACKET
Rule 180   pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET
Rule 181   increment -> ID INCREMENT
Rule 182   decrement -> ID DECREMENT
Rule 183   address_pointer -> ADDRESS ID
Rule 184   struct -> ID DOT ID
Rule 185   struct -> ID DOT struct
Rule 186   callback -> function
Rule 187   callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
Rule 188   callback -> function DOT callback
Rule 189   callback -> ID DOT callback
Rule 190   callback -> empty
Rule 191   value -> NUMBER
Rule 192   value -> STRING
Rule 193   value -> LBRACE values RBRACE
Rule 194   value -> map_varible
Rule 195   value -> boolean
Rule 196   value -> pointer
Rule 197   map_varible -> ID brackets
Rule 198   empty -> <empty>

Terminals, with rules where they appear

ADDRESS              : 183
ARITH_OP             : 118
ASSIGN_OP            : 175
BREAK                : 76
CASE                 : 95 101 108
CHAN                 : 32 36 37 38 39
CHANNEL_OP           : 88 89 90 91
COLON                : 95 96 101 106 108 149 150 151 152 180
COLON_EQUAL          : 123 139 140 141 142 165 166 167 168
COMMA                : 33 37 39 40 41 42 66 139 140 148 150 152
COMMENT              : 
COMMENT_BLOCK        : 
COMPILER_DIRECTIVE   : 
CONST                : 22
CONTINUE             : 87
DECREMENT            : 182
DEFAULT              : 96 106
DEFER                : 98
DOT                  : 61 61 61 62 62 62 176 184 185 187 188 189
ELSE                 : 113 114
EQUAL                : 23 159 160 161 162 163 164 174 176
FALSE                : 177
FOR                  : 135 136 137 138 139 140 141
FUNC                 : 20 21 28 29 92 93
GO                   : 110 111
ID                   : 2 16 17 18 20 20 20 21 21 21 23 25 26 28 29 30 35 36 36 37 37 38 39 40 41 45 50 51 58 65 81 89 99 103 123 132 136 139 139 139 140 140 141 141 142 156 159 160 161 162 163 163 164 165 167 168 169 174 175 176 176 179 180 181 182 183 184 184 185 187 187 187 187 189 197
IF                   : 112
IMPORT               : 3 4
INCREMENT            : 181
INTERFACE            : 17
LBRACE               : 17 20 21 25 28 29 60 62 64 92 93 94 99 100 112 113 135 136 137 138 139 140 141 144 147 148 156 158 193
LBRACKET             : 46 47 48 49 50 51 56 59 60 61 62 63 64 143 144 145 170 171 172 173 179 180
LOG_OP               : 120
LPAREN               : 4 18 20 20 21 21 22 28 29 30 92 93 111 117 187 187
MAP                  : 56 143 144 145
NOT                  : 122 136
NUMBER               : 46 47 59 60 142 171 173 179 180 180 191
PACKAGE              : 2
POINTER              : 45 57 58 121
RANGE                : 139 140 141
RBRACE               : 17 20 21 25 28 29 60 62 64 92 93 94 99 100 112 113 135 136 137 138 139 140 141 144 147 148 156 158 193
RBRACKET             : 46 47 48 49 50 51 56 59 60 61 62 63 64 143 144 145 170 171 172 173 179 180
REL_OP               : 103 119
RETURN               : 153 154
RPAREN               : 4 18 20 20 21 21 22 28 29 30 92 93 111 117 187 187
RUNE                 : 
SELECT               : 94
SEMICOLON            : 138 138
STRING               : 3 6 48 49 170 172 192
STRUCT               : 25
SWITCH               : 99 100
TRUE                 : 178
TYPE                 : 16 17 25
TYPES                : 21 32 45 52 56 59 60 61 62 63 64 143 144 144 145 145 169
UNDERSCORE           : 140
VAR                  : 65 159 160 161 162 163 169
error                : 

Nonterminals, with rules where they appear

address_pointer      : 131
args                 : 18 20 21 28 29 37 39 40 41 42 92 93
array_statement      : 53 71 160 168
boolean              : 104 195
brackets             : 45 46 48 51 197
callback             : 72 90 105 110 129 188 189
case_condition       : 101
cases_rel            : 100 101
cases_value          : 99 108
channel              : 81 86 123 124
const                : 11
constant             : 22 23
content              : 20 21 28 29 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 92 93 95 96 101 106 108 112 113 135 136 137 138 139 140 141
continue             : 84
decrement            : 79 127
default              : 99 100
defer                : 83
else                 : 112
empty                : 5 7 15 19 24 27 34 44 68 69 97 102 107 109 115 146 155 190
expression           : 31 33 95 112 117 118 118 119 119 120 120 121 121 122 137 138 138 154 161 162 163 164 165 166 174 175 176
field                : 25 26
for                  : 75
for_declaration      : 138
function             : 98 186 188
function_statement   : 8
goroutine            : 77
if                   : 74 114
import               : 4 6
imports              : 1
increment            : 78 125
interface_statement  : 13
lambda               : 111 126
map                  : 134 144 147 148 148 150 151 152 152
map_position         : 164 166 170 171
map_statement        : 133 143
map_varible          : 194
method_list          : 17 18
method_statement     : 12
p_map_args           : 42 43
package              : 1
parameters           : 30 33 111
pointer              : 196
pointer_statement    : 54
program              : 0
return               : 82
select               : 85
select_cases         : 94 95
slice_statement      : 55 159 167
statement            : 1 8 9 10 11 12 13 14
struct               : 128 185
struct_declaretion   : 91 130
struct_declaretion_values : 156 158
struct_statement     : 10
switch               : 80
type_alias           : 14
types                : 16 18 26 28 35 38 39 40 57 65 92 161
value                : 23 66 67 88 103 108 116 149 149 150 150 151 152
values               : 60 62 64 66 157 193
variable_global_statement : 9
variable_redeclaration : 73
variable_statement   : 70

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . package imports statement
    (2) package -> . PACKAGE ID

    PACKAGE         shift and go to state 3

    program                        shift and go to state 1
    package                        shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> package . imports statement
    (3) imports -> . IMPORT STRING
    (4) imports -> . IMPORT LPAREN import RPAREN
    (5) imports -> . empty
    (198) empty -> .

    IMPORT          shift and go to state 5
    FUNC            reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    TYPE            reduce using rule 198 (empty -> .)
    CONST           reduce using rule 198 (empty -> .)
    $end            reduce using rule 198 (empty -> .)

    imports                        shift and go to state 4
    empty                          shift and go to state 6

state 3

    (2) package -> PACKAGE . ID

    ID              shift and go to state 7


state 4

    (1) program -> package imports . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (28) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (29) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (65) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (198) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 198 (empty -> .)

    statement                      shift and go to state 8
    function_statement             shift and go to state 9
    variable_global_statement      shift and go to state 10
    struct_statement               shift and go to state 11
    const                          shift and go to state 12
    method_statement               shift and go to state 13
    interface_statement            shift and go to state 14
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 5

    (3) imports -> IMPORT . STRING
    (4) imports -> IMPORT . LPAREN import RPAREN

    STRING          shift and go to state 21
    LPAREN          shift and go to state 22


state 6

    (5) imports -> empty .

    FUNC            reduce using rule 5 (imports -> empty .)
    VAR             reduce using rule 5 (imports -> empty .)
    TYPE            reduce using rule 5 (imports -> empty .)
    CONST           reduce using rule 5 (imports -> empty .)
    $end            reduce using rule 5 (imports -> empty .)


state 7

    (2) package -> PACKAGE ID .

    IMPORT          reduce using rule 2 (package -> PACKAGE ID .)
    FUNC            reduce using rule 2 (package -> PACKAGE ID .)
    VAR             reduce using rule 2 (package -> PACKAGE ID .)
    TYPE            reduce using rule 2 (package -> PACKAGE ID .)
    CONST           reduce using rule 2 (package -> PACKAGE ID .)
    $end            reduce using rule 2 (package -> PACKAGE ID .)


state 8

    (1) program -> package imports statement .

    $end            reduce using rule 1 (program -> package imports statement .)


state 9

    (8) statement -> function_statement . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (28) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (29) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (65) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (198) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 198 (empty -> .)

    function_statement             shift and go to state 9
    statement                      shift and go to state 23
    variable_global_statement      shift and go to state 10
    struct_statement               shift and go to state 11
    const                          shift and go to state 12
    method_statement               shift and go to state 13
    interface_statement            shift and go to state 14
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 10

    (9) statement -> variable_global_statement . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (28) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (29) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (65) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (198) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 198 (empty -> .)

    variable_global_statement      shift and go to state 10
    statement                      shift and go to state 24
    function_statement             shift and go to state 9
    struct_statement               shift and go to state 11
    const                          shift and go to state 12
    method_statement               shift and go to state 13
    interface_statement            shift and go to state 14
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 11

    (10) statement -> struct_statement . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (28) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (29) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (65) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (198) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 198 (empty -> .)

    struct_statement               shift and go to state 11
    statement                      shift and go to state 25
    function_statement             shift and go to state 9
    variable_global_statement      shift and go to state 10
    const                          shift and go to state 12
    method_statement               shift and go to state 13
    interface_statement            shift and go to state 14
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 12

    (11) statement -> const . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (28) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (29) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (65) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (198) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 198 (empty -> .)

    const                          shift and go to state 12
    statement                      shift and go to state 26
    function_statement             shift and go to state 9
    variable_global_statement      shift and go to state 10
    struct_statement               shift and go to state 11
    method_statement               shift and go to state 13
    interface_statement            shift and go to state 14
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 13

    (12) statement -> method_statement . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (28) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (29) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (65) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (198) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 198 (empty -> .)

    method_statement               shift and go to state 13
    statement                      shift and go to state 27
    function_statement             shift and go to state 9
    variable_global_statement      shift and go to state 10
    struct_statement               shift and go to state 11
    const                          shift and go to state 12
    interface_statement            shift and go to state 14
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 14

    (13) statement -> interface_statement . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (28) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (29) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (65) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (198) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 198 (empty -> .)

    interface_statement            shift and go to state 14
    statement                      shift and go to state 28
    function_statement             shift and go to state 9
    variable_global_statement      shift and go to state 10
    struct_statement               shift and go to state 11
    const                          shift and go to state 12
    method_statement               shift and go to state 13
    type_alias                     shift and go to state 15
    empty                          shift and go to state 16

state 15

    (14) statement -> type_alias . statement
    (8) statement -> . function_statement statement
    (9) statement -> . variable_global_statement statement
    (10) statement -> . struct_statement statement
    (11) statement -> . const statement
    (12) statement -> . method_statement statement
    (13) statement -> . interface_statement statement
    (14) statement -> . type_alias statement
    (15) statement -> . empty
    (28) function_statement -> . FUNC ID LPAREN args RPAREN types LBRACE content RBRACE
    (29) function_statement -> . FUNC ID LPAREN args RPAREN LBRACE content RBRACE
    (65) variable_global_statement -> . VAR ID types
    (25) struct_statement -> . TYPE ID STRUCT LBRACE field RBRACE
    (22) const -> . CONST LPAREN constant RPAREN
    (20) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> . FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE
    (17) interface_statement -> . TYPE ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> . TYPE ID types
    (198) empty -> .

    FUNC            shift and go to state 17
    VAR             shift and go to state 18
    TYPE            shift and go to state 19
    CONST           shift and go to state 20
    $end            reduce using rule 198 (empty -> .)

    type_alias                     shift and go to state 15
    statement                      shift and go to state 29
    function_statement             shift and go to state 9
    variable_global_statement      shift and go to state 10
    struct_statement               shift and go to state 11
    const                          shift and go to state 12
    method_statement               shift and go to state 13
    interface_statement            shift and go to state 14
    empty                          shift and go to state 16

state 16

    (15) statement -> empty .

    $end            reduce using rule 15 (statement -> empty .)


state 17

    (28) function_statement -> FUNC . ID LPAREN args RPAREN types LBRACE content RBRACE
    (29) function_statement -> FUNC . ID LPAREN args RPAREN LBRACE content RBRACE
    (20) method_statement -> FUNC . LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC . LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE

    ID              shift and go to state 30
    LPAREN          shift and go to state 31


state 18

    (65) variable_global_statement -> VAR . ID types

    ID              shift and go to state 32


state 19

    (25) struct_statement -> TYPE . ID STRUCT LBRACE field RBRACE
    (17) interface_statement -> TYPE . ID INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> TYPE . ID types

    ID              shift and go to state 33


state 20

    (22) const -> CONST . LPAREN constant RPAREN

    LPAREN          shift and go to state 34


state 21

    (3) imports -> IMPORT STRING .

    FUNC            reduce using rule 3 (imports -> IMPORT STRING .)
    VAR             reduce using rule 3 (imports -> IMPORT STRING .)
    TYPE            reduce using rule 3 (imports -> IMPORT STRING .)
    CONST           reduce using rule 3 (imports -> IMPORT STRING .)
    $end            reduce using rule 3 (imports -> IMPORT STRING .)


state 22

    (4) imports -> IMPORT LPAREN . import RPAREN
    (6) import -> . STRING import
    (7) import -> . empty
    (198) empty -> .

    STRING          shift and go to state 36
    RPAREN          reduce using rule 198 (empty -> .)

    import                         shift and go to state 35
    empty                          shift and go to state 37

state 23

    (8) statement -> function_statement statement .

    $end            reduce using rule 8 (statement -> function_statement statement .)


state 24

    (9) statement -> variable_global_statement statement .

    $end            reduce using rule 9 (statement -> variable_global_statement statement .)


state 25

    (10) statement -> struct_statement statement .

    $end            reduce using rule 10 (statement -> struct_statement statement .)


state 26

    (11) statement -> const statement .

    $end            reduce using rule 11 (statement -> const statement .)


state 27

    (12) statement -> method_statement statement .

    $end            reduce using rule 12 (statement -> method_statement statement .)


state 28

    (13) statement -> interface_statement statement .

    $end            reduce using rule 13 (statement -> interface_statement statement .)


state 29

    (14) statement -> type_alias statement .

    $end            reduce using rule 14 (statement -> type_alias statement .)


state 30

    (28) function_statement -> FUNC ID . LPAREN args RPAREN types LBRACE content RBRACE
    (29) function_statement -> FUNC ID . LPAREN args RPAREN LBRACE content RBRACE

    LPAREN          shift and go to state 38


state 31

    (20) method_statement -> FUNC LPAREN . ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN . ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE

    ID              shift and go to state 39


state 32

    (65) variable_global_statement -> VAR ID . types
    (52) types -> . TYPES
    (53) types -> . array_statement
    (54) types -> . pointer_statement
    (55) types -> . slice_statement
    (56) types -> . MAP LBRACKET TYPES RBRACKET
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (57) pointer_statement -> . POINTER types
    (58) pointer_statement -> . POINTER ID
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 40
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 33

    (25) struct_statement -> TYPE ID . STRUCT LBRACE field RBRACE
    (17) interface_statement -> TYPE ID . INTERFACE LBRACE method_list RBRACE
    (16) type_alias -> TYPE ID . types
    (52) types -> . TYPES
    (53) types -> . array_statement
    (54) types -> . pointer_statement
    (55) types -> . slice_statement
    (56) types -> . MAP LBRACKET TYPES RBRACKET
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (57) pointer_statement -> . POINTER types
    (58) pointer_statement -> . POINTER ID
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    STRUCT          shift and go to state 48
    INTERFACE       shift and go to state 49
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 50
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 34

    (22) const -> CONST LPAREN . constant RPAREN
    (23) constant -> . ID EQUAL value constant
    (24) constant -> . empty
    (198) empty -> .

    ID              shift and go to state 52
    RPAREN          reduce using rule 198 (empty -> .)

    constant                       shift and go to state 51
    empty                          shift and go to state 53

state 35

    (4) imports -> IMPORT LPAREN import . RPAREN

    RPAREN          shift and go to state 54


state 36

    (6) import -> STRING . import
    (6) import -> . STRING import
    (7) import -> . empty
    (198) empty -> .

    STRING          shift and go to state 36
    RPAREN          reduce using rule 198 (empty -> .)

    import                         shift and go to state 55
    empty                          shift and go to state 37

state 37

    (7) import -> empty .

    RPAREN          reduce using rule 7 (import -> empty .)


state 38

    (28) function_statement -> FUNC ID LPAREN . args RPAREN types LBRACE content RBRACE
    (29) function_statement -> FUNC ID LPAREN . args RPAREN LBRACE content RBRACE
    (35) args -> . ID types
    (36) args -> . ID CHAN ID
    (37) args -> . ID CHAN ID COMMA args
    (38) args -> . ID CHAN types
    (39) args -> . ID CHAN types COMMA args
    (40) args -> . ID types COMMA args
    (41) args -> . ID COMMA args
    (42) args -> . p_map_args COMMA args
    (43) args -> . p_map_args
    (44) args -> . empty
    (45) p_map_args -> . ID POINTER brackets TYPES
    (198) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 198 (empty -> .)

    args                           shift and go to state 57
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 39

    (20) method_statement -> FUNC LPAREN ID . ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID . ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE

    ID              shift and go to state 60


state 40

    (65) variable_global_statement -> VAR ID types .

    FUNC            reduce using rule 65 (variable_global_statement -> VAR ID types .)
    VAR             reduce using rule 65 (variable_global_statement -> VAR ID types .)
    TYPE            reduce using rule 65 (variable_global_statement -> VAR ID types .)
    CONST           reduce using rule 65 (variable_global_statement -> VAR ID types .)
    $end            reduce using rule 65 (variable_global_statement -> VAR ID types .)


state 41

    (52) types -> TYPES .

    FUNC            reduce using rule 52 (types -> TYPES .)
    VAR             reduce using rule 52 (types -> TYPES .)
    TYPE            reduce using rule 52 (types -> TYPES .)
    CONST           reduce using rule 52 (types -> TYPES .)
    $end            reduce using rule 52 (types -> TYPES .)
    COMMA           reduce using rule 52 (types -> TYPES .)
    RPAREN          reduce using rule 52 (types -> TYPES .)
    LBRACE          reduce using rule 52 (types -> TYPES .)
    ID              reduce using rule 52 (types -> TYPES .)
    RBRACE          reduce using rule 52 (types -> TYPES .)
    EQUAL           reduce using rule 52 (types -> TYPES .)


state 42

    (53) types -> array_statement .

    FUNC            reduce using rule 53 (types -> array_statement .)
    VAR             reduce using rule 53 (types -> array_statement .)
    TYPE            reduce using rule 53 (types -> array_statement .)
    CONST           reduce using rule 53 (types -> array_statement .)
    $end            reduce using rule 53 (types -> array_statement .)
    COMMA           reduce using rule 53 (types -> array_statement .)
    RPAREN          reduce using rule 53 (types -> array_statement .)
    LBRACE          reduce using rule 53 (types -> array_statement .)
    ID              reduce using rule 53 (types -> array_statement .)
    RBRACE          reduce using rule 53 (types -> array_statement .)
    EQUAL           reduce using rule 53 (types -> array_statement .)


state 43

    (54) types -> pointer_statement .

    FUNC            reduce using rule 54 (types -> pointer_statement .)
    VAR             reduce using rule 54 (types -> pointer_statement .)
    TYPE            reduce using rule 54 (types -> pointer_statement .)
    CONST           reduce using rule 54 (types -> pointer_statement .)
    $end            reduce using rule 54 (types -> pointer_statement .)
    COMMA           reduce using rule 54 (types -> pointer_statement .)
    RPAREN          reduce using rule 54 (types -> pointer_statement .)
    LBRACE          reduce using rule 54 (types -> pointer_statement .)
    ID              reduce using rule 54 (types -> pointer_statement .)
    RBRACE          reduce using rule 54 (types -> pointer_statement .)
    EQUAL           reduce using rule 54 (types -> pointer_statement .)


state 44

    (55) types -> slice_statement .

    FUNC            reduce using rule 55 (types -> slice_statement .)
    VAR             reduce using rule 55 (types -> slice_statement .)
    TYPE            reduce using rule 55 (types -> slice_statement .)
    CONST           reduce using rule 55 (types -> slice_statement .)
    $end            reduce using rule 55 (types -> slice_statement .)
    COMMA           reduce using rule 55 (types -> slice_statement .)
    RPAREN          reduce using rule 55 (types -> slice_statement .)
    LBRACE          reduce using rule 55 (types -> slice_statement .)
    ID              reduce using rule 55 (types -> slice_statement .)
    RBRACE          reduce using rule 55 (types -> slice_statement .)
    EQUAL           reduce using rule 55 (types -> slice_statement .)


state 45

    (56) types -> MAP . LBRACKET TYPES RBRACKET

    LBRACKET        shift and go to state 61


state 46

    (59) array_statement -> LBRACKET . NUMBER RBRACKET TYPES
    (60) array_statement -> LBRACKET . NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) slice_statement -> LBRACKET . RBRACKET TYPES
    (64) slice_statement -> LBRACKET . RBRACKET TYPES LBRACE values RBRACE

    NUMBER          shift and go to state 62
    DOT             shift and go to state 64
    RBRACKET        shift and go to state 63


state 47

    (57) pointer_statement -> POINTER . types
    (58) pointer_statement -> POINTER . ID
    (52) types -> . TYPES
    (53) types -> . array_statement
    (54) types -> . pointer_statement
    (55) types -> . slice_statement
    (56) types -> . MAP LBRACKET TYPES RBRACKET
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (57) pointer_statement -> . POINTER types
    (58) pointer_statement -> . POINTER ID
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    ID              shift and go to state 66
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 65
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 48

    (25) struct_statement -> TYPE ID STRUCT . LBRACE field RBRACE

    LBRACE          shift and go to state 67


state 49

    (17) interface_statement -> TYPE ID INTERFACE . LBRACE method_list RBRACE

    LBRACE          shift and go to state 68


state 50

    (16) type_alias -> TYPE ID types .

    FUNC            reduce using rule 16 (type_alias -> TYPE ID types .)
    VAR             reduce using rule 16 (type_alias -> TYPE ID types .)
    TYPE            reduce using rule 16 (type_alias -> TYPE ID types .)
    CONST           reduce using rule 16 (type_alias -> TYPE ID types .)
    $end            reduce using rule 16 (type_alias -> TYPE ID types .)


state 51

    (22) const -> CONST LPAREN constant . RPAREN

    RPAREN          shift and go to state 69


state 52

    (23) constant -> ID . EQUAL value constant

    EQUAL           shift and go to state 70


state 53

    (24) constant -> empty .

    RPAREN          reduce using rule 24 (constant -> empty .)


state 54

    (4) imports -> IMPORT LPAREN import RPAREN .

    FUNC            reduce using rule 4 (imports -> IMPORT LPAREN import RPAREN .)
    VAR             reduce using rule 4 (imports -> IMPORT LPAREN import RPAREN .)
    TYPE            reduce using rule 4 (imports -> IMPORT LPAREN import RPAREN .)
    CONST           reduce using rule 4 (imports -> IMPORT LPAREN import RPAREN .)
    $end            reduce using rule 4 (imports -> IMPORT LPAREN import RPAREN .)


state 55

    (6) import -> STRING import .

    RPAREN          reduce using rule 6 (import -> STRING import .)


state 56

    (35) args -> ID . types
    (36) args -> ID . CHAN ID
    (37) args -> ID . CHAN ID COMMA args
    (38) args -> ID . CHAN types
    (39) args -> ID . CHAN types COMMA args
    (40) args -> ID . types COMMA args
    (41) args -> ID . COMMA args
    (45) p_map_args -> ID . POINTER brackets TYPES
    (52) types -> . TYPES
    (53) types -> . array_statement
    (54) types -> . pointer_statement
    (55) types -> . slice_statement
    (56) types -> . MAP LBRACKET TYPES RBRACKET
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (57) pointer_statement -> . POINTER types
    (58) pointer_statement -> . POINTER ID
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    CHAN            shift and go to state 72
    COMMA           shift and go to state 73
    POINTER         shift and go to state 74
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46

    types                          shift and go to state 71
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 57

    (28) function_statement -> FUNC ID LPAREN args . RPAREN types LBRACE content RBRACE
    (29) function_statement -> FUNC ID LPAREN args . RPAREN LBRACE content RBRACE

    RPAREN          shift and go to state 75


state 58

    (42) args -> p_map_args . COMMA args
    (43) args -> p_map_args .

    COMMA           shift and go to state 76
    RPAREN          reduce using rule 43 (args -> p_map_args .)


state 59

    (44) args -> empty .

    RPAREN          reduce using rule 44 (args -> empty .)


state 60

    (20) method_statement -> FUNC LPAREN ID ID . RPAREN ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID ID . RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE

    RPAREN          shift and go to state 77


state 61

    (56) types -> MAP LBRACKET . TYPES RBRACKET

    TYPES           shift and go to state 78


state 62

    (59) array_statement -> LBRACKET NUMBER . RBRACKET TYPES
    (60) array_statement -> LBRACKET NUMBER . RBRACKET TYPES LBRACE values RBRACE

    RBRACKET        shift and go to state 79


state 63

    (63) slice_statement -> LBRACKET RBRACKET . TYPES
    (64) slice_statement -> LBRACKET RBRACKET . TYPES LBRACE values RBRACE

    TYPES           shift and go to state 80


state 64

    (61) array_statement -> LBRACKET DOT . DOT DOT RBRACKET TYPES
    (62) array_statement -> LBRACKET DOT . DOT DOT RBRACKET TYPES LBRACE values RBRACE

    DOT             shift and go to state 81


state 65

    (57) pointer_statement -> POINTER types .

    FUNC            reduce using rule 57 (pointer_statement -> POINTER types .)
    VAR             reduce using rule 57 (pointer_statement -> POINTER types .)
    TYPE            reduce using rule 57 (pointer_statement -> POINTER types .)
    CONST           reduce using rule 57 (pointer_statement -> POINTER types .)
    $end            reduce using rule 57 (pointer_statement -> POINTER types .)
    COMMA           reduce using rule 57 (pointer_statement -> POINTER types .)
    RPAREN          reduce using rule 57 (pointer_statement -> POINTER types .)
    LBRACE          reduce using rule 57 (pointer_statement -> POINTER types .)
    ID              reduce using rule 57 (pointer_statement -> POINTER types .)
    RBRACE          reduce using rule 57 (pointer_statement -> POINTER types .)
    EQUAL           reduce using rule 57 (pointer_statement -> POINTER types .)


state 66

    (58) pointer_statement -> POINTER ID .

    FUNC            reduce using rule 58 (pointer_statement -> POINTER ID .)
    VAR             reduce using rule 58 (pointer_statement -> POINTER ID .)
    TYPE            reduce using rule 58 (pointer_statement -> POINTER ID .)
    CONST           reduce using rule 58 (pointer_statement -> POINTER ID .)
    $end            reduce using rule 58 (pointer_statement -> POINTER ID .)
    COMMA           reduce using rule 58 (pointer_statement -> POINTER ID .)
    RPAREN          reduce using rule 58 (pointer_statement -> POINTER ID .)
    LBRACE          reduce using rule 58 (pointer_statement -> POINTER ID .)
    ID              reduce using rule 58 (pointer_statement -> POINTER ID .)
    RBRACE          reduce using rule 58 (pointer_statement -> POINTER ID .)
    EQUAL           reduce using rule 58 (pointer_statement -> POINTER ID .)


state 67

    (25) struct_statement -> TYPE ID STRUCT LBRACE . field RBRACE
    (26) field -> . ID types field
    (27) field -> . empty
    (198) empty -> .

    ID              shift and go to state 82
    RBRACE          reduce using rule 198 (empty -> .)

    field                          shift and go to state 83
    empty                          shift and go to state 84

state 68

    (17) interface_statement -> TYPE ID INTERFACE LBRACE . method_list RBRACE
    (18) method_list -> . ID LPAREN args RPAREN types method_list
    (19) method_list -> . empty
    (198) empty -> .

    ID              shift and go to state 85
    RBRACE          reduce using rule 198 (empty -> .)

    method_list                    shift and go to state 86
    empty                          shift and go to state 87

state 69

    (22) const -> CONST LPAREN constant RPAREN .

    FUNC            reduce using rule 22 (const -> CONST LPAREN constant RPAREN .)
    VAR             reduce using rule 22 (const -> CONST LPAREN constant RPAREN .)
    TYPE            reduce using rule 22 (const -> CONST LPAREN constant RPAREN .)
    CONST           reduce using rule 22 (const -> CONST LPAREN constant RPAREN .)
    $end            reduce using rule 22 (const -> CONST LPAREN constant RPAREN .)


state 70

    (23) constant -> ID EQUAL . value constant
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 92
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    value                          shift and go to state 89
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 71

    (35) args -> ID types .
    (40) args -> ID types . COMMA args

    RPAREN          reduce using rule 35 (args -> ID types .)
    COMMA           shift and go to state 98


state 72

    (36) args -> ID CHAN . ID
    (37) args -> ID CHAN . ID COMMA args
    (38) args -> ID CHAN . types
    (39) args -> ID CHAN . types COMMA args
    (52) types -> . TYPES
    (53) types -> . array_statement
    (54) types -> . pointer_statement
    (55) types -> . slice_statement
    (56) types -> . MAP LBRACKET TYPES RBRACKET
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (57) pointer_statement -> . POINTER types
    (58) pointer_statement -> . POINTER ID
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    ID              shift and go to state 99
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 100
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 73

    (41) args -> ID COMMA . args
    (35) args -> . ID types
    (36) args -> . ID CHAN ID
    (37) args -> . ID CHAN ID COMMA args
    (38) args -> . ID CHAN types
    (39) args -> . ID CHAN types COMMA args
    (40) args -> . ID types COMMA args
    (41) args -> . ID COMMA args
    (42) args -> . p_map_args COMMA args
    (43) args -> . p_map_args
    (44) args -> . empty
    (45) p_map_args -> . ID POINTER brackets TYPES
    (198) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 198 (empty -> .)

    args                           shift and go to state 101
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 74

    (45) p_map_args -> ID POINTER . brackets TYPES
    (57) pointer_statement -> POINTER . types
    (58) pointer_statement -> POINTER . ID
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets
    (52) types -> . TYPES
    (53) types -> . array_statement
    (54) types -> . pointer_statement
    (55) types -> . slice_statement
    (56) types -> . MAP LBRACKET TYPES RBRACKET
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (57) pointer_statement -> . POINTER types
    (58) pointer_statement -> . POINTER ID
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    ID              shift and go to state 66
    LBRACKET        shift and go to state 103
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    POINTER         shift and go to state 47

    brackets                       shift and go to state 102
    types                          shift and go to state 65
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 75

    (28) function_statement -> FUNC ID LPAREN args RPAREN . types LBRACE content RBRACE
    (29) function_statement -> FUNC ID LPAREN args RPAREN . LBRACE content RBRACE
    (52) types -> . TYPES
    (53) types -> . array_statement
    (54) types -> . pointer_statement
    (55) types -> . slice_statement
    (56) types -> . MAP LBRACKET TYPES RBRACKET
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (57) pointer_statement -> . POINTER types
    (58) pointer_statement -> . POINTER ID
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    LBRACE          shift and go to state 105
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 104
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 76

    (42) args -> p_map_args COMMA . args
    (35) args -> . ID types
    (36) args -> . ID CHAN ID
    (37) args -> . ID CHAN ID COMMA args
    (38) args -> . ID CHAN types
    (39) args -> . ID CHAN types COMMA args
    (40) args -> . ID types COMMA args
    (41) args -> . ID COMMA args
    (42) args -> . p_map_args COMMA args
    (43) args -> . p_map_args
    (44) args -> . empty
    (45) p_map_args -> . ID POINTER brackets TYPES
    (198) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 198 (empty -> .)

    p_map_args                     shift and go to state 58
    args                           shift and go to state 106
    empty                          shift and go to state 59

state 77

    (20) method_statement -> FUNC LPAREN ID ID RPAREN . ID LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID ID RPAREN . ID LPAREN args RPAREN TYPES LBRACE content RBRACE

    ID              shift and go to state 107


state 78

    (56) types -> MAP LBRACKET TYPES . RBRACKET

    RBRACKET        shift and go to state 108


state 79

    (59) array_statement -> LBRACKET NUMBER RBRACKET . TYPES
    (60) array_statement -> LBRACKET NUMBER RBRACKET . TYPES LBRACE values RBRACE

    TYPES           shift and go to state 109


state 80

    (63) slice_statement -> LBRACKET RBRACKET TYPES .
    (64) slice_statement -> LBRACKET RBRACKET TYPES . LBRACE values RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
    FUNC            reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    VAR             reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    TYPE            reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    CONST           reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    $end            reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    COMMA           reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    RPAREN          reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    ID              reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    RBRACE          reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    EQUAL           reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    BREAK           reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    LBRACKET        reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    IF              reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    FOR             reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    GO              reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    SWITCH          reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    RETURN          reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    DEFER           reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    CONTINUE        reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    SELECT          reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    CHANNEL_OP      reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    CASE            reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    DEFAULT         reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .)
    LBRACE          shift and go to state 110

  ! LBRACE          [ reduce using rule 63 (slice_statement -> LBRACKET RBRACKET TYPES .) ]


state 81

    (61) array_statement -> LBRACKET DOT DOT . DOT RBRACKET TYPES
    (62) array_statement -> LBRACKET DOT DOT . DOT RBRACKET TYPES LBRACE values RBRACE

    DOT             shift and go to state 111


state 82

    (26) field -> ID . types field
    (52) types -> . TYPES
    (53) types -> . array_statement
    (54) types -> . pointer_statement
    (55) types -> . slice_statement
    (56) types -> . MAP LBRACKET TYPES RBRACKET
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (57) pointer_statement -> . POINTER types
    (58) pointer_statement -> . POINTER ID
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 112
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 83

    (25) struct_statement -> TYPE ID STRUCT LBRACE field . RBRACE

    RBRACE          shift and go to state 113


state 84

    (27) field -> empty .

    RBRACE          reduce using rule 27 (field -> empty .)


state 85

    (18) method_list -> ID . LPAREN args RPAREN types method_list

    LPAREN          shift and go to state 114


state 86

    (17) interface_statement -> TYPE ID INTERFACE LBRACE method_list . RBRACE

    RBRACE          shift and go to state 115


state 87

    (19) method_list -> empty .

    RBRACE          reduce using rule 19 (method_list -> empty .)


state 88

    (197) map_varible -> ID . brackets
    (179) pointer -> ID . LBRACKET NUMBER RBRACKET
    (180) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

    LBRACKET        shift and go to state 117

    brackets                       shift and go to state 116

state 89

    (23) constant -> ID EQUAL value . constant
    (23) constant -> . ID EQUAL value constant
    (24) constant -> . empty
    (198) empty -> .

    ID              shift and go to state 52
    RPAREN          reduce using rule 198 (empty -> .)

    constant                       shift and go to state 118
    empty                          shift and go to state 53

state 90

    (191) value -> NUMBER .

    ID              reduce using rule 191 (value -> NUMBER .)
    RPAREN          reduce using rule 191 (value -> NUMBER .)
    COMMA           reduce using rule 191 (value -> NUMBER .)
    RBRACE          reduce using rule 191 (value -> NUMBER .)
    COLON           reduce using rule 191 (value -> NUMBER .)
    LBRACE          reduce using rule 191 (value -> NUMBER .)
    ARITH_OP        reduce using rule 191 (value -> NUMBER .)
    REL_OP          reduce using rule 191 (value -> NUMBER .)
    LOG_OP          reduce using rule 191 (value -> NUMBER .)
    POINTER         reduce using rule 191 (value -> NUMBER .)
    BREAK           reduce using rule 191 (value -> NUMBER .)
    VAR             reduce using rule 191 (value -> NUMBER .)
    LBRACKET        reduce using rule 191 (value -> NUMBER .)
    IF              reduce using rule 191 (value -> NUMBER .)
    FOR             reduce using rule 191 (value -> NUMBER .)
    GO              reduce using rule 191 (value -> NUMBER .)
    SWITCH          reduce using rule 191 (value -> NUMBER .)
    RETURN          reduce using rule 191 (value -> NUMBER .)
    DEFER           reduce using rule 191 (value -> NUMBER .)
    CONTINUE        reduce using rule 191 (value -> NUMBER .)
    SELECT          reduce using rule 191 (value -> NUMBER .)
    CHANNEL_OP      reduce using rule 191 (value -> NUMBER .)
    CASE            reduce using rule 191 (value -> NUMBER .)
    DEFAULT         reduce using rule 191 (value -> NUMBER .)
    SEMICOLON       reduce using rule 191 (value -> NUMBER .)


state 91

    (192) value -> STRING .

    ID              reduce using rule 192 (value -> STRING .)
    RPAREN          reduce using rule 192 (value -> STRING .)
    COMMA           reduce using rule 192 (value -> STRING .)
    RBRACE          reduce using rule 192 (value -> STRING .)
    COLON           reduce using rule 192 (value -> STRING .)
    LBRACE          reduce using rule 192 (value -> STRING .)
    ARITH_OP        reduce using rule 192 (value -> STRING .)
    REL_OP          reduce using rule 192 (value -> STRING .)
    LOG_OP          reduce using rule 192 (value -> STRING .)
    POINTER         reduce using rule 192 (value -> STRING .)
    BREAK           reduce using rule 192 (value -> STRING .)
    VAR             reduce using rule 192 (value -> STRING .)
    LBRACKET        reduce using rule 192 (value -> STRING .)
    IF              reduce using rule 192 (value -> STRING .)
    FOR             reduce using rule 192 (value -> STRING .)
    GO              reduce using rule 192 (value -> STRING .)
    SWITCH          reduce using rule 192 (value -> STRING .)
    RETURN          reduce using rule 192 (value -> STRING .)
    DEFER           reduce using rule 192 (value -> STRING .)
    CONTINUE        reduce using rule 192 (value -> STRING .)
    SELECT          reduce using rule 192 (value -> STRING .)
    CHANNEL_OP      reduce using rule 192 (value -> STRING .)
    CASE            reduce using rule 192 (value -> STRING .)
    DEFAULT         reduce using rule 192 (value -> STRING .)
    SEMICOLON       reduce using rule 192 (value -> STRING .)


state 92

    (193) value -> LBRACE . values RBRACE
    (66) values -> . value COMMA values
    (67) values -> . value
    (68) values -> . empty
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (198) empty -> .
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 92
    RBRACE          reduce using rule 198 (empty -> .)
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    values                         shift and go to state 119
    value                          shift and go to state 120
    empty                          shift and go to state 121
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 93

    (194) value -> map_varible .

    ID              reduce using rule 194 (value -> map_varible .)
    RPAREN          reduce using rule 194 (value -> map_varible .)
    COMMA           reduce using rule 194 (value -> map_varible .)
    RBRACE          reduce using rule 194 (value -> map_varible .)
    COLON           reduce using rule 194 (value -> map_varible .)
    LBRACE          reduce using rule 194 (value -> map_varible .)
    ARITH_OP        reduce using rule 194 (value -> map_varible .)
    REL_OP          reduce using rule 194 (value -> map_varible .)
    LOG_OP          reduce using rule 194 (value -> map_varible .)
    POINTER         reduce using rule 194 (value -> map_varible .)
    BREAK           reduce using rule 194 (value -> map_varible .)
    VAR             reduce using rule 194 (value -> map_varible .)
    LBRACKET        reduce using rule 194 (value -> map_varible .)
    IF              reduce using rule 194 (value -> map_varible .)
    FOR             reduce using rule 194 (value -> map_varible .)
    GO              reduce using rule 194 (value -> map_varible .)
    SWITCH          reduce using rule 194 (value -> map_varible .)
    RETURN          reduce using rule 194 (value -> map_varible .)
    DEFER           reduce using rule 194 (value -> map_varible .)
    CONTINUE        reduce using rule 194 (value -> map_varible .)
    SELECT          reduce using rule 194 (value -> map_varible .)
    CHANNEL_OP      reduce using rule 194 (value -> map_varible .)
    CASE            reduce using rule 194 (value -> map_varible .)
    DEFAULT         reduce using rule 194 (value -> map_varible .)
    SEMICOLON       reduce using rule 194 (value -> map_varible .)


state 94

    (195) value -> boolean .

    ID              reduce using rule 195 (value -> boolean .)
    RPAREN          reduce using rule 195 (value -> boolean .)
    COMMA           reduce using rule 195 (value -> boolean .)
    RBRACE          reduce using rule 195 (value -> boolean .)
    COLON           reduce using rule 195 (value -> boolean .)
    LBRACE          reduce using rule 195 (value -> boolean .)
    ARITH_OP        reduce using rule 195 (value -> boolean .)
    REL_OP          reduce using rule 195 (value -> boolean .)
    LOG_OP          reduce using rule 195 (value -> boolean .)
    POINTER         reduce using rule 195 (value -> boolean .)
    BREAK           reduce using rule 195 (value -> boolean .)
    VAR             reduce using rule 195 (value -> boolean .)
    LBRACKET        reduce using rule 195 (value -> boolean .)
    IF              reduce using rule 195 (value -> boolean .)
    FOR             reduce using rule 195 (value -> boolean .)
    GO              reduce using rule 195 (value -> boolean .)
    SWITCH          reduce using rule 195 (value -> boolean .)
    RETURN          reduce using rule 195 (value -> boolean .)
    DEFER           reduce using rule 195 (value -> boolean .)
    CONTINUE        reduce using rule 195 (value -> boolean .)
    SELECT          reduce using rule 195 (value -> boolean .)
    CHANNEL_OP      reduce using rule 195 (value -> boolean .)
    CASE            reduce using rule 195 (value -> boolean .)
    DEFAULT         reduce using rule 195 (value -> boolean .)
    SEMICOLON       reduce using rule 195 (value -> boolean .)


state 95

    (196) value -> pointer .

    ID              reduce using rule 196 (value -> pointer .)
    RPAREN          reduce using rule 196 (value -> pointer .)
    COMMA           reduce using rule 196 (value -> pointer .)
    RBRACE          reduce using rule 196 (value -> pointer .)
    COLON           reduce using rule 196 (value -> pointer .)
    LBRACE          reduce using rule 196 (value -> pointer .)
    ARITH_OP        reduce using rule 196 (value -> pointer .)
    REL_OP          reduce using rule 196 (value -> pointer .)
    LOG_OP          reduce using rule 196 (value -> pointer .)
    POINTER         reduce using rule 196 (value -> pointer .)
    BREAK           reduce using rule 196 (value -> pointer .)
    VAR             reduce using rule 196 (value -> pointer .)
    LBRACKET        reduce using rule 196 (value -> pointer .)
    IF              reduce using rule 196 (value -> pointer .)
    FOR             reduce using rule 196 (value -> pointer .)
    GO              reduce using rule 196 (value -> pointer .)
    SWITCH          reduce using rule 196 (value -> pointer .)
    RETURN          reduce using rule 196 (value -> pointer .)
    DEFER           reduce using rule 196 (value -> pointer .)
    CONTINUE        reduce using rule 196 (value -> pointer .)
    SELECT          reduce using rule 196 (value -> pointer .)
    CHANNEL_OP      reduce using rule 196 (value -> pointer .)
    CASE            reduce using rule 196 (value -> pointer .)
    DEFAULT         reduce using rule 196 (value -> pointer .)
    SEMICOLON       reduce using rule 196 (value -> pointer .)


state 96

    (177) boolean -> FALSE .

    ID              reduce using rule 177 (boolean -> FALSE .)
    RPAREN          reduce using rule 177 (boolean -> FALSE .)
    COMMA           reduce using rule 177 (boolean -> FALSE .)
    RBRACE          reduce using rule 177 (boolean -> FALSE .)
    COLON           reduce using rule 177 (boolean -> FALSE .)
    LBRACE          reduce using rule 177 (boolean -> FALSE .)
    ARITH_OP        reduce using rule 177 (boolean -> FALSE .)
    REL_OP          reduce using rule 177 (boolean -> FALSE .)
    LOG_OP          reduce using rule 177 (boolean -> FALSE .)
    POINTER         reduce using rule 177 (boolean -> FALSE .)
    BREAK           reduce using rule 177 (boolean -> FALSE .)
    VAR             reduce using rule 177 (boolean -> FALSE .)
    LBRACKET        reduce using rule 177 (boolean -> FALSE .)
    IF              reduce using rule 177 (boolean -> FALSE .)
    FOR             reduce using rule 177 (boolean -> FALSE .)
    GO              reduce using rule 177 (boolean -> FALSE .)
    SWITCH          reduce using rule 177 (boolean -> FALSE .)
    RETURN          reduce using rule 177 (boolean -> FALSE .)
    DEFER           reduce using rule 177 (boolean -> FALSE .)
    CONTINUE        reduce using rule 177 (boolean -> FALSE .)
    SELECT          reduce using rule 177 (boolean -> FALSE .)
    CHANNEL_OP      reduce using rule 177 (boolean -> FALSE .)
    CASE            reduce using rule 177 (boolean -> FALSE .)
    DEFAULT         reduce using rule 177 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 177 (boolean -> FALSE .)


state 97

    (178) boolean -> TRUE .

    ID              reduce using rule 178 (boolean -> TRUE .)
    RPAREN          reduce using rule 178 (boolean -> TRUE .)
    COMMA           reduce using rule 178 (boolean -> TRUE .)
    RBRACE          reduce using rule 178 (boolean -> TRUE .)
    COLON           reduce using rule 178 (boolean -> TRUE .)
    LBRACE          reduce using rule 178 (boolean -> TRUE .)
    ARITH_OP        reduce using rule 178 (boolean -> TRUE .)
    REL_OP          reduce using rule 178 (boolean -> TRUE .)
    LOG_OP          reduce using rule 178 (boolean -> TRUE .)
    POINTER         reduce using rule 178 (boolean -> TRUE .)
    BREAK           reduce using rule 178 (boolean -> TRUE .)
    VAR             reduce using rule 178 (boolean -> TRUE .)
    LBRACKET        reduce using rule 178 (boolean -> TRUE .)
    IF              reduce using rule 178 (boolean -> TRUE .)
    FOR             reduce using rule 178 (boolean -> TRUE .)
    GO              reduce using rule 178 (boolean -> TRUE .)
    SWITCH          reduce using rule 178 (boolean -> TRUE .)
    RETURN          reduce using rule 178 (boolean -> TRUE .)
    DEFER           reduce using rule 178 (boolean -> TRUE .)
    CONTINUE        reduce using rule 178 (boolean -> TRUE .)
    SELECT          reduce using rule 178 (boolean -> TRUE .)
    CHANNEL_OP      reduce using rule 178 (boolean -> TRUE .)
    CASE            reduce using rule 178 (boolean -> TRUE .)
    DEFAULT         reduce using rule 178 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 178 (boolean -> TRUE .)


state 98

    (40) args -> ID types COMMA . args
    (35) args -> . ID types
    (36) args -> . ID CHAN ID
    (37) args -> . ID CHAN ID COMMA args
    (38) args -> . ID CHAN types
    (39) args -> . ID CHAN types COMMA args
    (40) args -> . ID types COMMA args
    (41) args -> . ID COMMA args
    (42) args -> . p_map_args COMMA args
    (43) args -> . p_map_args
    (44) args -> . empty
    (45) p_map_args -> . ID POINTER brackets TYPES
    (198) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 198 (empty -> .)

    args                           shift and go to state 122
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 99

    (36) args -> ID CHAN ID .
    (37) args -> ID CHAN ID . COMMA args

    RPAREN          reduce using rule 36 (args -> ID CHAN ID .)
    COMMA           shift and go to state 123


state 100

    (38) args -> ID CHAN types .
    (39) args -> ID CHAN types . COMMA args

    RPAREN          reduce using rule 38 (args -> ID CHAN types .)
    COMMA           shift and go to state 124


state 101

    (41) args -> ID COMMA args .

    RPAREN          reduce using rule 41 (args -> ID COMMA args .)


state 102

    (45) p_map_args -> ID POINTER brackets . TYPES

    TYPES           shift and go to state 125


state 103

    (46) brackets -> LBRACKET . NUMBER RBRACKET brackets
    (47) brackets -> LBRACKET . NUMBER RBRACKET
    (48) brackets -> LBRACKET . STRING RBRACKET brackets
    (49) brackets -> LBRACKET . STRING RBRACKET
    (50) brackets -> LBRACKET . ID RBRACKET
    (51) brackets -> LBRACKET . ID RBRACKET brackets
    (59) array_statement -> LBRACKET . NUMBER RBRACKET TYPES
    (60) array_statement -> LBRACKET . NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (63) slice_statement -> LBRACKET . RBRACKET TYPES
    (64) slice_statement -> LBRACKET . RBRACKET TYPES LBRACE values RBRACE

    NUMBER          shift and go to state 126
    STRING          shift and go to state 127
    ID              shift and go to state 128
    DOT             shift and go to state 64
    RBRACKET        shift and go to state 63


state 104

    (28) function_statement -> FUNC ID LPAREN args RPAREN types . LBRACE content RBRACE

    LBRACE          shift and go to state 129


state 105

    (29) function_statement -> FUNC ID LPAREN args RPAREN LBRACE . content RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 131
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 106

    (42) args -> p_map_args COMMA args .

    RPAREN          reduce using rule 42 (args -> p_map_args COMMA args .)


state 107

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID . LPAREN args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID . LPAREN args RPAREN TYPES LBRACE content RBRACE

    LPAREN          shift and go to state 162


state 108

    (56) types -> MAP LBRACKET TYPES RBRACKET .

    FUNC            reduce using rule 56 (types -> MAP LBRACKET TYPES RBRACKET .)
    VAR             reduce using rule 56 (types -> MAP LBRACKET TYPES RBRACKET .)
    TYPE            reduce using rule 56 (types -> MAP LBRACKET TYPES RBRACKET .)
    CONST           reduce using rule 56 (types -> MAP LBRACKET TYPES RBRACKET .)
    $end            reduce using rule 56 (types -> MAP LBRACKET TYPES RBRACKET .)
    COMMA           reduce using rule 56 (types -> MAP LBRACKET TYPES RBRACKET .)
    RPAREN          reduce using rule 56 (types -> MAP LBRACKET TYPES RBRACKET .)
    LBRACE          reduce using rule 56 (types -> MAP LBRACKET TYPES RBRACKET .)
    ID              reduce using rule 56 (types -> MAP LBRACKET TYPES RBRACKET .)
    RBRACE          reduce using rule 56 (types -> MAP LBRACKET TYPES RBRACKET .)
    EQUAL           reduce using rule 56 (types -> MAP LBRACKET TYPES RBRACKET .)


state 109

    (59) array_statement -> LBRACKET NUMBER RBRACKET TYPES .
    (60) array_statement -> LBRACKET NUMBER RBRACKET TYPES . LBRACE values RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
    FUNC            reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    VAR             reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    TYPE            reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    CONST           reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    $end            reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    COMMA           reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    RPAREN          reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    ID              reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    RBRACE          reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    EQUAL           reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    BREAK           reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    LBRACKET        reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    IF              reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    FOR             reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    GO              reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    SWITCH          reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    RETURN          reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    DEFER           reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    CONTINUE        reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    SELECT          reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    CHANNEL_OP      reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    CASE            reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    DEFAULT         reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .)
    LBRACE          shift and go to state 163

  ! LBRACE          [ reduce using rule 59 (array_statement -> LBRACKET NUMBER RBRACKET TYPES .) ]


state 110

    (64) slice_statement -> LBRACKET RBRACKET TYPES LBRACE . values RBRACE
    (66) values -> . value COMMA values
    (67) values -> . value
    (68) values -> . empty
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (198) empty -> .
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 92
    RBRACE          reduce using rule 198 (empty -> .)
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    values                         shift and go to state 164
    value                          shift and go to state 120
    empty                          shift and go to state 121
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 111

    (61) array_statement -> LBRACKET DOT DOT DOT . RBRACKET TYPES
    (62) array_statement -> LBRACKET DOT DOT DOT . RBRACKET TYPES LBRACE values RBRACE

    RBRACKET        shift and go to state 165


state 112

    (26) field -> ID types . field
    (26) field -> . ID types field
    (27) field -> . empty
    (198) empty -> .

    ID              shift and go to state 82
    RBRACE          reduce using rule 198 (empty -> .)

    field                          shift and go to state 166
    empty                          shift and go to state 84

state 113

    (25) struct_statement -> TYPE ID STRUCT LBRACE field RBRACE .

    FUNC            reduce using rule 25 (struct_statement -> TYPE ID STRUCT LBRACE field RBRACE .)
    VAR             reduce using rule 25 (struct_statement -> TYPE ID STRUCT LBRACE field RBRACE .)
    TYPE            reduce using rule 25 (struct_statement -> TYPE ID STRUCT LBRACE field RBRACE .)
    CONST           reduce using rule 25 (struct_statement -> TYPE ID STRUCT LBRACE field RBRACE .)
    $end            reduce using rule 25 (struct_statement -> TYPE ID STRUCT LBRACE field RBRACE .)


state 114

    (18) method_list -> ID LPAREN . args RPAREN types method_list
    (35) args -> . ID types
    (36) args -> . ID CHAN ID
    (37) args -> . ID CHAN ID COMMA args
    (38) args -> . ID CHAN types
    (39) args -> . ID CHAN types COMMA args
    (40) args -> . ID types COMMA args
    (41) args -> . ID COMMA args
    (42) args -> . p_map_args COMMA args
    (43) args -> . p_map_args
    (44) args -> . empty
    (45) p_map_args -> . ID POINTER brackets TYPES
    (198) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 198 (empty -> .)

    args                           shift and go to state 167
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 115

    (17) interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE .

    FUNC            reduce using rule 17 (interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE .)
    VAR             reduce using rule 17 (interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE .)
    TYPE            reduce using rule 17 (interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE .)
    CONST           reduce using rule 17 (interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE .)
    $end            reduce using rule 17 (interface_statement -> TYPE ID INTERFACE LBRACE method_list RBRACE .)


state 116

    (197) map_varible -> ID brackets .

    ID              reduce using rule 197 (map_varible -> ID brackets .)
    RPAREN          reduce using rule 197 (map_varible -> ID brackets .)
    COMMA           reduce using rule 197 (map_varible -> ID brackets .)
    RBRACE          reduce using rule 197 (map_varible -> ID brackets .)
    COLON           reduce using rule 197 (map_varible -> ID brackets .)
    LBRACE          reduce using rule 197 (map_varible -> ID brackets .)
    ARITH_OP        reduce using rule 197 (map_varible -> ID brackets .)
    REL_OP          reduce using rule 197 (map_varible -> ID brackets .)
    LOG_OP          reduce using rule 197 (map_varible -> ID brackets .)
    POINTER         reduce using rule 197 (map_varible -> ID brackets .)
    BREAK           reduce using rule 197 (map_varible -> ID brackets .)
    VAR             reduce using rule 197 (map_varible -> ID brackets .)
    LBRACKET        reduce using rule 197 (map_varible -> ID brackets .)
    IF              reduce using rule 197 (map_varible -> ID brackets .)
    FOR             reduce using rule 197 (map_varible -> ID brackets .)
    GO              reduce using rule 197 (map_varible -> ID brackets .)
    SWITCH          reduce using rule 197 (map_varible -> ID brackets .)
    RETURN          reduce using rule 197 (map_varible -> ID brackets .)
    DEFER           reduce using rule 197 (map_varible -> ID brackets .)
    CONTINUE        reduce using rule 197 (map_varible -> ID brackets .)
    SELECT          reduce using rule 197 (map_varible -> ID brackets .)
    CHANNEL_OP      reduce using rule 197 (map_varible -> ID brackets .)
    CASE            reduce using rule 197 (map_varible -> ID brackets .)
    DEFAULT         reduce using rule 197 (map_varible -> ID brackets .)
    SEMICOLON       reduce using rule 197 (map_varible -> ID brackets .)


state 117

    (179) pointer -> ID LBRACKET . NUMBER RBRACKET
    (180) pointer -> ID LBRACKET . NUMBER COLON NUMBER RBRACKET
    (46) brackets -> LBRACKET . NUMBER RBRACKET brackets
    (47) brackets -> LBRACKET . NUMBER RBRACKET
    (48) brackets -> LBRACKET . STRING RBRACKET brackets
    (49) brackets -> LBRACKET . STRING RBRACKET
    (50) brackets -> LBRACKET . ID RBRACKET
    (51) brackets -> LBRACKET . ID RBRACKET brackets

    NUMBER          shift and go to state 168
    STRING          shift and go to state 127
    ID              shift and go to state 128


state 118

    (23) constant -> ID EQUAL value constant .

    RPAREN          reduce using rule 23 (constant -> ID EQUAL value constant .)


state 119

    (193) value -> LBRACE values . RBRACE

    RBRACE          shift and go to state 169


state 120

    (66) values -> value . COMMA values
    (67) values -> value .

    COMMA           shift and go to state 170
    RBRACE          reduce using rule 67 (values -> value .)


state 121

    (68) values -> empty .

    RBRACE          reduce using rule 68 (values -> empty .)


state 122

    (40) args -> ID types COMMA args .

    RPAREN          reduce using rule 40 (args -> ID types COMMA args .)


state 123

    (37) args -> ID CHAN ID COMMA . args
    (35) args -> . ID types
    (36) args -> . ID CHAN ID
    (37) args -> . ID CHAN ID COMMA args
    (38) args -> . ID CHAN types
    (39) args -> . ID CHAN types COMMA args
    (40) args -> . ID types COMMA args
    (41) args -> . ID COMMA args
    (42) args -> . p_map_args COMMA args
    (43) args -> . p_map_args
    (44) args -> . empty
    (45) p_map_args -> . ID POINTER brackets TYPES
    (198) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 198 (empty -> .)

    args                           shift and go to state 171
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 124

    (39) args -> ID CHAN types COMMA . args
    (35) args -> . ID types
    (36) args -> . ID CHAN ID
    (37) args -> . ID CHAN ID COMMA args
    (38) args -> . ID CHAN types
    (39) args -> . ID CHAN types COMMA args
    (40) args -> . ID types COMMA args
    (41) args -> . ID COMMA args
    (42) args -> . p_map_args COMMA args
    (43) args -> . p_map_args
    (44) args -> . empty
    (45) p_map_args -> . ID POINTER brackets TYPES
    (198) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 198 (empty -> .)

    args                           shift and go to state 172
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 125

    (45) p_map_args -> ID POINTER brackets TYPES .

    COMMA           reduce using rule 45 (p_map_args -> ID POINTER brackets TYPES .)
    RPAREN          reduce using rule 45 (p_map_args -> ID POINTER brackets TYPES .)


state 126

    (46) brackets -> LBRACKET NUMBER . RBRACKET brackets
    (47) brackets -> LBRACKET NUMBER . RBRACKET
    (59) array_statement -> LBRACKET NUMBER . RBRACKET TYPES
    (60) array_statement -> LBRACKET NUMBER . RBRACKET TYPES LBRACE values RBRACE

    RBRACKET        shift and go to state 173


state 127

    (48) brackets -> LBRACKET STRING . RBRACKET brackets
    (49) brackets -> LBRACKET STRING . RBRACKET

    RBRACKET        shift and go to state 174


state 128

    (50) brackets -> LBRACKET ID . RBRACKET
    (51) brackets -> LBRACKET ID . RBRACKET brackets

    RBRACKET        shift and go to state 175


state 129

    (28) function_statement -> FUNC ID LPAREN args RPAREN types LBRACE . content RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 176
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 130

    (81) content -> ID . channel content
    (164) variable_statement -> ID . map_position EQUAL expression
    (165) variable_statement -> ID . COLON_EQUAL expression
    (167) variable_statement -> ID . COLON_EQUAL slice_statement
    (168) variable_statement -> ID . COLON_EQUAL array_statement
    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (174) variable_redeclaration -> ID . EQUAL expression
    (175) variable_redeclaration -> ID . ASSIGN_OP expression
    (176) variable_redeclaration -> ID . DOT ID EQUAL expression
    (181) increment -> ID . INCREMENT
    (182) decrement -> ID . DECREMENT
    (30) function -> ID . LPAREN parameters RPAREN
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET

    COLON_EQUAL     shift and go to state 180
    DOT             shift and go to state 181
    EQUAL           shift and go to state 179
    ASSIGN_OP       shift and go to state 183
    INCREMENT       shift and go to state 184
    DECREMENT       shift and go to state 185
    LPAREN          shift and go to state 182
    CHANNEL_OP      shift and go to state 161
    LBRACKET        shift and go to state 186

    channel                        shift and go to state 177
    map_position                   shift and go to state 178

state 131

    (29) function_statement -> FUNC ID LPAREN args RPAREN LBRACE content . RBRACE

    RBRACE          shift and go to state 187


state 132

    (69) content -> empty .
    (190) callback -> empty .
    (155) return -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 69 (content -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 69 (content -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 69 (content -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for GO resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for SWITCH resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for DEFER resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for SELECT resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 69 (content -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 69 (content -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 69 (content -> empty .)
    RBRACE          reduce using rule 69 (content -> empty .)
    CASE            reduce using rule 69 (content -> empty .)
    DEFAULT         reduce using rule 69 (content -> empty .)
    BREAK           reduce using rule 155 (return -> empty .)
    ID              reduce using rule 155 (return -> empty .)
    VAR             reduce using rule 155 (return -> empty .)
    LBRACKET        reduce using rule 155 (return -> empty .)
    IF              reduce using rule 155 (return -> empty .)
    FOR             reduce using rule 155 (return -> empty .)
    GO              reduce using rule 155 (return -> empty .)
    SWITCH          reduce using rule 155 (return -> empty .)
    RETURN          reduce using rule 155 (return -> empty .)
    DEFER           reduce using rule 155 (return -> empty .)
    CONTINUE        reduce using rule 155 (return -> empty .)
    SELECT          reduce using rule 155 (return -> empty .)
    CHANNEL_OP      reduce using rule 155 (return -> empty .)

  ! BREAK           [ reduce using rule 190 (callback -> empty .) ]
  ! ID              [ reduce using rule 190 (callback -> empty .) ]
  ! VAR             [ reduce using rule 190 (callback -> empty .) ]
  ! LBRACKET        [ reduce using rule 190 (callback -> empty .) ]
  ! IF              [ reduce using rule 190 (callback -> empty .) ]
  ! FOR             [ reduce using rule 190 (callback -> empty .) ]
  ! GO              [ reduce using rule 190 (callback -> empty .) ]
  ! SWITCH          [ reduce using rule 190 (callback -> empty .) ]
  ! RETURN          [ reduce using rule 190 (callback -> empty .) ]
  ! DEFER           [ reduce using rule 190 (callback -> empty .) ]
  ! CONTINUE        [ reduce using rule 190 (callback -> empty .) ]
  ! SELECT          [ reduce using rule 190 (callback -> empty .) ]
  ! CHANNEL_OP      [ reduce using rule 190 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 190 (callback -> empty .) ]
  ! CASE            [ reduce using rule 190 (callback -> empty .) ]
  ! DEFAULT         [ reduce using rule 190 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 155 (return -> empty .) ]
  ! CASE            [ reduce using rule 155 (return -> empty .) ]
  ! DEFAULT         [ reduce using rule 155 (return -> empty .) ]


state 133

    (70) content -> variable_statement . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    variable_statement             shift and go to state 133
    content                        shift and go to state 188
    empty                          shift and go to state 132
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 134

    (71) content -> array_statement . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    array_statement                shift and go to state 134
    content                        shift and go to state 189
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 135

    (72) content -> callback . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    callback                       shift and go to state 135
    content                        shift and go to state 190
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 136

    (73) content -> variable_redeclaration . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    variable_redeclaration         shift and go to state 136
    content                        shift and go to state 191
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 137

    (74) content -> if . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    if                             shift and go to state 137
    content                        shift and go to state 192
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 138

    (75) content -> for . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    for                            shift and go to state 138
    content                        shift and go to state 193
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 139

    (76) content -> BREAK . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 194
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 140

    (77) content -> goroutine . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    goroutine                      shift and go to state 140
    content                        shift and go to state 195
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 141

    (78) content -> increment . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    increment                      shift and go to state 141
    content                        shift and go to state 196
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 142

    (79) content -> decrement . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    decrement                      shift and go to state 142
    content                        shift and go to state 197
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 143

    (80) content -> switch . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    switch                         shift and go to state 143
    content                        shift and go to state 198
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 144

    (86) content -> channel . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    channel                        shift and go to state 144
    content                        shift and go to state 199
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 145

    (82) content -> return . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    return                         shift and go to state 145
    content                        shift and go to state 200
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 146

    (83) content -> defer . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    defer                          shift and go to state 146
    content                        shift and go to state 201
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 147

    (84) content -> continue . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    continue                       shift and go to state 147
    content                        shift and go to state 202
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 148

    (85) content -> select . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    select                         shift and go to state 148
    content                        shift and go to state 203
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 149

    (159) variable_statement -> VAR . ID EQUAL slice_statement
    (160) variable_statement -> VAR . ID EQUAL array_statement
    (161) variable_statement -> VAR . ID types EQUAL expression
    (162) variable_statement -> VAR . ID EQUAL expression
    (163) variable_statement -> VAR . ID ID EQUAL expression
    (169) variable_statement -> VAR . ID TYPES

    ID              shift and go to state 204


state 150

    (166) variable_statement -> map_position . COLON_EQUAL expression

    COLON_EQUAL     shift and go to state 205


state 151

    (59) array_statement -> LBRACKET . NUMBER RBRACKET TYPES
    (60) array_statement -> LBRACKET . NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (170) map_position -> LBRACKET . STRING RBRACKET map_position
    (171) map_position -> LBRACKET . NUMBER RBRACKET map_position
    (172) map_position -> LBRACKET . STRING RBRACKET
    (173) map_position -> LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 206
    DOT             shift and go to state 64
    STRING          shift and go to state 207


state 152

    (186) callback -> function .
    (188) callback -> function . DOT callback

    BREAK           reduce using rule 186 (callback -> function .)
    ID              reduce using rule 186 (callback -> function .)
    VAR             reduce using rule 186 (callback -> function .)
    LBRACKET        reduce using rule 186 (callback -> function .)
    IF              reduce using rule 186 (callback -> function .)
    FOR             reduce using rule 186 (callback -> function .)
    GO              reduce using rule 186 (callback -> function .)
    SWITCH          reduce using rule 186 (callback -> function .)
    RETURN          reduce using rule 186 (callback -> function .)
    DEFER           reduce using rule 186 (callback -> function .)
    CONTINUE        reduce using rule 186 (callback -> function .)
    SELECT          reduce using rule 186 (callback -> function .)
    CHANNEL_OP      reduce using rule 186 (callback -> function .)
    RBRACE          reduce using rule 186 (callback -> function .)
    CASE            reduce using rule 186 (callback -> function .)
    DEFAULT         reduce using rule 186 (callback -> function .)
    LBRACE          reduce using rule 186 (callback -> function .)
    ARITH_OP        reduce using rule 186 (callback -> function .)
    REL_OP          reduce using rule 186 (callback -> function .)
    LOG_OP          reduce using rule 186 (callback -> function .)
    POINTER         reduce using rule 186 (callback -> function .)
    COMMA           reduce using rule 186 (callback -> function .)
    RPAREN          reduce using rule 186 (callback -> function .)
    SEMICOLON       reduce using rule 186 (callback -> function .)
    COLON           reduce using rule 186 (callback -> function .)
    DOT             shift and go to state 208


state 153

    (112) if -> IF . expression LBRACE content RBRACE else
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 209
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 154

    (135) for -> FOR . LBRACE content RBRACE
    (136) for -> FOR . NOT ID LBRACE content RBRACE
    (137) for -> FOR . expression LBRACE content RBRACE
    (138) for -> FOR . for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> FOR . ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> FOR . UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> FOR . ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (142) for_declaration -> . ID COLON_EQUAL NUMBER
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 229
    NOT             shift and go to state 230
    ID              shift and go to state 231
    UNDERSCORE      shift and go to state 234
    LPAREN          shift and go to state 212
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 232
    for_declaration                shift and go to state 233
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 155

    (110) goroutine -> GO . callback
    (111) goroutine -> GO . lambda LPAREN parameters RPAREN
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 237
    FUNC            shift and go to state 225
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    CHANNEL_OP      reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]

    callback                       shift and go to state 235
    lambda                         shift and go to state 236
    function                       shift and go to state 152
    empty                          shift and go to state 238

state 156

    (99) switch -> SWITCH . ID LBRACE cases_value default RBRACE
    (100) switch -> SWITCH . LBRACE cases_rel default RBRACE

    ID              shift and go to state 239
    LBRACE          shift and go to state 240


state 157

    (153) return -> RETURN .
    (154) return -> RETURN . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
  ! reduce/reduce conflict for BREAK resolved using rule 153 (return -> RETURN .)
  ! shift/reduce conflict for ID resolved as shift
  ! reduce/reduce conflict for VAR resolved using rule 153 (return -> RETURN .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 153 (return -> RETURN .)
  ! reduce/reduce conflict for IF resolved using rule 153 (return -> RETURN .)
  ! reduce/reduce conflict for FOR resolved using rule 153 (return -> RETURN .)
  ! reduce/reduce conflict for GO resolved using rule 153 (return -> RETURN .)
  ! reduce/reduce conflict for SWITCH resolved using rule 153 (return -> RETURN .)
  ! reduce/reduce conflict for RETURN resolved using rule 153 (return -> RETURN .)
  ! reduce/reduce conflict for DEFER resolved using rule 153 (return -> RETURN .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 153 (return -> RETURN .)
  ! reduce/reduce conflict for SELECT resolved using rule 153 (return -> RETURN .)
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
  ! reduce/reduce conflict for RBRACE resolved using rule 153 (return -> RETURN .)
  ! reduce/reduce conflict for CASE resolved using rule 153 (return -> RETURN .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 153 (return -> RETURN .)
    BREAK           reduce using rule 153 (return -> RETURN .)
    VAR             reduce using rule 153 (return -> RETURN .)
    LBRACKET        reduce using rule 153 (return -> RETURN .)
    IF              reduce using rule 153 (return -> RETURN .)
    FOR             reduce using rule 153 (return -> RETURN .)
    GO              reduce using rule 153 (return -> RETURN .)
    SWITCH          reduce using rule 153 (return -> RETURN .)
    RETURN          reduce using rule 153 (return -> RETURN .)
    DEFER           reduce using rule 153 (return -> RETURN .)
    CONTINUE        reduce using rule 153 (return -> RETURN .)
    SELECT          reduce using rule 153 (return -> RETURN .)
    RBRACE          reduce using rule 153 (return -> RETURN .)
    CASE            reduce using rule 153 (return -> RETURN .)
    DEFAULT         reduce using rule 153 (return -> RETURN .)
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 153 (return -> RETURN .) ]
  ! CHANNEL_OP      [ reduce using rule 153 (return -> RETURN .) ]
  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]
  ! RBRACE          [ reduce using rule 198 (empty -> .) ]
  ! CASE            [ reduce using rule 198 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 241
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 158

    (98) defer -> DEFER . function
    (30) function -> . ID LPAREN parameters RPAREN

    ID              shift and go to state 243

    function                       shift and go to state 242

state 159

    (87) continue -> CONTINUE .

    BREAK           reduce using rule 87 (continue -> CONTINUE .)
    ID              reduce using rule 87 (continue -> CONTINUE .)
    VAR             reduce using rule 87 (continue -> CONTINUE .)
    LBRACKET        reduce using rule 87 (continue -> CONTINUE .)
    IF              reduce using rule 87 (continue -> CONTINUE .)
    FOR             reduce using rule 87 (continue -> CONTINUE .)
    GO              reduce using rule 87 (continue -> CONTINUE .)
    SWITCH          reduce using rule 87 (continue -> CONTINUE .)
    RETURN          reduce using rule 87 (continue -> CONTINUE .)
    DEFER           reduce using rule 87 (continue -> CONTINUE .)
    CONTINUE        reduce using rule 87 (continue -> CONTINUE .)
    SELECT          reduce using rule 87 (continue -> CONTINUE .)
    CHANNEL_OP      reduce using rule 87 (continue -> CONTINUE .)
    RBRACE          reduce using rule 87 (continue -> CONTINUE .)
    CASE            reduce using rule 87 (continue -> CONTINUE .)
    DEFAULT         reduce using rule 87 (continue -> CONTINUE .)


state 160

    (94) select -> SELECT . LBRACE select_cases RBRACE

    LBRACE          shift and go to state 244


state 161

    (88) channel -> CHANNEL_OP . value
    (89) channel -> CHANNEL_OP . ID
    (90) channel -> CHANNEL_OP . callback
    (91) channel -> CHANNEL_OP . struct_declaretion
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
    ID              shift and go to state 246
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 92
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    CHANNEL_OP      reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! LBRACE          [ reduce using rule 198 (empty -> .) ]

    value                          shift and go to state 245
    callback                       shift and go to state 247
    struct_declaretion             shift and go to state 248
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 238

state 162

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN . args RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN . args RPAREN TYPES LBRACE content RBRACE
    (35) args -> . ID types
    (36) args -> . ID CHAN ID
    (37) args -> . ID CHAN ID COMMA args
    (38) args -> . ID CHAN types
    (39) args -> . ID CHAN types COMMA args
    (40) args -> . ID types COMMA args
    (41) args -> . ID COMMA args
    (42) args -> . p_map_args COMMA args
    (43) args -> . p_map_args
    (44) args -> . empty
    (45) p_map_args -> . ID POINTER brackets TYPES
    (198) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 198 (empty -> .)

    args                           shift and go to state 249
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 163

    (60) array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE . values RBRACE
    (66) values -> . value COMMA values
    (67) values -> . value
    (68) values -> . empty
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (198) empty -> .
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 92
    RBRACE          reduce using rule 198 (empty -> .)
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    values                         shift and go to state 250
    value                          shift and go to state 120
    empty                          shift and go to state 121
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 164

    (64) slice_statement -> LBRACKET RBRACKET TYPES LBRACE values . RBRACE

    RBRACE          shift and go to state 251


state 165

    (61) array_statement -> LBRACKET DOT DOT DOT RBRACKET . TYPES
    (62) array_statement -> LBRACKET DOT DOT DOT RBRACKET . TYPES LBRACE values RBRACE

    TYPES           shift and go to state 252


state 166

    (26) field -> ID types field .

    RBRACE          reduce using rule 26 (field -> ID types field .)


state 167

    (18) method_list -> ID LPAREN args . RPAREN types method_list

    RPAREN          shift and go to state 253


state 168

    (179) pointer -> ID LBRACKET NUMBER . RBRACKET
    (180) pointer -> ID LBRACKET NUMBER . COLON NUMBER RBRACKET
    (46) brackets -> LBRACKET NUMBER . RBRACKET brackets
    (47) brackets -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 254
    COLON           shift and go to state 255


state 169

    (193) value -> LBRACE values RBRACE .

    ID              reduce using rule 193 (value -> LBRACE values RBRACE .)
    RPAREN          reduce using rule 193 (value -> LBRACE values RBRACE .)
    COMMA           reduce using rule 193 (value -> LBRACE values RBRACE .)
    RBRACE          reduce using rule 193 (value -> LBRACE values RBRACE .)
    COLON           reduce using rule 193 (value -> LBRACE values RBRACE .)
    LBRACE          reduce using rule 193 (value -> LBRACE values RBRACE .)
    ARITH_OP        reduce using rule 193 (value -> LBRACE values RBRACE .)
    REL_OP          reduce using rule 193 (value -> LBRACE values RBRACE .)
    LOG_OP          reduce using rule 193 (value -> LBRACE values RBRACE .)
    POINTER         reduce using rule 193 (value -> LBRACE values RBRACE .)
    BREAK           reduce using rule 193 (value -> LBRACE values RBRACE .)
    VAR             reduce using rule 193 (value -> LBRACE values RBRACE .)
    LBRACKET        reduce using rule 193 (value -> LBRACE values RBRACE .)
    IF              reduce using rule 193 (value -> LBRACE values RBRACE .)
    FOR             reduce using rule 193 (value -> LBRACE values RBRACE .)
    GO              reduce using rule 193 (value -> LBRACE values RBRACE .)
    SWITCH          reduce using rule 193 (value -> LBRACE values RBRACE .)
    RETURN          reduce using rule 193 (value -> LBRACE values RBRACE .)
    DEFER           reduce using rule 193 (value -> LBRACE values RBRACE .)
    CONTINUE        reduce using rule 193 (value -> LBRACE values RBRACE .)
    SELECT          reduce using rule 193 (value -> LBRACE values RBRACE .)
    CHANNEL_OP      reduce using rule 193 (value -> LBRACE values RBRACE .)
    CASE            reduce using rule 193 (value -> LBRACE values RBRACE .)
    DEFAULT         reduce using rule 193 (value -> LBRACE values RBRACE .)
    SEMICOLON       reduce using rule 193 (value -> LBRACE values RBRACE .)


state 170

    (66) values -> value COMMA . values
    (66) values -> . value COMMA values
    (67) values -> . value
    (68) values -> . empty
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (198) empty -> .
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 92
    RBRACE          reduce using rule 198 (empty -> .)
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    value                          shift and go to state 120
    values                         shift and go to state 256
    empty                          shift and go to state 121
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 171

    (37) args -> ID CHAN ID COMMA args .

    RPAREN          reduce using rule 37 (args -> ID CHAN ID COMMA args .)


state 172

    (39) args -> ID CHAN types COMMA args .

    RPAREN          reduce using rule 39 (args -> ID CHAN types COMMA args .)


state 173

    (46) brackets -> LBRACKET NUMBER RBRACKET . brackets
    (47) brackets -> LBRACKET NUMBER RBRACKET .
    (59) array_statement -> LBRACKET NUMBER RBRACKET . TYPES
    (60) array_statement -> LBRACKET NUMBER RBRACKET . TYPES LBRACE values RBRACE
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for TYPES resolved as shift
    TYPES           shift and go to state 109
    LBRACKET        shift and go to state 257

  ! TYPES           [ reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .) ]

    brackets                       shift and go to state 258

state 174

    (48) brackets -> LBRACKET STRING RBRACKET . brackets
    (49) brackets -> LBRACKET STRING RBRACKET .
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACKET resolved as shift
    TYPES           reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    ID              reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    RPAREN          reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    COMMA           reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    RBRACE          reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    COLON           reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    LBRACE          reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    ARITH_OP        reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    REL_OP          reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    LOG_OP          reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    POINTER         reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    BREAK           reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    VAR             reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    IF              reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    FOR             reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    GO              reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    SWITCH          reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    RETURN          reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    DEFER           reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    CONTINUE        reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    SELECT          reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    CHANNEL_OP      reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    CASE            reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    DEFAULT         reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    SEMICOLON       reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    LBRACKET        shift and go to state 257

  ! LBRACKET        [ reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .) ]

    brackets                       shift and go to state 259

state 175

    (50) brackets -> LBRACKET ID RBRACKET .
    (51) brackets -> LBRACKET ID RBRACKET . brackets
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACKET resolved as shift
    TYPES           reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    ID              reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    RPAREN          reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    COMMA           reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    RBRACE          reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    COLON           reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    LBRACE          reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    ARITH_OP        reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    REL_OP          reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    LOG_OP          reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    POINTER         reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    BREAK           reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    VAR             reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    IF              reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    FOR             reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    GO              reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    SWITCH          reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    RETURN          reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    DEFER           reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    CONTINUE        reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    SELECT          reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    CHANNEL_OP      reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    CASE            reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    DEFAULT         reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    SEMICOLON       reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .)
    LBRACKET        shift and go to state 257

  ! LBRACKET        [ reduce using rule 50 (brackets -> LBRACKET ID RBRACKET .) ]

    brackets                       shift and go to state 260

state 176

    (28) function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content . RBRACE

    RBRACE          shift and go to state 261


state 177

    (81) content -> ID channel . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    channel                        shift and go to state 144
    content                        shift and go to state 262
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 178

    (164) variable_statement -> ID map_position . EQUAL expression

    EQUAL           shift and go to state 263


state 179

    (174) variable_redeclaration -> ID EQUAL . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 264
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 180

    (165) variable_statement -> ID COLON_EQUAL . expression
    (167) variable_statement -> ID COLON_EQUAL . slice_statement
    (168) variable_statement -> ID COLON_EQUAL . array_statement
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    LBRACKET        shift and go to state 268
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 265
    slice_statement                shift and go to state 266
    array_statement                shift and go to state 267
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 181

    (187) callback -> ID DOT . ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID DOT . callback
    (176) variable_redeclaration -> ID DOT . ID EQUAL expression
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 269
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    CHANNEL_OP      reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]

    callback                       shift and go to state 270
    function                       shift and go to state 152
    empty                          shift and go to state 238

state 182

    (30) function -> ID LPAREN . parameters RPAREN
    (31) parameters -> . expression
    (32) parameters -> . CHAN TYPES
    (33) parameters -> . expression COMMA parameters
    (34) parameters -> . empty
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (198) empty -> .
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

    CHAN            shift and go to state 273
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    RPAREN          reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    parameters                     shift and go to state 271
    expression                     shift and go to state 272
    empty                          shift and go to state 274
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152

state 183

    (175) variable_redeclaration -> ID ASSIGN_OP . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 275
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 184

    (181) increment -> ID INCREMENT .

    BREAK           reduce using rule 181 (increment -> ID INCREMENT .)
    ID              reduce using rule 181 (increment -> ID INCREMENT .)
    VAR             reduce using rule 181 (increment -> ID INCREMENT .)
    LBRACKET        reduce using rule 181 (increment -> ID INCREMENT .)
    IF              reduce using rule 181 (increment -> ID INCREMENT .)
    FOR             reduce using rule 181 (increment -> ID INCREMENT .)
    GO              reduce using rule 181 (increment -> ID INCREMENT .)
    SWITCH          reduce using rule 181 (increment -> ID INCREMENT .)
    RETURN          reduce using rule 181 (increment -> ID INCREMENT .)
    DEFER           reduce using rule 181 (increment -> ID INCREMENT .)
    CONTINUE        reduce using rule 181 (increment -> ID INCREMENT .)
    SELECT          reduce using rule 181 (increment -> ID INCREMENT .)
    CHANNEL_OP      reduce using rule 181 (increment -> ID INCREMENT .)
    RBRACE          reduce using rule 181 (increment -> ID INCREMENT .)
    CASE            reduce using rule 181 (increment -> ID INCREMENT .)
    DEFAULT         reduce using rule 181 (increment -> ID INCREMENT .)
    LBRACE          reduce using rule 181 (increment -> ID INCREMENT .)
    ARITH_OP        reduce using rule 181 (increment -> ID INCREMENT .)
    REL_OP          reduce using rule 181 (increment -> ID INCREMENT .)
    LOG_OP          reduce using rule 181 (increment -> ID INCREMENT .)
    POINTER         reduce using rule 181 (increment -> ID INCREMENT .)
    COMMA           reduce using rule 181 (increment -> ID INCREMENT .)
    RPAREN          reduce using rule 181 (increment -> ID INCREMENT .)
    SEMICOLON       reduce using rule 181 (increment -> ID INCREMENT .)
    COLON           reduce using rule 181 (increment -> ID INCREMENT .)


state 185

    (182) decrement -> ID DECREMENT .

    BREAK           reduce using rule 182 (decrement -> ID DECREMENT .)
    ID              reduce using rule 182 (decrement -> ID DECREMENT .)
    VAR             reduce using rule 182 (decrement -> ID DECREMENT .)
    LBRACKET        reduce using rule 182 (decrement -> ID DECREMENT .)
    IF              reduce using rule 182 (decrement -> ID DECREMENT .)
    FOR             reduce using rule 182 (decrement -> ID DECREMENT .)
    GO              reduce using rule 182 (decrement -> ID DECREMENT .)
    SWITCH          reduce using rule 182 (decrement -> ID DECREMENT .)
    RETURN          reduce using rule 182 (decrement -> ID DECREMENT .)
    DEFER           reduce using rule 182 (decrement -> ID DECREMENT .)
    CONTINUE        reduce using rule 182 (decrement -> ID DECREMENT .)
    SELECT          reduce using rule 182 (decrement -> ID DECREMENT .)
    CHANNEL_OP      reduce using rule 182 (decrement -> ID DECREMENT .)
    RBRACE          reduce using rule 182 (decrement -> ID DECREMENT .)
    CASE            reduce using rule 182 (decrement -> ID DECREMENT .)
    DEFAULT         reduce using rule 182 (decrement -> ID DECREMENT .)
    LBRACE          reduce using rule 182 (decrement -> ID DECREMENT .)
    ARITH_OP        reduce using rule 182 (decrement -> ID DECREMENT .)
    REL_OP          reduce using rule 182 (decrement -> ID DECREMENT .)
    LOG_OP          reduce using rule 182 (decrement -> ID DECREMENT .)
    POINTER         reduce using rule 182 (decrement -> ID DECREMENT .)
    COMMA           reduce using rule 182 (decrement -> ID DECREMENT .)
    RPAREN          reduce using rule 182 (decrement -> ID DECREMENT .)
    SEMICOLON       reduce using rule 182 (decrement -> ID DECREMENT .)
    COLON           reduce using rule 182 (decrement -> ID DECREMENT .)


state 186

    (170) map_position -> LBRACKET . STRING RBRACKET map_position
    (171) map_position -> LBRACKET . NUMBER RBRACKET map_position
    (172) map_position -> LBRACKET . STRING RBRACKET
    (173) map_position -> LBRACKET . NUMBER RBRACKET

    STRING          shift and go to state 207
    NUMBER          shift and go to state 276


state 187

    (29) function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE .

    FUNC            reduce using rule 29 (function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE .)
    VAR             reduce using rule 29 (function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE .)
    TYPE            reduce using rule 29 (function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE .)
    CONST           reduce using rule 29 (function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE .)
    $end            reduce using rule 29 (function_statement -> FUNC ID LPAREN args RPAREN LBRACE content RBRACE .)


state 188

    (70) content -> variable_statement content .

    RBRACE          reduce using rule 70 (content -> variable_statement content .)
    CASE            reduce using rule 70 (content -> variable_statement content .)
    DEFAULT         reduce using rule 70 (content -> variable_statement content .)


state 189

    (71) content -> array_statement content .

    RBRACE          reduce using rule 71 (content -> array_statement content .)
    CASE            reduce using rule 71 (content -> array_statement content .)
    DEFAULT         reduce using rule 71 (content -> array_statement content .)


state 190

    (72) content -> callback content .

    RBRACE          reduce using rule 72 (content -> callback content .)
    CASE            reduce using rule 72 (content -> callback content .)
    DEFAULT         reduce using rule 72 (content -> callback content .)


state 191

    (73) content -> variable_redeclaration content .

    RBRACE          reduce using rule 73 (content -> variable_redeclaration content .)
    CASE            reduce using rule 73 (content -> variable_redeclaration content .)
    DEFAULT         reduce using rule 73 (content -> variable_redeclaration content .)


state 192

    (74) content -> if content .

    RBRACE          reduce using rule 74 (content -> if content .)
    CASE            reduce using rule 74 (content -> if content .)
    DEFAULT         reduce using rule 74 (content -> if content .)


state 193

    (75) content -> for content .

    RBRACE          reduce using rule 75 (content -> for content .)
    CASE            reduce using rule 75 (content -> for content .)
    DEFAULT         reduce using rule 75 (content -> for content .)


state 194

    (76) content -> BREAK content .

    RBRACE          reduce using rule 76 (content -> BREAK content .)
    CASE            reduce using rule 76 (content -> BREAK content .)
    DEFAULT         reduce using rule 76 (content -> BREAK content .)


state 195

    (77) content -> goroutine content .

    RBRACE          reduce using rule 77 (content -> goroutine content .)
    CASE            reduce using rule 77 (content -> goroutine content .)
    DEFAULT         reduce using rule 77 (content -> goroutine content .)


state 196

    (78) content -> increment content .

    RBRACE          reduce using rule 78 (content -> increment content .)
    CASE            reduce using rule 78 (content -> increment content .)
    DEFAULT         reduce using rule 78 (content -> increment content .)


state 197

    (79) content -> decrement content .

    RBRACE          reduce using rule 79 (content -> decrement content .)
    CASE            reduce using rule 79 (content -> decrement content .)
    DEFAULT         reduce using rule 79 (content -> decrement content .)


state 198

    (80) content -> switch content .

    RBRACE          reduce using rule 80 (content -> switch content .)
    CASE            reduce using rule 80 (content -> switch content .)
    DEFAULT         reduce using rule 80 (content -> switch content .)


state 199

    (86) content -> channel content .

    RBRACE          reduce using rule 86 (content -> channel content .)
    CASE            reduce using rule 86 (content -> channel content .)
    DEFAULT         reduce using rule 86 (content -> channel content .)


state 200

    (82) content -> return content .

    RBRACE          reduce using rule 82 (content -> return content .)
    CASE            reduce using rule 82 (content -> return content .)
    DEFAULT         reduce using rule 82 (content -> return content .)


state 201

    (83) content -> defer content .

    RBRACE          reduce using rule 83 (content -> defer content .)
    CASE            reduce using rule 83 (content -> defer content .)
    DEFAULT         reduce using rule 83 (content -> defer content .)


state 202

    (84) content -> continue content .

    RBRACE          reduce using rule 84 (content -> continue content .)
    CASE            reduce using rule 84 (content -> continue content .)
    DEFAULT         reduce using rule 84 (content -> continue content .)


state 203

    (85) content -> select content .

    RBRACE          reduce using rule 85 (content -> select content .)
    CASE            reduce using rule 85 (content -> select content .)
    DEFAULT         reduce using rule 85 (content -> select content .)


state 204

    (159) variable_statement -> VAR ID . EQUAL slice_statement
    (160) variable_statement -> VAR ID . EQUAL array_statement
    (161) variable_statement -> VAR ID . types EQUAL expression
    (162) variable_statement -> VAR ID . EQUAL expression
    (163) variable_statement -> VAR ID . ID EQUAL expression
    (169) variable_statement -> VAR ID . TYPES
    (52) types -> . TYPES
    (53) types -> . array_statement
    (54) types -> . pointer_statement
    (55) types -> . slice_statement
    (56) types -> . MAP LBRACKET TYPES RBRACKET
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (57) pointer_statement -> . POINTER types
    (58) pointer_statement -> . POINTER ID
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    EQUAL           shift and go to state 278
    ID              shift and go to state 277
    TYPES           shift and go to state 280
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    slice_statement                shift and go to state 44
    array_statement                shift and go to state 42
    types                          shift and go to state 279
    pointer_statement              shift and go to state 43

state 205

    (166) variable_statement -> map_position COLON_EQUAL . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 281
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 206

    (59) array_statement -> LBRACKET NUMBER . RBRACKET TYPES
    (60) array_statement -> LBRACKET NUMBER . RBRACKET TYPES LBRACE values RBRACE
    (171) map_position -> LBRACKET NUMBER . RBRACKET map_position
    (173) map_position -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 282


state 207

    (170) map_position -> LBRACKET STRING . RBRACKET map_position
    (172) map_position -> LBRACKET STRING . RBRACKET

    RBRACKET        shift and go to state 283


state 208

    (188) callback -> function DOT . callback
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 237
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    CHANNEL_OP      reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    LBRACE          reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]

    function                       shift and go to state 152
    callback                       shift and go to state 284
    empty                          shift and go to state 238

state 209

    (112) if -> IF expression . LBRACE content RBRACE else
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    LBRACE          shift and go to state 285
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 210

    (193) value -> LBRACE . values RBRACE
    (147) map -> LBRACE . map RBRACE
    (148) map -> LBRACE . map RBRACE COMMA map
    (66) values -> . value COMMA values
    (67) values -> . value
    (68) values -> . empty
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (198) empty -> .
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    LBRACE          shift and go to state 290
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    RBRACE          reduce using rule 198 (empty -> .)
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    values                         shift and go to state 119
    map                            shift and go to state 291
    value                          shift and go to state 292
    empty                          shift and go to state 293
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 211

    (116) expression -> value .
    (149) map -> value . COLON value
    (150) map -> value . COLON value COMMA map
    (151) map -> value . COLON map
    (152) map -> value . COLON map COMMA map

  ! shift/reduce conflict for COLON resolved as shift
    LBRACE          reduce using rule 116 (expression -> value .)
    ARITH_OP        reduce using rule 116 (expression -> value .)
    REL_OP          reduce using rule 116 (expression -> value .)
    LOG_OP          reduce using rule 116 (expression -> value .)
    POINTER         reduce using rule 116 (expression -> value .)
    BREAK           reduce using rule 116 (expression -> value .)
    ID              reduce using rule 116 (expression -> value .)
    VAR             reduce using rule 116 (expression -> value .)
    LBRACKET        reduce using rule 116 (expression -> value .)
    IF              reduce using rule 116 (expression -> value .)
    FOR             reduce using rule 116 (expression -> value .)
    GO              reduce using rule 116 (expression -> value .)
    SWITCH          reduce using rule 116 (expression -> value .)
    RETURN          reduce using rule 116 (expression -> value .)
    DEFER           reduce using rule 116 (expression -> value .)
    CONTINUE        reduce using rule 116 (expression -> value .)
    SELECT          reduce using rule 116 (expression -> value .)
    CHANNEL_OP      reduce using rule 116 (expression -> value .)
    RBRACE          reduce using rule 116 (expression -> value .)
    CASE            reduce using rule 116 (expression -> value .)
    DEFAULT         reduce using rule 116 (expression -> value .)
    COMMA           reduce using rule 116 (expression -> value .)
    RPAREN          reduce using rule 116 (expression -> value .)
    SEMICOLON       reduce using rule 116 (expression -> value .)
    COLON           shift and go to state 294

  ! COLON           [ reduce using rule 116 (expression -> value .) ]


state 212

    (117) expression -> LPAREN . expression RPAREN
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    RPAREN          reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)

    expression                     shift and go to state 295
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 213

    (122) expression -> NOT . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 296
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 214

    (123) expression -> ID . COLON_EQUAL channel
    (132) expression -> ID .
    (181) increment -> ID . INCREMENT
    (182) decrement -> ID . DECREMENT
    (184) struct -> ID . DOT ID
    (185) struct -> ID . DOT struct
    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (156) struct_declaretion -> ID . LBRACE struct_declaretion_values RBRACE
    (197) map_varible -> ID . brackets
    (179) pointer -> ID . LBRACKET NUMBER RBRACKET
    (180) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> ID . LPAREN parameters RPAREN
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    COLON_EQUAL     shift and go to state 297
    ARITH_OP        reduce using rule 132 (expression -> ID .)
    REL_OP          reduce using rule 132 (expression -> ID .)
    LOG_OP          reduce using rule 132 (expression -> ID .)
    POINTER         reduce using rule 132 (expression -> ID .)
    BREAK           reduce using rule 132 (expression -> ID .)
    ID              reduce using rule 132 (expression -> ID .)
    VAR             reduce using rule 132 (expression -> ID .)
    IF              reduce using rule 132 (expression -> ID .)
    FOR             reduce using rule 132 (expression -> ID .)
    GO              reduce using rule 132 (expression -> ID .)
    SWITCH          reduce using rule 132 (expression -> ID .)
    RETURN          reduce using rule 132 (expression -> ID .)
    DEFER           reduce using rule 132 (expression -> ID .)
    CONTINUE        reduce using rule 132 (expression -> ID .)
    SELECT          reduce using rule 132 (expression -> ID .)
    CHANNEL_OP      reduce using rule 132 (expression -> ID .)
    RBRACE          reduce using rule 132 (expression -> ID .)
    CASE            reduce using rule 132 (expression -> ID .)
    DEFAULT         reduce using rule 132 (expression -> ID .)
    COMMA           reduce using rule 132 (expression -> ID .)
    RPAREN          reduce using rule 132 (expression -> ID .)
    SEMICOLON       reduce using rule 132 (expression -> ID .)
    COLON           reduce using rule 132 (expression -> ID .)
    INCREMENT       shift and go to state 184
    DECREMENT       shift and go to state 185
    DOT             shift and go to state 298
    LBRACE          shift and go to state 299
    LBRACKET        shift and go to state 117
    LPAREN          shift and go to state 182

  ! LBRACE          [ reduce using rule 132 (expression -> ID .) ]
  ! LBRACKET        [ reduce using rule 132 (expression -> ID .) ]

    brackets                       shift and go to state 116

state 215

    (124) expression -> channel .

    LBRACE          reduce using rule 124 (expression -> channel .)
    ARITH_OP        reduce using rule 124 (expression -> channel .)
    REL_OP          reduce using rule 124 (expression -> channel .)
    LOG_OP          reduce using rule 124 (expression -> channel .)
    POINTER         reduce using rule 124 (expression -> channel .)
    BREAK           reduce using rule 124 (expression -> channel .)
    ID              reduce using rule 124 (expression -> channel .)
    VAR             reduce using rule 124 (expression -> channel .)
    LBRACKET        reduce using rule 124 (expression -> channel .)
    IF              reduce using rule 124 (expression -> channel .)
    FOR             reduce using rule 124 (expression -> channel .)
    GO              reduce using rule 124 (expression -> channel .)
    SWITCH          reduce using rule 124 (expression -> channel .)
    RETURN          reduce using rule 124 (expression -> channel .)
    DEFER           reduce using rule 124 (expression -> channel .)
    CONTINUE        reduce using rule 124 (expression -> channel .)
    SELECT          reduce using rule 124 (expression -> channel .)
    CHANNEL_OP      reduce using rule 124 (expression -> channel .)
    RBRACE          reduce using rule 124 (expression -> channel .)
    CASE            reduce using rule 124 (expression -> channel .)
    DEFAULT         reduce using rule 124 (expression -> channel .)
    COMMA           reduce using rule 124 (expression -> channel .)
    RPAREN          reduce using rule 124 (expression -> channel .)
    SEMICOLON       reduce using rule 124 (expression -> channel .)
    COLON           reduce using rule 124 (expression -> channel .)


state 216

    (125) expression -> increment .

    LBRACE          reduce using rule 125 (expression -> increment .)
    ARITH_OP        reduce using rule 125 (expression -> increment .)
    REL_OP          reduce using rule 125 (expression -> increment .)
    LOG_OP          reduce using rule 125 (expression -> increment .)
    POINTER         reduce using rule 125 (expression -> increment .)
    BREAK           reduce using rule 125 (expression -> increment .)
    ID              reduce using rule 125 (expression -> increment .)
    VAR             reduce using rule 125 (expression -> increment .)
    LBRACKET        reduce using rule 125 (expression -> increment .)
    IF              reduce using rule 125 (expression -> increment .)
    FOR             reduce using rule 125 (expression -> increment .)
    GO              reduce using rule 125 (expression -> increment .)
    SWITCH          reduce using rule 125 (expression -> increment .)
    RETURN          reduce using rule 125 (expression -> increment .)
    DEFER           reduce using rule 125 (expression -> increment .)
    CONTINUE        reduce using rule 125 (expression -> increment .)
    SELECT          reduce using rule 125 (expression -> increment .)
    CHANNEL_OP      reduce using rule 125 (expression -> increment .)
    RBRACE          reduce using rule 125 (expression -> increment .)
    CASE            reduce using rule 125 (expression -> increment .)
    DEFAULT         reduce using rule 125 (expression -> increment .)
    COMMA           reduce using rule 125 (expression -> increment .)
    RPAREN          reduce using rule 125 (expression -> increment .)
    SEMICOLON       reduce using rule 125 (expression -> increment .)
    COLON           reduce using rule 125 (expression -> increment .)


state 217

    (126) expression -> lambda .

    LBRACE          reduce using rule 126 (expression -> lambda .)
    ARITH_OP        reduce using rule 126 (expression -> lambda .)
    REL_OP          reduce using rule 126 (expression -> lambda .)
    LOG_OP          reduce using rule 126 (expression -> lambda .)
    POINTER         reduce using rule 126 (expression -> lambda .)
    BREAK           reduce using rule 126 (expression -> lambda .)
    ID              reduce using rule 126 (expression -> lambda .)
    VAR             reduce using rule 126 (expression -> lambda .)
    LBRACKET        reduce using rule 126 (expression -> lambda .)
    IF              reduce using rule 126 (expression -> lambda .)
    FOR             reduce using rule 126 (expression -> lambda .)
    GO              reduce using rule 126 (expression -> lambda .)
    SWITCH          reduce using rule 126 (expression -> lambda .)
    RETURN          reduce using rule 126 (expression -> lambda .)
    DEFER           reduce using rule 126 (expression -> lambda .)
    CONTINUE        reduce using rule 126 (expression -> lambda .)
    SELECT          reduce using rule 126 (expression -> lambda .)
    CHANNEL_OP      reduce using rule 126 (expression -> lambda .)
    RBRACE          reduce using rule 126 (expression -> lambda .)
    CASE            reduce using rule 126 (expression -> lambda .)
    DEFAULT         reduce using rule 126 (expression -> lambda .)
    COMMA           reduce using rule 126 (expression -> lambda .)
    RPAREN          reduce using rule 126 (expression -> lambda .)
    SEMICOLON       reduce using rule 126 (expression -> lambda .)
    COLON           reduce using rule 126 (expression -> lambda .)


state 218

    (127) expression -> decrement .

    LBRACE          reduce using rule 127 (expression -> decrement .)
    ARITH_OP        reduce using rule 127 (expression -> decrement .)
    REL_OP          reduce using rule 127 (expression -> decrement .)
    LOG_OP          reduce using rule 127 (expression -> decrement .)
    POINTER         reduce using rule 127 (expression -> decrement .)
    BREAK           reduce using rule 127 (expression -> decrement .)
    ID              reduce using rule 127 (expression -> decrement .)
    VAR             reduce using rule 127 (expression -> decrement .)
    LBRACKET        reduce using rule 127 (expression -> decrement .)
    IF              reduce using rule 127 (expression -> decrement .)
    FOR             reduce using rule 127 (expression -> decrement .)
    GO              reduce using rule 127 (expression -> decrement .)
    SWITCH          reduce using rule 127 (expression -> decrement .)
    RETURN          reduce using rule 127 (expression -> decrement .)
    DEFER           reduce using rule 127 (expression -> decrement .)
    CONTINUE        reduce using rule 127 (expression -> decrement .)
    SELECT          reduce using rule 127 (expression -> decrement .)
    CHANNEL_OP      reduce using rule 127 (expression -> decrement .)
    RBRACE          reduce using rule 127 (expression -> decrement .)
    CASE            reduce using rule 127 (expression -> decrement .)
    DEFAULT         reduce using rule 127 (expression -> decrement .)
    COMMA           reduce using rule 127 (expression -> decrement .)
    RPAREN          reduce using rule 127 (expression -> decrement .)
    SEMICOLON       reduce using rule 127 (expression -> decrement .)
    COLON           reduce using rule 127 (expression -> decrement .)


state 219

    (128) expression -> struct .

    LBRACE          reduce using rule 128 (expression -> struct .)
    ARITH_OP        reduce using rule 128 (expression -> struct .)
    REL_OP          reduce using rule 128 (expression -> struct .)
    LOG_OP          reduce using rule 128 (expression -> struct .)
    POINTER         reduce using rule 128 (expression -> struct .)
    BREAK           reduce using rule 128 (expression -> struct .)
    ID              reduce using rule 128 (expression -> struct .)
    VAR             reduce using rule 128 (expression -> struct .)
    LBRACKET        reduce using rule 128 (expression -> struct .)
    IF              reduce using rule 128 (expression -> struct .)
    FOR             reduce using rule 128 (expression -> struct .)
    GO              reduce using rule 128 (expression -> struct .)
    SWITCH          reduce using rule 128 (expression -> struct .)
    RETURN          reduce using rule 128 (expression -> struct .)
    DEFER           reduce using rule 128 (expression -> struct .)
    CONTINUE        reduce using rule 128 (expression -> struct .)
    SELECT          reduce using rule 128 (expression -> struct .)
    CHANNEL_OP      reduce using rule 128 (expression -> struct .)
    RBRACE          reduce using rule 128 (expression -> struct .)
    CASE            reduce using rule 128 (expression -> struct .)
    DEFAULT         reduce using rule 128 (expression -> struct .)
    COMMA           reduce using rule 128 (expression -> struct .)
    RPAREN          reduce using rule 128 (expression -> struct .)
    SEMICOLON       reduce using rule 128 (expression -> struct .)
    COLON           reduce using rule 128 (expression -> struct .)


state 220

    (129) expression -> callback .

    LBRACE          reduce using rule 129 (expression -> callback .)
    ARITH_OP        reduce using rule 129 (expression -> callback .)
    REL_OP          reduce using rule 129 (expression -> callback .)
    LOG_OP          reduce using rule 129 (expression -> callback .)
    POINTER         reduce using rule 129 (expression -> callback .)
    BREAK           reduce using rule 129 (expression -> callback .)
    ID              reduce using rule 129 (expression -> callback .)
    VAR             reduce using rule 129 (expression -> callback .)
    LBRACKET        reduce using rule 129 (expression -> callback .)
    IF              reduce using rule 129 (expression -> callback .)
    FOR             reduce using rule 129 (expression -> callback .)
    GO              reduce using rule 129 (expression -> callback .)
    SWITCH          reduce using rule 129 (expression -> callback .)
    RETURN          reduce using rule 129 (expression -> callback .)
    DEFER           reduce using rule 129 (expression -> callback .)
    CONTINUE        reduce using rule 129 (expression -> callback .)
    SELECT          reduce using rule 129 (expression -> callback .)
    CHANNEL_OP      reduce using rule 129 (expression -> callback .)
    RBRACE          reduce using rule 129 (expression -> callback .)
    CASE            reduce using rule 129 (expression -> callback .)
    DEFAULT         reduce using rule 129 (expression -> callback .)
    COMMA           reduce using rule 129 (expression -> callback .)
    RPAREN          reduce using rule 129 (expression -> callback .)
    SEMICOLON       reduce using rule 129 (expression -> callback .)
    COLON           reduce using rule 129 (expression -> callback .)


state 221

    (130) expression -> struct_declaretion .

    LBRACE          reduce using rule 130 (expression -> struct_declaretion .)
    ARITH_OP        reduce using rule 130 (expression -> struct_declaretion .)
    REL_OP          reduce using rule 130 (expression -> struct_declaretion .)
    LOG_OP          reduce using rule 130 (expression -> struct_declaretion .)
    POINTER         reduce using rule 130 (expression -> struct_declaretion .)
    BREAK           reduce using rule 130 (expression -> struct_declaretion .)
    ID              reduce using rule 130 (expression -> struct_declaretion .)
    VAR             reduce using rule 130 (expression -> struct_declaretion .)
    LBRACKET        reduce using rule 130 (expression -> struct_declaretion .)
    IF              reduce using rule 130 (expression -> struct_declaretion .)
    FOR             reduce using rule 130 (expression -> struct_declaretion .)
    GO              reduce using rule 130 (expression -> struct_declaretion .)
    SWITCH          reduce using rule 130 (expression -> struct_declaretion .)
    RETURN          reduce using rule 130 (expression -> struct_declaretion .)
    DEFER           reduce using rule 130 (expression -> struct_declaretion .)
    CONTINUE        reduce using rule 130 (expression -> struct_declaretion .)
    SELECT          reduce using rule 130 (expression -> struct_declaretion .)
    CHANNEL_OP      reduce using rule 130 (expression -> struct_declaretion .)
    RBRACE          reduce using rule 130 (expression -> struct_declaretion .)
    CASE            reduce using rule 130 (expression -> struct_declaretion .)
    DEFAULT         reduce using rule 130 (expression -> struct_declaretion .)
    COMMA           reduce using rule 130 (expression -> struct_declaretion .)
    RPAREN          reduce using rule 130 (expression -> struct_declaretion .)
    SEMICOLON       reduce using rule 130 (expression -> struct_declaretion .)
    COLON           reduce using rule 130 (expression -> struct_declaretion .)


state 222

    (131) expression -> address_pointer .

    LBRACE          reduce using rule 131 (expression -> address_pointer .)
    ARITH_OP        reduce using rule 131 (expression -> address_pointer .)
    REL_OP          reduce using rule 131 (expression -> address_pointer .)
    LOG_OP          reduce using rule 131 (expression -> address_pointer .)
    POINTER         reduce using rule 131 (expression -> address_pointer .)
    BREAK           reduce using rule 131 (expression -> address_pointer .)
    ID              reduce using rule 131 (expression -> address_pointer .)
    VAR             reduce using rule 131 (expression -> address_pointer .)
    LBRACKET        reduce using rule 131 (expression -> address_pointer .)
    IF              reduce using rule 131 (expression -> address_pointer .)
    FOR             reduce using rule 131 (expression -> address_pointer .)
    GO              reduce using rule 131 (expression -> address_pointer .)
    SWITCH          reduce using rule 131 (expression -> address_pointer .)
    RETURN          reduce using rule 131 (expression -> address_pointer .)
    DEFER           reduce using rule 131 (expression -> address_pointer .)
    CONTINUE        reduce using rule 131 (expression -> address_pointer .)
    SELECT          reduce using rule 131 (expression -> address_pointer .)
    CHANNEL_OP      reduce using rule 131 (expression -> address_pointer .)
    RBRACE          reduce using rule 131 (expression -> address_pointer .)
    CASE            reduce using rule 131 (expression -> address_pointer .)
    DEFAULT         reduce using rule 131 (expression -> address_pointer .)
    COMMA           reduce using rule 131 (expression -> address_pointer .)
    RPAREN          reduce using rule 131 (expression -> address_pointer .)
    SEMICOLON       reduce using rule 131 (expression -> address_pointer .)
    COLON           reduce using rule 131 (expression -> address_pointer .)


state 223

    (133) expression -> map_statement .

    LBRACE          reduce using rule 133 (expression -> map_statement .)
    ARITH_OP        reduce using rule 133 (expression -> map_statement .)
    REL_OP          reduce using rule 133 (expression -> map_statement .)
    LOG_OP          reduce using rule 133 (expression -> map_statement .)
    POINTER         reduce using rule 133 (expression -> map_statement .)
    BREAK           reduce using rule 133 (expression -> map_statement .)
    ID              reduce using rule 133 (expression -> map_statement .)
    VAR             reduce using rule 133 (expression -> map_statement .)
    LBRACKET        reduce using rule 133 (expression -> map_statement .)
    IF              reduce using rule 133 (expression -> map_statement .)
    FOR             reduce using rule 133 (expression -> map_statement .)
    GO              reduce using rule 133 (expression -> map_statement .)
    SWITCH          reduce using rule 133 (expression -> map_statement .)
    RETURN          reduce using rule 133 (expression -> map_statement .)
    DEFER           reduce using rule 133 (expression -> map_statement .)
    CONTINUE        reduce using rule 133 (expression -> map_statement .)
    SELECT          reduce using rule 133 (expression -> map_statement .)
    CHANNEL_OP      reduce using rule 133 (expression -> map_statement .)
    RBRACE          reduce using rule 133 (expression -> map_statement .)
    CASE            reduce using rule 133 (expression -> map_statement .)
    DEFAULT         reduce using rule 133 (expression -> map_statement .)
    COMMA           reduce using rule 133 (expression -> map_statement .)
    RPAREN          reduce using rule 133 (expression -> map_statement .)
    SEMICOLON       reduce using rule 133 (expression -> map_statement .)
    COLON           reduce using rule 133 (expression -> map_statement .)


state 224

    (134) expression -> map .

    LBRACE          reduce using rule 134 (expression -> map .)
    ARITH_OP        reduce using rule 134 (expression -> map .)
    REL_OP          reduce using rule 134 (expression -> map .)
    LOG_OP          reduce using rule 134 (expression -> map .)
    POINTER         reduce using rule 134 (expression -> map .)
    BREAK           reduce using rule 134 (expression -> map .)
    ID              reduce using rule 134 (expression -> map .)
    VAR             reduce using rule 134 (expression -> map .)
    LBRACKET        reduce using rule 134 (expression -> map .)
    IF              reduce using rule 134 (expression -> map .)
    FOR             reduce using rule 134 (expression -> map .)
    GO              reduce using rule 134 (expression -> map .)
    SWITCH          reduce using rule 134 (expression -> map .)
    RETURN          reduce using rule 134 (expression -> map .)
    DEFER           reduce using rule 134 (expression -> map .)
    CONTINUE        reduce using rule 134 (expression -> map .)
    SELECT          reduce using rule 134 (expression -> map .)
    CHANNEL_OP      reduce using rule 134 (expression -> map .)
    RBRACE          reduce using rule 134 (expression -> map .)
    CASE            reduce using rule 134 (expression -> map .)
    DEFAULT         reduce using rule 134 (expression -> map .)
    COMMA           reduce using rule 134 (expression -> map .)
    RPAREN          reduce using rule 134 (expression -> map .)
    SEMICOLON       reduce using rule 134 (expression -> map .)
    COLON           reduce using rule 134 (expression -> map .)


state 225

    (92) lambda -> FUNC . LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> FUNC . LPAREN args RPAREN LBRACE content RBRACE

    LPAREN          shift and go to state 300


state 226

    (190) callback -> empty .
    (146) map -> empty .

  ! reduce/reduce conflict for LBRACE resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for ARITH_OP resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for REL_OP resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for POINTER resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for GO resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for SWITCH resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for DEFER resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for SELECT resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for COMMA resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for COLON resolved using rule 146 (map -> empty .)
    LBRACE          reduce using rule 146 (map -> empty .)
    ARITH_OP        reduce using rule 146 (map -> empty .)
    REL_OP          reduce using rule 146 (map -> empty .)
    LOG_OP          reduce using rule 146 (map -> empty .)
    POINTER         reduce using rule 146 (map -> empty .)
    BREAK           reduce using rule 146 (map -> empty .)
    ID              reduce using rule 146 (map -> empty .)
    VAR             reduce using rule 146 (map -> empty .)
    LBRACKET        reduce using rule 146 (map -> empty .)
    IF              reduce using rule 146 (map -> empty .)
    FOR             reduce using rule 146 (map -> empty .)
    GO              reduce using rule 146 (map -> empty .)
    SWITCH          reduce using rule 146 (map -> empty .)
    RETURN          reduce using rule 146 (map -> empty .)
    DEFER           reduce using rule 146 (map -> empty .)
    CONTINUE        reduce using rule 146 (map -> empty .)
    SELECT          reduce using rule 146 (map -> empty .)
    CHANNEL_OP      reduce using rule 146 (map -> empty .)
    RBRACE          reduce using rule 146 (map -> empty .)
    CASE            reduce using rule 146 (map -> empty .)
    DEFAULT         reduce using rule 146 (map -> empty .)
    RPAREN          reduce using rule 146 (map -> empty .)
    COMMA           reduce using rule 146 (map -> empty .)
    SEMICOLON       reduce using rule 146 (map -> empty .)
    COLON           reduce using rule 146 (map -> empty .)

  ! LBRACE          [ reduce using rule 190 (callback -> empty .) ]
  ! ARITH_OP        [ reduce using rule 190 (callback -> empty .) ]
  ! REL_OP          [ reduce using rule 190 (callback -> empty .) ]
  ! LOG_OP          [ reduce using rule 190 (callback -> empty .) ]
  ! POINTER         [ reduce using rule 190 (callback -> empty .) ]
  ! BREAK           [ reduce using rule 190 (callback -> empty .) ]
  ! ID              [ reduce using rule 190 (callback -> empty .) ]
  ! VAR             [ reduce using rule 190 (callback -> empty .) ]
  ! LBRACKET        [ reduce using rule 190 (callback -> empty .) ]
  ! IF              [ reduce using rule 190 (callback -> empty .) ]
  ! FOR             [ reduce using rule 190 (callback -> empty .) ]
  ! GO              [ reduce using rule 190 (callback -> empty .) ]
  ! SWITCH          [ reduce using rule 190 (callback -> empty .) ]
  ! RETURN          [ reduce using rule 190 (callback -> empty .) ]
  ! DEFER           [ reduce using rule 190 (callback -> empty .) ]
  ! CONTINUE        [ reduce using rule 190 (callback -> empty .) ]
  ! SELECT          [ reduce using rule 190 (callback -> empty .) ]
  ! CHANNEL_OP      [ reduce using rule 190 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 190 (callback -> empty .) ]
  ! CASE            [ reduce using rule 190 (callback -> empty .) ]
  ! DEFAULT         [ reduce using rule 190 (callback -> empty .) ]
  ! RPAREN          [ reduce using rule 190 (callback -> empty .) ]
  ! COMMA           [ reduce using rule 190 (callback -> empty .) ]
  ! SEMICOLON       [ reduce using rule 190 (callback -> empty .) ]
  ! COLON           [ reduce using rule 190 (callback -> empty .) ]


state 227

    (183) address_pointer -> ADDRESS . ID

    ID              shift and go to state 301


state 228

    (143) map_statement -> MAP . LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> MAP . LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> MAP . LBRACKET TYPES RBRACKET TYPES

    LBRACKET        shift and go to state 302


state 229

    (135) for -> FOR LBRACE . content RBRACE
    (193) value -> LBRACE . values RBRACE
    (147) map -> LBRACE . map RBRACE
    (148) map -> LBRACE . map RBRACE COMMA map
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (66) values -> . value COMMA values
    (67) values -> . value
    (68) values -> . empty
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 305
    LBRACE          shift and go to state 290
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 303
    values                         shift and go to state 119
    map                            shift and go to state 291
    empty                          shift and go to state 304
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    value                          shift and go to state 292
    map_position                   shift and go to state 150
    function                       shift and go to state 152
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 230

    (136) for -> FOR NOT . ID LBRACE content RBRACE
    (122) expression -> NOT . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    ID              shift and go to state 306
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 296
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 231

    (139) for -> FOR ID . COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> FOR ID . COLON_EQUAL RANGE ID LBRACE content RBRACE
    (123) expression -> ID . COLON_EQUAL channel
    (132) expression -> ID .
    (142) for_declaration -> ID . COLON_EQUAL NUMBER
    (181) increment -> ID . INCREMENT
    (182) decrement -> ID . DECREMENT
    (184) struct -> ID . DOT ID
    (185) struct -> ID . DOT struct
    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (156) struct_declaretion -> ID . LBRACE struct_declaretion_values RBRACE
    (197) map_varible -> ID . brackets
    (179) pointer -> ID . LBRACKET NUMBER RBRACKET
    (180) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> ID . LPAREN parameters RPAREN
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACE resolved as shift
    COMMA           shift and go to state 307
    COLON_EQUAL     shift and go to state 308
    ARITH_OP        reduce using rule 132 (expression -> ID .)
    REL_OP          reduce using rule 132 (expression -> ID .)
    LOG_OP          reduce using rule 132 (expression -> ID .)
    POINTER         reduce using rule 132 (expression -> ID .)
    INCREMENT       shift and go to state 184
    DECREMENT       shift and go to state 185
    DOT             shift and go to state 298
    LBRACE          shift and go to state 299
    LBRACKET        shift and go to state 117
    LPAREN          shift and go to state 182

  ! LBRACE          [ reduce using rule 132 (expression -> ID .) ]

    brackets                       shift and go to state 116

state 232

    (137) for -> FOR expression . LBRACE content RBRACE
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    LBRACE          shift and go to state 309
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 233

    (138) for -> FOR for_declaration . SEMICOLON expression SEMICOLON expression LBRACE content RBRACE

    SEMICOLON       shift and go to state 310


state 234

    (140) for -> FOR UNDERSCORE . COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE

    COMMA           shift and go to state 311


state 235

    (110) goroutine -> GO callback .

    BREAK           reduce using rule 110 (goroutine -> GO callback .)
    ID              reduce using rule 110 (goroutine -> GO callback .)
    VAR             reduce using rule 110 (goroutine -> GO callback .)
    LBRACKET        reduce using rule 110 (goroutine -> GO callback .)
    IF              reduce using rule 110 (goroutine -> GO callback .)
    FOR             reduce using rule 110 (goroutine -> GO callback .)
    GO              reduce using rule 110 (goroutine -> GO callback .)
    SWITCH          reduce using rule 110 (goroutine -> GO callback .)
    RETURN          reduce using rule 110 (goroutine -> GO callback .)
    DEFER           reduce using rule 110 (goroutine -> GO callback .)
    CONTINUE        reduce using rule 110 (goroutine -> GO callback .)
    SELECT          reduce using rule 110 (goroutine -> GO callback .)
    CHANNEL_OP      reduce using rule 110 (goroutine -> GO callback .)
    RBRACE          reduce using rule 110 (goroutine -> GO callback .)
    CASE            reduce using rule 110 (goroutine -> GO callback .)
    DEFAULT         reduce using rule 110 (goroutine -> GO callback .)


state 236

    (111) goroutine -> GO lambda . LPAREN parameters RPAREN

    LPAREN          shift and go to state 312


state 237

    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (30) function -> ID . LPAREN parameters RPAREN

    DOT             shift and go to state 313
    LPAREN          shift and go to state 182


state 238

    (190) callback -> empty .

    BREAK           reduce using rule 190 (callback -> empty .)
    ID              reduce using rule 190 (callback -> empty .)
    VAR             reduce using rule 190 (callback -> empty .)
    LBRACKET        reduce using rule 190 (callback -> empty .)
    IF              reduce using rule 190 (callback -> empty .)
    FOR             reduce using rule 190 (callback -> empty .)
    GO              reduce using rule 190 (callback -> empty .)
    SWITCH          reduce using rule 190 (callback -> empty .)
    RETURN          reduce using rule 190 (callback -> empty .)
    DEFER           reduce using rule 190 (callback -> empty .)
    CONTINUE        reduce using rule 190 (callback -> empty .)
    SELECT          reduce using rule 190 (callback -> empty .)
    CHANNEL_OP      reduce using rule 190 (callback -> empty .)
    RBRACE          reduce using rule 190 (callback -> empty .)
    CASE            reduce using rule 190 (callback -> empty .)
    DEFAULT         reduce using rule 190 (callback -> empty .)
    LBRACE          reduce using rule 190 (callback -> empty .)
    ARITH_OP        reduce using rule 190 (callback -> empty .)
    REL_OP          reduce using rule 190 (callback -> empty .)
    LOG_OP          reduce using rule 190 (callback -> empty .)
    POINTER         reduce using rule 190 (callback -> empty .)
    COMMA           reduce using rule 190 (callback -> empty .)
    RPAREN          reduce using rule 190 (callback -> empty .)
    SEMICOLON       reduce using rule 190 (callback -> empty .)
    COLON           reduce using rule 190 (callback -> empty .)


state 239

    (99) switch -> SWITCH ID . LBRACE cases_value default RBRACE

    LBRACE          shift and go to state 314


state 240

    (100) switch -> SWITCH LBRACE . cases_rel default RBRACE
    (101) cases_rel -> . CASE case_condition COLON content cases_rel
    (102) cases_rel -> . empty
    (198) empty -> .

    CASE            shift and go to state 316
    DEFAULT         reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)

    cases_rel                      shift and go to state 315
    empty                          shift and go to state 317

state 241

    (154) return -> RETURN expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    BREAK           reduce using rule 154 (return -> RETURN expression .)
    ID              reduce using rule 154 (return -> RETURN expression .)
    VAR             reduce using rule 154 (return -> RETURN expression .)
    LBRACKET        reduce using rule 154 (return -> RETURN expression .)
    IF              reduce using rule 154 (return -> RETURN expression .)
    FOR             reduce using rule 154 (return -> RETURN expression .)
    GO              reduce using rule 154 (return -> RETURN expression .)
    SWITCH          reduce using rule 154 (return -> RETURN expression .)
    RETURN          reduce using rule 154 (return -> RETURN expression .)
    DEFER           reduce using rule 154 (return -> RETURN expression .)
    CONTINUE        reduce using rule 154 (return -> RETURN expression .)
    SELECT          reduce using rule 154 (return -> RETURN expression .)
    CHANNEL_OP      reduce using rule 154 (return -> RETURN expression .)
    RBRACE          reduce using rule 154 (return -> RETURN expression .)
    CASE            reduce using rule 154 (return -> RETURN expression .)
    DEFAULT         reduce using rule 154 (return -> RETURN expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 242

    (98) defer -> DEFER function .

    BREAK           reduce using rule 98 (defer -> DEFER function .)
    ID              reduce using rule 98 (defer -> DEFER function .)
    VAR             reduce using rule 98 (defer -> DEFER function .)
    LBRACKET        reduce using rule 98 (defer -> DEFER function .)
    IF              reduce using rule 98 (defer -> DEFER function .)
    FOR             reduce using rule 98 (defer -> DEFER function .)
    GO              reduce using rule 98 (defer -> DEFER function .)
    SWITCH          reduce using rule 98 (defer -> DEFER function .)
    RETURN          reduce using rule 98 (defer -> DEFER function .)
    DEFER           reduce using rule 98 (defer -> DEFER function .)
    CONTINUE        reduce using rule 98 (defer -> DEFER function .)
    SELECT          reduce using rule 98 (defer -> DEFER function .)
    CHANNEL_OP      reduce using rule 98 (defer -> DEFER function .)
    RBRACE          reduce using rule 98 (defer -> DEFER function .)
    CASE            reduce using rule 98 (defer -> DEFER function .)
    DEFAULT         reduce using rule 98 (defer -> DEFER function .)


state 243

    (30) function -> ID . LPAREN parameters RPAREN

    LPAREN          shift and go to state 182


state 244

    (94) select -> SELECT LBRACE . select_cases RBRACE
    (95) select_cases -> . CASE expression COLON content select_cases
    (96) select_cases -> . DEFAULT COLON content
    (97) select_cases -> . empty
    (198) empty -> .

    CASE            shift and go to state 319
    DEFAULT         shift and go to state 320
    RBRACE          reduce using rule 198 (empty -> .)

    select_cases                   shift and go to state 318
    empty                          shift and go to state 321

state 245

    (88) channel -> CHANNEL_OP value .

    BREAK           reduce using rule 88 (channel -> CHANNEL_OP value .)
    ID              reduce using rule 88 (channel -> CHANNEL_OP value .)
    VAR             reduce using rule 88 (channel -> CHANNEL_OP value .)
    LBRACKET        reduce using rule 88 (channel -> CHANNEL_OP value .)
    IF              reduce using rule 88 (channel -> CHANNEL_OP value .)
    FOR             reduce using rule 88 (channel -> CHANNEL_OP value .)
    GO              reduce using rule 88 (channel -> CHANNEL_OP value .)
    SWITCH          reduce using rule 88 (channel -> CHANNEL_OP value .)
    RETURN          reduce using rule 88 (channel -> CHANNEL_OP value .)
    DEFER           reduce using rule 88 (channel -> CHANNEL_OP value .)
    CONTINUE        reduce using rule 88 (channel -> CHANNEL_OP value .)
    SELECT          reduce using rule 88 (channel -> CHANNEL_OP value .)
    CHANNEL_OP      reduce using rule 88 (channel -> CHANNEL_OP value .)
    RBRACE          reduce using rule 88 (channel -> CHANNEL_OP value .)
    CASE            reduce using rule 88 (channel -> CHANNEL_OP value .)
    DEFAULT         reduce using rule 88 (channel -> CHANNEL_OP value .)
    LBRACE          reduce using rule 88 (channel -> CHANNEL_OP value .)
    ARITH_OP        reduce using rule 88 (channel -> CHANNEL_OP value .)
    REL_OP          reduce using rule 88 (channel -> CHANNEL_OP value .)
    LOG_OP          reduce using rule 88 (channel -> CHANNEL_OP value .)
    POINTER         reduce using rule 88 (channel -> CHANNEL_OP value .)
    COMMA           reduce using rule 88 (channel -> CHANNEL_OP value .)
    RPAREN          reduce using rule 88 (channel -> CHANNEL_OP value .)
    SEMICOLON       reduce using rule 88 (channel -> CHANNEL_OP value .)
    COLON           reduce using rule 88 (channel -> CHANNEL_OP value .)


state 246

    (89) channel -> CHANNEL_OP ID .
    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (156) struct_declaretion -> ID . LBRACE struct_declaretion_values RBRACE
    (197) map_varible -> ID . brackets
    (179) pointer -> ID . LBRACKET NUMBER RBRACKET
    (180) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> ID . LPAREN parameters RPAREN
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
    BREAK           reduce using rule 89 (channel -> CHANNEL_OP ID .)
    ID              reduce using rule 89 (channel -> CHANNEL_OP ID .)
    VAR             reduce using rule 89 (channel -> CHANNEL_OP ID .)
    IF              reduce using rule 89 (channel -> CHANNEL_OP ID .)
    FOR             reduce using rule 89 (channel -> CHANNEL_OP ID .)
    GO              reduce using rule 89 (channel -> CHANNEL_OP ID .)
    SWITCH          reduce using rule 89 (channel -> CHANNEL_OP ID .)
    RETURN          reduce using rule 89 (channel -> CHANNEL_OP ID .)
    DEFER           reduce using rule 89 (channel -> CHANNEL_OP ID .)
    CONTINUE        reduce using rule 89 (channel -> CHANNEL_OP ID .)
    SELECT          reduce using rule 89 (channel -> CHANNEL_OP ID .)
    CHANNEL_OP      reduce using rule 89 (channel -> CHANNEL_OP ID .)
    RBRACE          reduce using rule 89 (channel -> CHANNEL_OP ID .)
    CASE            reduce using rule 89 (channel -> CHANNEL_OP ID .)
    DEFAULT         reduce using rule 89 (channel -> CHANNEL_OP ID .)
    ARITH_OP        reduce using rule 89 (channel -> CHANNEL_OP ID .)
    REL_OP          reduce using rule 89 (channel -> CHANNEL_OP ID .)
    LOG_OP          reduce using rule 89 (channel -> CHANNEL_OP ID .)
    POINTER         reduce using rule 89 (channel -> CHANNEL_OP ID .)
    COMMA           reduce using rule 89 (channel -> CHANNEL_OP ID .)
    RPAREN          reduce using rule 89 (channel -> CHANNEL_OP ID .)
    SEMICOLON       reduce using rule 89 (channel -> CHANNEL_OP ID .)
    COLON           reduce using rule 89 (channel -> CHANNEL_OP ID .)
    DOT             shift and go to state 313
    LBRACE          shift and go to state 299
    LBRACKET        shift and go to state 117
    LPAREN          shift and go to state 182

  ! LBRACKET        [ reduce using rule 89 (channel -> CHANNEL_OP ID .) ]
  ! LBRACE          [ reduce using rule 89 (channel -> CHANNEL_OP ID .) ]

    brackets                       shift and go to state 116

state 247

    (90) channel -> CHANNEL_OP callback .

    BREAK           reduce using rule 90 (channel -> CHANNEL_OP callback .)
    ID              reduce using rule 90 (channel -> CHANNEL_OP callback .)
    VAR             reduce using rule 90 (channel -> CHANNEL_OP callback .)
    LBRACKET        reduce using rule 90 (channel -> CHANNEL_OP callback .)
    IF              reduce using rule 90 (channel -> CHANNEL_OP callback .)
    FOR             reduce using rule 90 (channel -> CHANNEL_OP callback .)
    GO              reduce using rule 90 (channel -> CHANNEL_OP callback .)
    SWITCH          reduce using rule 90 (channel -> CHANNEL_OP callback .)
    RETURN          reduce using rule 90 (channel -> CHANNEL_OP callback .)
    DEFER           reduce using rule 90 (channel -> CHANNEL_OP callback .)
    CONTINUE        reduce using rule 90 (channel -> CHANNEL_OP callback .)
    SELECT          reduce using rule 90 (channel -> CHANNEL_OP callback .)
    CHANNEL_OP      reduce using rule 90 (channel -> CHANNEL_OP callback .)
    RBRACE          reduce using rule 90 (channel -> CHANNEL_OP callback .)
    CASE            reduce using rule 90 (channel -> CHANNEL_OP callback .)
    DEFAULT         reduce using rule 90 (channel -> CHANNEL_OP callback .)
    LBRACE          reduce using rule 90 (channel -> CHANNEL_OP callback .)
    ARITH_OP        reduce using rule 90 (channel -> CHANNEL_OP callback .)
    REL_OP          reduce using rule 90 (channel -> CHANNEL_OP callback .)
    LOG_OP          reduce using rule 90 (channel -> CHANNEL_OP callback .)
    POINTER         reduce using rule 90 (channel -> CHANNEL_OP callback .)
    COMMA           reduce using rule 90 (channel -> CHANNEL_OP callback .)
    RPAREN          reduce using rule 90 (channel -> CHANNEL_OP callback .)
    SEMICOLON       reduce using rule 90 (channel -> CHANNEL_OP callback .)
    COLON           reduce using rule 90 (channel -> CHANNEL_OP callback .)


state 248

    (91) channel -> CHANNEL_OP struct_declaretion .

    BREAK           reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    ID              reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    VAR             reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    LBRACKET        reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    IF              reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    FOR             reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    GO              reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    SWITCH          reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    RETURN          reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    DEFER           reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    CONTINUE        reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    SELECT          reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    CHANNEL_OP      reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    RBRACE          reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    CASE            reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    DEFAULT         reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    LBRACE          reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    ARITH_OP        reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    REL_OP          reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    LOG_OP          reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    POINTER         reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    COMMA           reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    RPAREN          reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    SEMICOLON       reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)
    COLON           reduce using rule 91 (channel -> CHANNEL_OP struct_declaretion .)


state 249

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args . RPAREN LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args . RPAREN TYPES LBRACE content RBRACE

    RPAREN          shift and go to state 322


state 250

    (60) array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values . RBRACE

    RBRACE          shift and go to state 323


state 251

    (64) slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .

    FUNC            reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    VAR             reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    TYPE            reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    CONST           reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    $end            reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    COMMA           reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    RPAREN          reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    LBRACE          reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    ID              reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    RBRACE          reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    EQUAL           reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    BREAK           reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    LBRACKET        reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    IF              reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    FOR             reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    GO              reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    SWITCH          reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    RETURN          reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    DEFER           reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    CONTINUE        reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    SELECT          reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    CHANNEL_OP      reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    CASE            reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)
    DEFAULT         reduce using rule 64 (slice_statement -> LBRACKET RBRACKET TYPES LBRACE values RBRACE .)


state 252

    (61) array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .
    (62) array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES . LBRACE values RBRACE

  ! shift/reduce conflict for LBRACE resolved as shift
    FUNC            reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    VAR             reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    TYPE            reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    CONST           reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    $end            reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    COMMA           reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    RPAREN          reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    ID              reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    RBRACE          reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    EQUAL           reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    BREAK           reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    LBRACKET        reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    IF              reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    FOR             reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    GO              reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    SWITCH          reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    RETURN          reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    DEFER           reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    CONTINUE        reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    SELECT          reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    CHANNEL_OP      reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    CASE            reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    DEFAULT         reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .)
    LBRACE          shift and go to state 324

  ! LBRACE          [ reduce using rule 61 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES .) ]


state 253

    (18) method_list -> ID LPAREN args RPAREN . types method_list
    (52) types -> . TYPES
    (53) types -> . array_statement
    (54) types -> . pointer_statement
    (55) types -> . slice_statement
    (56) types -> . MAP LBRACKET TYPES RBRACKET
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (57) pointer_statement -> . POINTER types
    (58) pointer_statement -> . POINTER ID
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 325
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 254

    (179) pointer -> ID LBRACKET NUMBER RBRACKET .
    (46) brackets -> LBRACKET NUMBER RBRACKET . brackets
    (47) brackets -> LBRACKET NUMBER RBRACKET .
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

  ! reduce/reduce conflict for ID resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for RPAREN resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for COMMA resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for RBRACE resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for COLON resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for LBRACE resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for ARITH_OP resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for REL_OP resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for POINTER resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for BREAK resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for VAR resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for FOR resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for GO resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for SWITCH resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for DEFER resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for SELECT resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for CASE resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! shift/reduce conflict for LBRACKET resolved as shift
    ID              reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    COMMA           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    RBRACE          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    COLON           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    LBRACE          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    ARITH_OP        reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    REL_OP          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    LOG_OP          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    POINTER         reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    BREAK           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    VAR             reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    IF              reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    FOR             reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    GO              reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    SWITCH          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    RETURN          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    DEFER           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    CONTINUE        reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    SELECT          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    CHANNEL_OP      reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    DEFAULT         reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    LBRACKET        shift and go to state 257

  ! ID              [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! RPAREN          [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! COMMA           [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! RBRACE          [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! COLON           [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! LBRACE          [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! ARITH_OP        [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! REL_OP          [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! LOG_OP          [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! POINTER         [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! BREAK           [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! VAR             [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! LBRACKET        [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! IF              [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! FOR             [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! GO              [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! SWITCH          [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! RETURN          [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! DEFER           [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! CONTINUE        [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! SELECT          [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! CHANNEL_OP      [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! CASE            [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! DEFAULT         [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! SEMICOLON       [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! LBRACKET        [ reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .) ]

    brackets                       shift and go to state 258

state 255

    (180) pointer -> ID LBRACKET NUMBER COLON . NUMBER RBRACKET

    NUMBER          shift and go to state 326


state 256

    (66) values -> value COMMA values .

    RBRACE          reduce using rule 66 (values -> value COMMA values .)


state 257

    (46) brackets -> LBRACKET . NUMBER RBRACKET brackets
    (47) brackets -> LBRACKET . NUMBER RBRACKET
    (48) brackets -> LBRACKET . STRING RBRACKET brackets
    (49) brackets -> LBRACKET . STRING RBRACKET
    (50) brackets -> LBRACKET . ID RBRACKET
    (51) brackets -> LBRACKET . ID RBRACKET brackets

    NUMBER          shift and go to state 327
    STRING          shift and go to state 127
    ID              shift and go to state 128


state 258

    (46) brackets -> LBRACKET NUMBER RBRACKET brackets .

    TYPES           reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    ID              reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    RPAREN          reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    COMMA           reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    RBRACE          reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    COLON           reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    LBRACE          reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    ARITH_OP        reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    REL_OP          reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    LOG_OP          reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    POINTER         reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    BREAK           reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    VAR             reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    LBRACKET        reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    IF              reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    FOR             reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    GO              reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    SWITCH          reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    RETURN          reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    DEFER           reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    CONTINUE        reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    SELECT          reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    CHANNEL_OP      reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    CASE            reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    DEFAULT         reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)
    SEMICOLON       reduce using rule 46 (brackets -> LBRACKET NUMBER RBRACKET brackets .)


state 259

    (48) brackets -> LBRACKET STRING RBRACKET brackets .

    TYPES           reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    ID              reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    RPAREN          reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    COMMA           reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    RBRACE          reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    COLON           reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    LBRACE          reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    ARITH_OP        reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    REL_OP          reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    LOG_OP          reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    POINTER         reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    BREAK           reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    VAR             reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    LBRACKET        reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    IF              reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    FOR             reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    GO              reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    SWITCH          reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    RETURN          reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    DEFER           reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    CONTINUE        reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    SELECT          reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    CHANNEL_OP      reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    CASE            reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    DEFAULT         reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)
    SEMICOLON       reduce using rule 48 (brackets -> LBRACKET STRING RBRACKET brackets .)


state 260

    (51) brackets -> LBRACKET ID RBRACKET brackets .

    TYPES           reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    ID              reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    RPAREN          reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    COMMA           reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    RBRACE          reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    COLON           reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    LBRACE          reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    ARITH_OP        reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    REL_OP          reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    LOG_OP          reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    POINTER         reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    BREAK           reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    VAR             reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    LBRACKET        reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    IF              reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    FOR             reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    GO              reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    SWITCH          reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    RETURN          reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    DEFER           reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    CONTINUE        reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    SELECT          reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    CHANNEL_OP      reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    CASE            reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    DEFAULT         reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)
    SEMICOLON       reduce using rule 51 (brackets -> LBRACKET ID RBRACKET brackets .)


state 261

    (28) function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE .

    FUNC            reduce using rule 28 (function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE .)
    VAR             reduce using rule 28 (function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE .)
    TYPE            reduce using rule 28 (function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE .)
    CONST           reduce using rule 28 (function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE .)
    $end            reduce using rule 28 (function_statement -> FUNC ID LPAREN args RPAREN types LBRACE content RBRACE .)


state 262

    (81) content -> ID channel content .

    RBRACE          reduce using rule 81 (content -> ID channel content .)
    CASE            reduce using rule 81 (content -> ID channel content .)
    DEFAULT         reduce using rule 81 (content -> ID channel content .)


state 263

    (164) variable_statement -> ID map_position EQUAL . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 328
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 264

    (174) variable_redeclaration -> ID EQUAL expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    BREAK           reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    ID              reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    VAR             reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    LBRACKET        reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    IF              reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    FOR             reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    GO              reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    SWITCH          reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    RETURN          reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    DEFER           reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    CONTINUE        reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    SELECT          reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    CHANNEL_OP      reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    RBRACE          reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    CASE            reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    DEFAULT         reduce using rule 174 (variable_redeclaration -> ID EQUAL expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 265

    (165) variable_statement -> ID COLON_EQUAL expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    BREAK           reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    ID              reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    VAR             reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    LBRACKET        reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    IF              reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    FOR             reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    GO              reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    SWITCH          reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    RETURN          reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    DEFER           reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    CONTINUE        reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    SELECT          reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    CHANNEL_OP      reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    RBRACE          reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    CASE            reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    DEFAULT         reduce using rule 165 (variable_statement -> ID COLON_EQUAL expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 266

    (167) variable_statement -> ID COLON_EQUAL slice_statement .

    BREAK           reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    ID              reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    VAR             reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    LBRACKET        reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    IF              reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    FOR             reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    GO              reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    SWITCH          reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    RETURN          reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    DEFER           reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    CONTINUE        reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    SELECT          reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    CHANNEL_OP      reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    RBRACE          reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    CASE            reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)
    DEFAULT         reduce using rule 167 (variable_statement -> ID COLON_EQUAL slice_statement .)


state 267

    (168) variable_statement -> ID COLON_EQUAL array_statement .

    BREAK           reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    ID              reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    VAR             reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    LBRACKET        reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    IF              reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    FOR             reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    GO              reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    SWITCH          reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    RETURN          reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    DEFER           reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    CONTINUE        reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    SELECT          reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    CHANNEL_OP      reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    RBRACE          reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    CASE            reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)
    DEFAULT         reduce using rule 168 (variable_statement -> ID COLON_EQUAL array_statement .)


state 268

    (63) slice_statement -> LBRACKET . RBRACKET TYPES
    (64) slice_statement -> LBRACKET . RBRACKET TYPES LBRACE values RBRACE
    (59) array_statement -> LBRACKET . NUMBER RBRACKET TYPES
    (60) array_statement -> LBRACKET . NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> LBRACKET . DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE

    RBRACKET        shift and go to state 63
    NUMBER          shift and go to state 62
    DOT             shift and go to state 64


state 269

    (187) callback -> ID DOT ID . LPAREN ID LPAREN ID RPAREN RPAREN
    (176) variable_redeclaration -> ID DOT ID . EQUAL expression
    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (30) function -> ID . LPAREN parameters RPAREN

    LPAREN          shift and go to state 329
    EQUAL           shift and go to state 330
    DOT             shift and go to state 313


state 270

    (189) callback -> ID DOT callback .

    BREAK           reduce using rule 189 (callback -> ID DOT callback .)
    ID              reduce using rule 189 (callback -> ID DOT callback .)
    VAR             reduce using rule 189 (callback -> ID DOT callback .)
    LBRACKET        reduce using rule 189 (callback -> ID DOT callback .)
    IF              reduce using rule 189 (callback -> ID DOT callback .)
    FOR             reduce using rule 189 (callback -> ID DOT callback .)
    GO              reduce using rule 189 (callback -> ID DOT callback .)
    SWITCH          reduce using rule 189 (callback -> ID DOT callback .)
    RETURN          reduce using rule 189 (callback -> ID DOT callback .)
    DEFER           reduce using rule 189 (callback -> ID DOT callback .)
    CONTINUE        reduce using rule 189 (callback -> ID DOT callback .)
    SELECT          reduce using rule 189 (callback -> ID DOT callback .)
    CHANNEL_OP      reduce using rule 189 (callback -> ID DOT callback .)
    RBRACE          reduce using rule 189 (callback -> ID DOT callback .)
    CASE            reduce using rule 189 (callback -> ID DOT callback .)
    DEFAULT         reduce using rule 189 (callback -> ID DOT callback .)
    LBRACE          reduce using rule 189 (callback -> ID DOT callback .)
    ARITH_OP        reduce using rule 189 (callback -> ID DOT callback .)
    REL_OP          reduce using rule 189 (callback -> ID DOT callback .)
    LOG_OP          reduce using rule 189 (callback -> ID DOT callback .)
    POINTER         reduce using rule 189 (callback -> ID DOT callback .)
    COMMA           reduce using rule 189 (callback -> ID DOT callback .)
    RPAREN          reduce using rule 189 (callback -> ID DOT callback .)
    SEMICOLON       reduce using rule 189 (callback -> ID DOT callback .)
    COLON           reduce using rule 189 (callback -> ID DOT callback .)


state 271

    (30) function -> ID LPAREN parameters . RPAREN

    RPAREN          shift and go to state 331


state 272

    (31) parameters -> expression .
    (33) parameters -> expression . COMMA parameters
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    RPAREN          reduce using rule 31 (parameters -> expression .)
    COMMA           shift and go to state 332
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 273

    (32) parameters -> CHAN . TYPES

    TYPES           shift and go to state 333


state 274

    (34) parameters -> empty .
    (190) callback -> empty .
    (146) map -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 34 (parameters -> empty .)
  ! reduce/reduce conflict for COMMA resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for ARITH_OP resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for REL_OP resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for LOG_OP resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for POINTER resolved using rule 146 (map -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (parameters -> empty .)
    RPAREN          reduce using rule 34 (parameters -> empty .)
    COMMA           reduce using rule 146 (map -> empty .)
    ARITH_OP        reduce using rule 146 (map -> empty .)
    REL_OP          reduce using rule 146 (map -> empty .)
    LOG_OP          reduce using rule 146 (map -> empty .)
    POINTER         reduce using rule 146 (map -> empty .)

  ! COMMA           [ reduce using rule 190 (callback -> empty .) ]
  ! ARITH_OP        [ reduce using rule 190 (callback -> empty .) ]
  ! REL_OP          [ reduce using rule 190 (callback -> empty .) ]
  ! LOG_OP          [ reduce using rule 190 (callback -> empty .) ]
  ! POINTER         [ reduce using rule 190 (callback -> empty .) ]
  ! RPAREN          [ reduce using rule 190 (callback -> empty .) ]
  ! RPAREN          [ reduce using rule 146 (map -> empty .) ]


state 275

    (175) variable_redeclaration -> ID ASSIGN_OP expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    BREAK           reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    ID              reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    VAR             reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    LBRACKET        reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    IF              reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    FOR             reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    GO              reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    SWITCH          reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    RETURN          reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    DEFER           reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    CONTINUE        reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    SELECT          reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    CHANNEL_OP      reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    RBRACE          reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    CASE            reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    DEFAULT         reduce using rule 175 (variable_redeclaration -> ID ASSIGN_OP expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 276

    (171) map_position -> LBRACKET NUMBER . RBRACKET map_position
    (173) map_position -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 334


state 277

    (163) variable_statement -> VAR ID ID . EQUAL expression

    EQUAL           shift and go to state 335


state 278

    (159) variable_statement -> VAR ID EQUAL . slice_statement
    (160) variable_statement -> VAR ID EQUAL . array_statement
    (162) variable_statement -> VAR ID EQUAL . expression
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LBRACKET        shift and go to state 268
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    slice_statement                shift and go to state 336
    array_statement                shift and go to state 337
    expression                     shift and go to state 338
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 279

    (161) variable_statement -> VAR ID types . EQUAL expression

    EQUAL           shift and go to state 339


state 280

    (169) variable_statement -> VAR ID TYPES .
    (52) types -> TYPES .

    BREAK           reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    ID              reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    VAR             reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    LBRACKET        reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    IF              reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    FOR             reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    GO              reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    SWITCH          reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    RETURN          reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    DEFER           reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    CONTINUE        reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    SELECT          reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    CHANNEL_OP      reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    RBRACE          reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    CASE            reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    DEFAULT         reduce using rule 169 (variable_statement -> VAR ID TYPES .)
    EQUAL           reduce using rule 52 (types -> TYPES .)


state 281

    (166) variable_statement -> map_position COLON_EQUAL expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    BREAK           reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    ID              reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    VAR             reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    LBRACKET        reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    IF              reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    FOR             reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    GO              reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    SWITCH          reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    RETURN          reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    DEFER           reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    CONTINUE        reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    SELECT          reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    CHANNEL_OP      reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    RBRACE          reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    CASE            reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    DEFAULT         reduce using rule 166 (variable_statement -> map_position COLON_EQUAL expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 282

    (59) array_statement -> LBRACKET NUMBER RBRACKET . TYPES
    (60) array_statement -> LBRACKET NUMBER RBRACKET . TYPES LBRACE values RBRACE
    (171) map_position -> LBRACKET NUMBER RBRACKET . map_position
    (173) map_position -> LBRACKET NUMBER RBRACKET .
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET

    TYPES           shift and go to state 109
    COLON_EQUAL     reduce using rule 173 (map_position -> LBRACKET NUMBER RBRACKET .)
    LBRACKET        shift and go to state 186

    map_position                   shift and go to state 340

state 283

    (170) map_position -> LBRACKET STRING RBRACKET . map_position
    (172) map_position -> LBRACKET STRING RBRACKET .
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET

    COLON_EQUAL     reduce using rule 172 (map_position -> LBRACKET STRING RBRACKET .)
    EQUAL           reduce using rule 172 (map_position -> LBRACKET STRING RBRACKET .)
    LBRACKET        shift and go to state 186

    map_position                   shift and go to state 341

state 284

    (188) callback -> function DOT callback .

    BREAK           reduce using rule 188 (callback -> function DOT callback .)
    ID              reduce using rule 188 (callback -> function DOT callback .)
    VAR             reduce using rule 188 (callback -> function DOT callback .)
    LBRACKET        reduce using rule 188 (callback -> function DOT callback .)
    IF              reduce using rule 188 (callback -> function DOT callback .)
    FOR             reduce using rule 188 (callback -> function DOT callback .)
    GO              reduce using rule 188 (callback -> function DOT callback .)
    SWITCH          reduce using rule 188 (callback -> function DOT callback .)
    RETURN          reduce using rule 188 (callback -> function DOT callback .)
    DEFER           reduce using rule 188 (callback -> function DOT callback .)
    CONTINUE        reduce using rule 188 (callback -> function DOT callback .)
    SELECT          reduce using rule 188 (callback -> function DOT callback .)
    CHANNEL_OP      reduce using rule 188 (callback -> function DOT callback .)
    RBRACE          reduce using rule 188 (callback -> function DOT callback .)
    CASE            reduce using rule 188 (callback -> function DOT callback .)
    DEFAULT         reduce using rule 188 (callback -> function DOT callback .)
    LBRACE          reduce using rule 188 (callback -> function DOT callback .)
    ARITH_OP        reduce using rule 188 (callback -> function DOT callback .)
    REL_OP          reduce using rule 188 (callback -> function DOT callback .)
    LOG_OP          reduce using rule 188 (callback -> function DOT callback .)
    POINTER         reduce using rule 188 (callback -> function DOT callback .)
    COMMA           reduce using rule 188 (callback -> function DOT callback .)
    RPAREN          reduce using rule 188 (callback -> function DOT callback .)
    SEMICOLON       reduce using rule 188 (callback -> function DOT callback .)
    COLON           reduce using rule 188 (callback -> function DOT callback .)


state 285

    (112) if -> IF expression LBRACE . content RBRACE else
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 342
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 286

    (118) expression -> expression ARITH_OP . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 343
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 287

    (119) expression -> expression REL_OP . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 344
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 288

    (120) expression -> expression LOG_OP . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 345
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 289

    (121) expression -> expression POINTER . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 346
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 290

    (147) map -> LBRACE . map RBRACE
    (148) map -> LBRACE . map RBRACE COMMA map
    (193) value -> LBRACE . values RBRACE
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (66) values -> . value COMMA values
    (67) values -> . value
    (68) values -> . empty
    (198) empty -> .
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    LBRACE          shift and go to state 290
    RBRACE          reduce using rule 198 (empty -> .)
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    map                            shift and go to state 291
    values                         shift and go to state 119
    empty                          shift and go to state 347
    value                          shift and go to state 348
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 291

    (147) map -> LBRACE map . RBRACE
    (148) map -> LBRACE map . RBRACE COMMA map

    RBRACE          shift and go to state 349


state 292

    (66) values -> value . COMMA values
    (67) values -> value .
    (149) map -> value . COLON value
    (150) map -> value . COLON value COMMA map
    (151) map -> value . COLON map
    (152) map -> value . COLON map COMMA map

    COMMA           shift and go to state 170
    RBRACE          reduce using rule 67 (values -> value .)
    COLON           shift and go to state 294


state 293

    (68) values -> empty .
    (146) map -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 68 (values -> empty .)
    RBRACE          reduce using rule 68 (values -> empty .)

  ! RBRACE          [ reduce using rule 146 (map -> empty .) ]


state 294

    (149) map -> value COLON . value
    (150) map -> value COLON . value COMMA map
    (151) map -> value COLON . map
    (152) map -> value COLON . map COMMA map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (198) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    COMMA           reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    CHANNEL_OP      reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]

    value                          shift and go to state 350
    map                            shift and go to state 351
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    empty                          shift and go to state 352

state 295

    (117) expression -> LPAREN expression . RPAREN
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    RPAREN          shift and go to state 353
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 296

    (122) expression -> NOT expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

  ! shift/reduce conflict for ARITH_OP resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
  ! shift/reduce conflict for LOG_OP resolved as shift
  ! shift/reduce conflict for POINTER resolved as shift
    LBRACE          reduce using rule 122 (expression -> NOT expression .)
    BREAK           reduce using rule 122 (expression -> NOT expression .)
    ID              reduce using rule 122 (expression -> NOT expression .)
    VAR             reduce using rule 122 (expression -> NOT expression .)
    LBRACKET        reduce using rule 122 (expression -> NOT expression .)
    IF              reduce using rule 122 (expression -> NOT expression .)
    FOR             reduce using rule 122 (expression -> NOT expression .)
    GO              reduce using rule 122 (expression -> NOT expression .)
    SWITCH          reduce using rule 122 (expression -> NOT expression .)
    RETURN          reduce using rule 122 (expression -> NOT expression .)
    DEFER           reduce using rule 122 (expression -> NOT expression .)
    CONTINUE        reduce using rule 122 (expression -> NOT expression .)
    SELECT          reduce using rule 122 (expression -> NOT expression .)
    CHANNEL_OP      reduce using rule 122 (expression -> NOT expression .)
    RBRACE          reduce using rule 122 (expression -> NOT expression .)
    CASE            reduce using rule 122 (expression -> NOT expression .)
    DEFAULT         reduce using rule 122 (expression -> NOT expression .)
    COMMA           reduce using rule 122 (expression -> NOT expression .)
    RPAREN          reduce using rule 122 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 122 (expression -> NOT expression .)
    COLON           reduce using rule 122 (expression -> NOT expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289

  ! ARITH_OP        [ reduce using rule 122 (expression -> NOT expression .) ]
  ! REL_OP          [ reduce using rule 122 (expression -> NOT expression .) ]
  ! LOG_OP          [ reduce using rule 122 (expression -> NOT expression .) ]
  ! POINTER         [ reduce using rule 122 (expression -> NOT expression .) ]


state 297

    (123) expression -> ID COLON_EQUAL . channel
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion

    CHANNEL_OP      shift and go to state 161

    channel                        shift and go to state 354

state 298

    (184) struct -> ID DOT . ID
    (185) struct -> ID DOT . struct
    (187) callback -> ID DOT . ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID DOT . callback
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 355
    LBRACE          reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    CHANNEL_OP      reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]

    struct                         shift and go to state 356
    callback                       shift and go to state 270
    function                       shift and go to state 152
    empty                          shift and go to state 238

state 299

    (156) struct_declaretion -> ID LBRACE . struct_declaretion_values RBRACE
    (157) struct_declaretion_values -> . values
    (158) struct_declaretion_values -> . LBRACE struct_declaretion_values RBRACE
    (66) values -> . value COMMA values
    (67) values -> . value
    (68) values -> . empty
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (198) empty -> .
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    LBRACE          shift and go to state 357
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    RBRACE          reduce using rule 198 (empty -> .)
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    struct_declaretion_values      shift and go to state 358
    values                         shift and go to state 359
    value                          shift and go to state 120
    empty                          shift and go to state 121
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 300

    (92) lambda -> FUNC LPAREN . args RPAREN types LBRACE content RBRACE
    (93) lambda -> FUNC LPAREN . args RPAREN LBRACE content RBRACE
    (35) args -> . ID types
    (36) args -> . ID CHAN ID
    (37) args -> . ID CHAN ID COMMA args
    (38) args -> . ID CHAN types
    (39) args -> . ID CHAN types COMMA args
    (40) args -> . ID types COMMA args
    (41) args -> . ID COMMA args
    (42) args -> . p_map_args COMMA args
    (43) args -> . p_map_args
    (44) args -> . empty
    (45) p_map_args -> . ID POINTER brackets TYPES
    (198) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 198 (empty -> .)

    args                           shift and go to state 360
    p_map_args                     shift and go to state 58
    empty                          shift and go to state 59

state 301

    (183) address_pointer -> ADDRESS ID .

    LBRACE          reduce using rule 183 (address_pointer -> ADDRESS ID .)
    ARITH_OP        reduce using rule 183 (address_pointer -> ADDRESS ID .)
    REL_OP          reduce using rule 183 (address_pointer -> ADDRESS ID .)
    LOG_OP          reduce using rule 183 (address_pointer -> ADDRESS ID .)
    POINTER         reduce using rule 183 (address_pointer -> ADDRESS ID .)
    BREAK           reduce using rule 183 (address_pointer -> ADDRESS ID .)
    ID              reduce using rule 183 (address_pointer -> ADDRESS ID .)
    VAR             reduce using rule 183 (address_pointer -> ADDRESS ID .)
    LBRACKET        reduce using rule 183 (address_pointer -> ADDRESS ID .)
    IF              reduce using rule 183 (address_pointer -> ADDRESS ID .)
    FOR             reduce using rule 183 (address_pointer -> ADDRESS ID .)
    GO              reduce using rule 183 (address_pointer -> ADDRESS ID .)
    SWITCH          reduce using rule 183 (address_pointer -> ADDRESS ID .)
    RETURN          reduce using rule 183 (address_pointer -> ADDRESS ID .)
    DEFER           reduce using rule 183 (address_pointer -> ADDRESS ID .)
    CONTINUE        reduce using rule 183 (address_pointer -> ADDRESS ID .)
    SELECT          reduce using rule 183 (address_pointer -> ADDRESS ID .)
    CHANNEL_OP      reduce using rule 183 (address_pointer -> ADDRESS ID .)
    RBRACE          reduce using rule 183 (address_pointer -> ADDRESS ID .)
    CASE            reduce using rule 183 (address_pointer -> ADDRESS ID .)
    DEFAULT         reduce using rule 183 (address_pointer -> ADDRESS ID .)
    COMMA           reduce using rule 183 (address_pointer -> ADDRESS ID .)
    RPAREN          reduce using rule 183 (address_pointer -> ADDRESS ID .)
    SEMICOLON       reduce using rule 183 (address_pointer -> ADDRESS ID .)
    COLON           reduce using rule 183 (address_pointer -> ADDRESS ID .)


state 302

    (143) map_statement -> MAP LBRACKET . TYPES RBRACKET map_statement
    (144) map_statement -> MAP LBRACKET . TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> MAP LBRACKET . TYPES RBRACKET TYPES

    TYPES           shift and go to state 361


state 303

    (135) for -> FOR LBRACE content . RBRACE

    RBRACE          shift and go to state 362


state 304

    (69) content -> empty .
    (68) values -> empty .
    (146) map -> empty .
    (190) callback -> empty .
    (155) return -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 68 (values -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 68 (values -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 68 (values -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for GO resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for SWITCH resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for DEFER resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for SELECT resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 68 (values -> empty .)
    RBRACE          reduce using rule 68 (values -> empty .)
    BREAK           reduce using rule 155 (return -> empty .)
    ID              reduce using rule 155 (return -> empty .)
    VAR             reduce using rule 155 (return -> empty .)
    LBRACKET        reduce using rule 155 (return -> empty .)
    IF              reduce using rule 155 (return -> empty .)
    FOR             reduce using rule 155 (return -> empty .)
    GO              reduce using rule 155 (return -> empty .)
    SWITCH          reduce using rule 155 (return -> empty .)
    RETURN          reduce using rule 155 (return -> empty .)
    DEFER           reduce using rule 155 (return -> empty .)
    CONTINUE        reduce using rule 155 (return -> empty .)
    SELECT          reduce using rule 155 (return -> empty .)
    CHANNEL_OP      reduce using rule 155 (return -> empty .)

  ! RBRACE          [ reduce using rule 69 (content -> empty .) ]
  ! RBRACE          [ reduce using rule 146 (map -> empty .) ]
  ! BREAK           [ reduce using rule 190 (callback -> empty .) ]
  ! ID              [ reduce using rule 190 (callback -> empty .) ]
  ! VAR             [ reduce using rule 190 (callback -> empty .) ]
  ! LBRACKET        [ reduce using rule 190 (callback -> empty .) ]
  ! IF              [ reduce using rule 190 (callback -> empty .) ]
  ! FOR             [ reduce using rule 190 (callback -> empty .) ]
  ! GO              [ reduce using rule 190 (callback -> empty .) ]
  ! SWITCH          [ reduce using rule 190 (callback -> empty .) ]
  ! RETURN          [ reduce using rule 190 (callback -> empty .) ]
  ! DEFER           [ reduce using rule 190 (callback -> empty .) ]
  ! CONTINUE        [ reduce using rule 190 (callback -> empty .) ]
  ! SELECT          [ reduce using rule 190 (callback -> empty .) ]
  ! CHANNEL_OP      [ reduce using rule 190 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 190 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 155 (return -> empty .) ]


state 305

    (81) content -> ID . channel content
    (164) variable_statement -> ID . map_position EQUAL expression
    (165) variable_statement -> ID . COLON_EQUAL expression
    (167) variable_statement -> ID . COLON_EQUAL slice_statement
    (168) variable_statement -> ID . COLON_EQUAL array_statement
    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (174) variable_redeclaration -> ID . EQUAL expression
    (175) variable_redeclaration -> ID . ASSIGN_OP expression
    (176) variable_redeclaration -> ID . DOT ID EQUAL expression
    (181) increment -> ID . INCREMENT
    (182) decrement -> ID . DECREMENT
    (30) function -> ID . LPAREN parameters RPAREN
    (197) map_varible -> ID . brackets
    (179) pointer -> ID . LBRACKET NUMBER RBRACKET
    (180) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

    COLON_EQUAL     shift and go to state 180
    DOT             shift and go to state 181
    EQUAL           shift and go to state 179
    ASSIGN_OP       shift and go to state 183
    INCREMENT       shift and go to state 184
    DECREMENT       shift and go to state 185
    LPAREN          shift and go to state 182
    LBRACKET        shift and go to state 363
    CHANNEL_OP      shift and go to state 161

    channel                        shift and go to state 177
    map_position                   shift and go to state 178
    brackets                       shift and go to state 116

state 306

    (136) for -> FOR NOT ID . LBRACE content RBRACE
    (123) expression -> ID . COLON_EQUAL channel
    (132) expression -> ID .
    (181) increment -> ID . INCREMENT
    (182) decrement -> ID . DECREMENT
    (184) struct -> ID . DOT ID
    (185) struct -> ID . DOT struct
    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (156) struct_declaretion -> ID . LBRACE struct_declaretion_values RBRACE
    (197) map_varible -> ID . brackets
    (179) pointer -> ID . LBRACKET NUMBER RBRACKET
    (180) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> ID . LPAREN parameters RPAREN
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 364
    COLON_EQUAL     shift and go to state 297
    ARITH_OP        reduce using rule 132 (expression -> ID .)
    REL_OP          reduce using rule 132 (expression -> ID .)
    LOG_OP          reduce using rule 132 (expression -> ID .)
    POINTER         reduce using rule 132 (expression -> ID .)
    INCREMENT       shift and go to state 184
    DECREMENT       shift and go to state 185
    DOT             shift and go to state 298
    LBRACKET        shift and go to state 117
    LPAREN          shift and go to state 182

  ! LBRACE          [ reduce using rule 132 (expression -> ID .) ]

    brackets                       shift and go to state 116

state 307

    (139) for -> FOR ID COMMA . ID COLON_EQUAL RANGE ID LBRACE content RBRACE

    ID              shift and go to state 365


state 308

    (141) for -> FOR ID COLON_EQUAL . RANGE ID LBRACE content RBRACE
    (123) expression -> ID COLON_EQUAL . channel
    (142) for_declaration -> ID COLON_EQUAL . NUMBER
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion

    RANGE           shift and go to state 366
    NUMBER          shift and go to state 367
    CHANNEL_OP      shift and go to state 161

    channel                        shift and go to state 354

state 309

    (137) for -> FOR expression LBRACE . content RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 368
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 310

    (138) for -> FOR for_declaration SEMICOLON . expression SEMICOLON expression LBRACE content RBRACE
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    SEMICOLON       reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)

    expression                     shift and go to state 369
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 311

    (140) for -> FOR UNDERSCORE COMMA . ID COLON_EQUAL RANGE ID LBRACE content RBRACE

    ID              shift and go to state 370


state 312

    (111) goroutine -> GO lambda LPAREN . parameters RPAREN
    (31) parameters -> . expression
    (32) parameters -> . CHAN TYPES
    (33) parameters -> . expression COMMA parameters
    (34) parameters -> . empty
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (198) empty -> .
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

    CHAN            shift and go to state 273
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    RPAREN          reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    lambda                         shift and go to state 217
    parameters                     shift and go to state 371
    expression                     shift and go to state 272
    empty                          shift and go to state 274
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152

state 313

    (187) callback -> ID DOT . ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID DOT . callback
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 372
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    CHANNEL_OP      reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    LBRACE          reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]

    callback                       shift and go to state 270
    function                       shift and go to state 152
    empty                          shift and go to state 238

state 314

    (99) switch -> SWITCH ID LBRACE . cases_value default RBRACE
    (108) cases_value -> . CASE value COLON content cases_value
    (109) cases_value -> . empty
    (198) empty -> .

    CASE            shift and go to state 374
    DEFAULT         reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)

    cases_value                    shift and go to state 373
    empty                          shift and go to state 375

state 315

    (100) switch -> SWITCH LBRACE cases_rel . default RBRACE
    (106) default -> . DEFAULT COLON content
    (107) default -> . empty
    (198) empty -> .

    DEFAULT         shift and go to state 377
    RBRACE          reduce using rule 198 (empty -> .)

    default                        shift and go to state 376
    empty                          shift and go to state 378

state 316

    (101) cases_rel -> CASE . case_condition COLON content cases_rel
    (103) case_condition -> . ID REL_OP value
    (104) case_condition -> . boolean
    (105) case_condition -> . callback
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

    ID              shift and go to state 380
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    COLON           reduce using rule 198 (empty -> .)

    case_condition                 shift and go to state 379
    boolean                        shift and go to state 381
    callback                       shift and go to state 382
    function                       shift and go to state 152
    empty                          shift and go to state 238

state 317

    (102) cases_rel -> empty .

    DEFAULT         reduce using rule 102 (cases_rel -> empty .)
    RBRACE          reduce using rule 102 (cases_rel -> empty .)


state 318

    (94) select -> SELECT LBRACE select_cases . RBRACE

    RBRACE          shift and go to state 383


state 319

    (95) select_cases -> CASE . expression COLON content select_cases
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    COLON           reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)

    expression                     shift and go to state 384
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 320

    (96) select_cases -> DEFAULT . COLON content

    COLON           shift and go to state 385


state 321

    (97) select_cases -> empty .

    RBRACE          reduce using rule 97 (select_cases -> empty .)


state 322

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN . LBRACE content RBRACE
    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN . TYPES LBRACE content RBRACE

    LBRACE          shift and go to state 386
    TYPES           shift and go to state 387


state 323

    (60) array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .

    FUNC            reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    VAR             reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    TYPE            reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    CONST           reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    $end            reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    COMMA           reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    RPAREN          reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    LBRACE          reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    ID              reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    RBRACE          reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    EQUAL           reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    BREAK           reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    LBRACKET        reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    IF              reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    FOR             reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    GO              reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    SWITCH          reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    RETURN          reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    DEFER           reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    CONTINUE        reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    SELECT          reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    CHANNEL_OP      reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    CASE            reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)
    DEFAULT         reduce using rule 60 (array_statement -> LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE .)


state 324

    (62) array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE . values RBRACE
    (66) values -> . value COMMA values
    (67) values -> . value
    (68) values -> . empty
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (198) empty -> .
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 92
    RBRACE          reduce using rule 198 (empty -> .)
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    values                         shift and go to state 388
    value                          shift and go to state 120
    empty                          shift and go to state 121
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 325

    (18) method_list -> ID LPAREN args RPAREN types . method_list
    (18) method_list -> . ID LPAREN args RPAREN types method_list
    (19) method_list -> . empty
    (198) empty -> .

    ID              shift and go to state 85
    RBRACE          reduce using rule 198 (empty -> .)

    method_list                    shift and go to state 389
    empty                          shift and go to state 87

state 326

    (180) pointer -> ID LBRACKET NUMBER COLON NUMBER . RBRACKET

    RBRACKET        shift and go to state 390


state 327

    (46) brackets -> LBRACKET NUMBER . RBRACKET brackets
    (47) brackets -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 391


state 328

    (164) variable_statement -> ID map_position EQUAL expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    BREAK           reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    ID              reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    VAR             reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    LBRACKET        reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    IF              reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    FOR             reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    GO              reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    SWITCH          reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    RETURN          reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    DEFER           reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    CONTINUE        reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    SELECT          reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    CHANNEL_OP      reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    RBRACE          reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    CASE            reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    DEFAULT         reduce using rule 164 (variable_statement -> ID map_position EQUAL expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 329

    (187) callback -> ID DOT ID LPAREN . ID LPAREN ID RPAREN RPAREN
    (30) function -> ID LPAREN . parameters RPAREN
    (31) parameters -> . expression
    (32) parameters -> . CHAN TYPES
    (33) parameters -> . expression COMMA parameters
    (34) parameters -> . empty
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (198) empty -> .
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

    ID              shift and go to state 392
    CHAN            shift and go to state 273
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    RPAREN          reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    parameters                     shift and go to state 271
    expression                     shift and go to state 272
    empty                          shift and go to state 274
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152

state 330

    (176) variable_redeclaration -> ID DOT ID EQUAL . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 393
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 331

    (30) function -> ID LPAREN parameters RPAREN .

    DOT             reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    BREAK           reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    ID              reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    VAR             reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    LBRACKET        reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    IF              reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    FOR             reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    GO              reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    SWITCH          reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    RETURN          reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    DEFER           reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    CONTINUE        reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    SELECT          reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    CHANNEL_OP      reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    RBRACE          reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    CASE            reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    DEFAULT         reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    LBRACE          reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    ARITH_OP        reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    REL_OP          reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    LOG_OP          reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    POINTER         reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    COMMA           reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    RPAREN          reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    SEMICOLON       reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)
    COLON           reduce using rule 30 (function -> ID LPAREN parameters RPAREN .)


state 332

    (33) parameters -> expression COMMA . parameters
    (31) parameters -> . expression
    (32) parameters -> . CHAN TYPES
    (33) parameters -> . expression COMMA parameters
    (34) parameters -> . empty
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (198) empty -> .
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

    CHAN            shift and go to state 273
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    RPAREN          reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    expression                     shift and go to state 272
    parameters                     shift and go to state 394
    empty                          shift and go to state 274
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152

state 333

    (32) parameters -> CHAN TYPES .

    RPAREN          reduce using rule 32 (parameters -> CHAN TYPES .)


state 334

    (171) map_position -> LBRACKET NUMBER RBRACKET . map_position
    (173) map_position -> LBRACKET NUMBER RBRACKET .
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET

    EQUAL           reduce using rule 173 (map_position -> LBRACKET NUMBER RBRACKET .)
    COLON_EQUAL     reduce using rule 173 (map_position -> LBRACKET NUMBER RBRACKET .)
    LBRACKET        shift and go to state 186

    map_position                   shift and go to state 340

state 335

    (163) variable_statement -> VAR ID ID EQUAL . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 395
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 336

    (159) variable_statement -> VAR ID EQUAL slice_statement .

    BREAK           reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    ID              reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    VAR             reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    LBRACKET        reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    IF              reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    FOR             reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    GO              reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    SWITCH          reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    RETURN          reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    DEFER           reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    CONTINUE        reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    SELECT          reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    CHANNEL_OP      reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    RBRACE          reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    CASE            reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)
    DEFAULT         reduce using rule 159 (variable_statement -> VAR ID EQUAL slice_statement .)


state 337

    (160) variable_statement -> VAR ID EQUAL array_statement .

    BREAK           reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    ID              reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    VAR             reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    LBRACKET        reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    IF              reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    FOR             reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    GO              reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    SWITCH          reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    RETURN          reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    DEFER           reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    CONTINUE        reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    SELECT          reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    CHANNEL_OP      reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    RBRACE          reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    CASE            reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)
    DEFAULT         reduce using rule 160 (variable_statement -> VAR ID EQUAL array_statement .)


state 338

    (162) variable_statement -> VAR ID EQUAL expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    BREAK           reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    ID              reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    VAR             reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    LBRACKET        reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    IF              reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    FOR             reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    GO              reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    SWITCH          reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    RETURN          reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    DEFER           reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    CONTINUE        reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    SELECT          reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    CHANNEL_OP      reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    RBRACE          reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    CASE            reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    DEFAULT         reduce using rule 162 (variable_statement -> VAR ID EQUAL expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 339

    (161) variable_statement -> VAR ID types EQUAL . expression
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)

  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 396
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 340

    (171) map_position -> LBRACKET NUMBER RBRACKET map_position .

    COLON_EQUAL     reduce using rule 171 (map_position -> LBRACKET NUMBER RBRACKET map_position .)
    EQUAL           reduce using rule 171 (map_position -> LBRACKET NUMBER RBRACKET map_position .)


state 341

    (170) map_position -> LBRACKET STRING RBRACKET map_position .

    COLON_EQUAL     reduce using rule 170 (map_position -> LBRACKET STRING RBRACKET map_position .)
    EQUAL           reduce using rule 170 (map_position -> LBRACKET STRING RBRACKET map_position .)


state 342

    (112) if -> IF expression LBRACE content . RBRACE else

    RBRACE          shift and go to state 397


state 343

    (118) expression -> expression ARITH_OP expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

  ! shift/reduce conflict for ARITH_OP resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
  ! shift/reduce conflict for LOG_OP resolved as shift
  ! shift/reduce conflict for POINTER resolved as shift
    LBRACE          reduce using rule 118 (expression -> expression ARITH_OP expression .)
    BREAK           reduce using rule 118 (expression -> expression ARITH_OP expression .)
    ID              reduce using rule 118 (expression -> expression ARITH_OP expression .)
    VAR             reduce using rule 118 (expression -> expression ARITH_OP expression .)
    LBRACKET        reduce using rule 118 (expression -> expression ARITH_OP expression .)
    IF              reduce using rule 118 (expression -> expression ARITH_OP expression .)
    FOR             reduce using rule 118 (expression -> expression ARITH_OP expression .)
    GO              reduce using rule 118 (expression -> expression ARITH_OP expression .)
    SWITCH          reduce using rule 118 (expression -> expression ARITH_OP expression .)
    RETURN          reduce using rule 118 (expression -> expression ARITH_OP expression .)
    DEFER           reduce using rule 118 (expression -> expression ARITH_OP expression .)
    CONTINUE        reduce using rule 118 (expression -> expression ARITH_OP expression .)
    SELECT          reduce using rule 118 (expression -> expression ARITH_OP expression .)
    CHANNEL_OP      reduce using rule 118 (expression -> expression ARITH_OP expression .)
    RBRACE          reduce using rule 118 (expression -> expression ARITH_OP expression .)
    CASE            reduce using rule 118 (expression -> expression ARITH_OP expression .)
    DEFAULT         reduce using rule 118 (expression -> expression ARITH_OP expression .)
    COMMA           reduce using rule 118 (expression -> expression ARITH_OP expression .)
    RPAREN          reduce using rule 118 (expression -> expression ARITH_OP expression .)
    SEMICOLON       reduce using rule 118 (expression -> expression ARITH_OP expression .)
    COLON           reduce using rule 118 (expression -> expression ARITH_OP expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289

  ! ARITH_OP        [ reduce using rule 118 (expression -> expression ARITH_OP expression .) ]
  ! REL_OP          [ reduce using rule 118 (expression -> expression ARITH_OP expression .) ]
  ! LOG_OP          [ reduce using rule 118 (expression -> expression ARITH_OP expression .) ]
  ! POINTER         [ reduce using rule 118 (expression -> expression ARITH_OP expression .) ]


state 344

    (119) expression -> expression REL_OP expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

  ! shift/reduce conflict for ARITH_OP resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
  ! shift/reduce conflict for LOG_OP resolved as shift
  ! shift/reduce conflict for POINTER resolved as shift
    LBRACE          reduce using rule 119 (expression -> expression REL_OP expression .)
    BREAK           reduce using rule 119 (expression -> expression REL_OP expression .)
    ID              reduce using rule 119 (expression -> expression REL_OP expression .)
    VAR             reduce using rule 119 (expression -> expression REL_OP expression .)
    LBRACKET        reduce using rule 119 (expression -> expression REL_OP expression .)
    IF              reduce using rule 119 (expression -> expression REL_OP expression .)
    FOR             reduce using rule 119 (expression -> expression REL_OP expression .)
    GO              reduce using rule 119 (expression -> expression REL_OP expression .)
    SWITCH          reduce using rule 119 (expression -> expression REL_OP expression .)
    RETURN          reduce using rule 119 (expression -> expression REL_OP expression .)
    DEFER           reduce using rule 119 (expression -> expression REL_OP expression .)
    CONTINUE        reduce using rule 119 (expression -> expression REL_OP expression .)
    SELECT          reduce using rule 119 (expression -> expression REL_OP expression .)
    CHANNEL_OP      reduce using rule 119 (expression -> expression REL_OP expression .)
    RBRACE          reduce using rule 119 (expression -> expression REL_OP expression .)
    CASE            reduce using rule 119 (expression -> expression REL_OP expression .)
    DEFAULT         reduce using rule 119 (expression -> expression REL_OP expression .)
    COMMA           reduce using rule 119 (expression -> expression REL_OP expression .)
    RPAREN          reduce using rule 119 (expression -> expression REL_OP expression .)
    SEMICOLON       reduce using rule 119 (expression -> expression REL_OP expression .)
    COLON           reduce using rule 119 (expression -> expression REL_OP expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289

  ! ARITH_OP        [ reduce using rule 119 (expression -> expression REL_OP expression .) ]
  ! REL_OP          [ reduce using rule 119 (expression -> expression REL_OP expression .) ]
  ! LOG_OP          [ reduce using rule 119 (expression -> expression REL_OP expression .) ]
  ! POINTER         [ reduce using rule 119 (expression -> expression REL_OP expression .) ]


state 345

    (120) expression -> expression LOG_OP expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

  ! shift/reduce conflict for ARITH_OP resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
  ! shift/reduce conflict for LOG_OP resolved as shift
  ! shift/reduce conflict for POINTER resolved as shift
    LBRACE          reduce using rule 120 (expression -> expression LOG_OP expression .)
    BREAK           reduce using rule 120 (expression -> expression LOG_OP expression .)
    ID              reduce using rule 120 (expression -> expression LOG_OP expression .)
    VAR             reduce using rule 120 (expression -> expression LOG_OP expression .)
    LBRACKET        reduce using rule 120 (expression -> expression LOG_OP expression .)
    IF              reduce using rule 120 (expression -> expression LOG_OP expression .)
    FOR             reduce using rule 120 (expression -> expression LOG_OP expression .)
    GO              reduce using rule 120 (expression -> expression LOG_OP expression .)
    SWITCH          reduce using rule 120 (expression -> expression LOG_OP expression .)
    RETURN          reduce using rule 120 (expression -> expression LOG_OP expression .)
    DEFER           reduce using rule 120 (expression -> expression LOG_OP expression .)
    CONTINUE        reduce using rule 120 (expression -> expression LOG_OP expression .)
    SELECT          reduce using rule 120 (expression -> expression LOG_OP expression .)
    CHANNEL_OP      reduce using rule 120 (expression -> expression LOG_OP expression .)
    RBRACE          reduce using rule 120 (expression -> expression LOG_OP expression .)
    CASE            reduce using rule 120 (expression -> expression LOG_OP expression .)
    DEFAULT         reduce using rule 120 (expression -> expression LOG_OP expression .)
    COMMA           reduce using rule 120 (expression -> expression LOG_OP expression .)
    RPAREN          reduce using rule 120 (expression -> expression LOG_OP expression .)
    SEMICOLON       reduce using rule 120 (expression -> expression LOG_OP expression .)
    COLON           reduce using rule 120 (expression -> expression LOG_OP expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289

  ! ARITH_OP        [ reduce using rule 120 (expression -> expression LOG_OP expression .) ]
  ! REL_OP          [ reduce using rule 120 (expression -> expression LOG_OP expression .) ]
  ! LOG_OP          [ reduce using rule 120 (expression -> expression LOG_OP expression .) ]
  ! POINTER         [ reduce using rule 120 (expression -> expression LOG_OP expression .) ]


state 346

    (121) expression -> expression POINTER expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

  ! shift/reduce conflict for ARITH_OP resolved as shift
  ! shift/reduce conflict for REL_OP resolved as shift
  ! shift/reduce conflict for LOG_OP resolved as shift
  ! shift/reduce conflict for POINTER resolved as shift
    LBRACE          reduce using rule 121 (expression -> expression POINTER expression .)
    BREAK           reduce using rule 121 (expression -> expression POINTER expression .)
    ID              reduce using rule 121 (expression -> expression POINTER expression .)
    VAR             reduce using rule 121 (expression -> expression POINTER expression .)
    LBRACKET        reduce using rule 121 (expression -> expression POINTER expression .)
    IF              reduce using rule 121 (expression -> expression POINTER expression .)
    FOR             reduce using rule 121 (expression -> expression POINTER expression .)
    GO              reduce using rule 121 (expression -> expression POINTER expression .)
    SWITCH          reduce using rule 121 (expression -> expression POINTER expression .)
    RETURN          reduce using rule 121 (expression -> expression POINTER expression .)
    DEFER           reduce using rule 121 (expression -> expression POINTER expression .)
    CONTINUE        reduce using rule 121 (expression -> expression POINTER expression .)
    SELECT          reduce using rule 121 (expression -> expression POINTER expression .)
    CHANNEL_OP      reduce using rule 121 (expression -> expression POINTER expression .)
    RBRACE          reduce using rule 121 (expression -> expression POINTER expression .)
    CASE            reduce using rule 121 (expression -> expression POINTER expression .)
    DEFAULT         reduce using rule 121 (expression -> expression POINTER expression .)
    COMMA           reduce using rule 121 (expression -> expression POINTER expression .)
    RPAREN          reduce using rule 121 (expression -> expression POINTER expression .)
    SEMICOLON       reduce using rule 121 (expression -> expression POINTER expression .)
    COLON           reduce using rule 121 (expression -> expression POINTER expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289

  ! ARITH_OP        [ reduce using rule 121 (expression -> expression POINTER expression .) ]
  ! REL_OP          [ reduce using rule 121 (expression -> expression POINTER expression .) ]
  ! LOG_OP          [ reduce using rule 121 (expression -> expression POINTER expression .) ]
  ! POINTER         [ reduce using rule 121 (expression -> expression POINTER expression .) ]


state 347

    (146) map -> empty .
    (68) values -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 68 (values -> empty .)
    RBRACE          reduce using rule 68 (values -> empty .)

  ! RBRACE          [ reduce using rule 146 (map -> empty .) ]


state 348

    (149) map -> value . COLON value
    (150) map -> value . COLON value COMMA map
    (151) map -> value . COLON map
    (152) map -> value . COLON map COMMA map
    (66) values -> value . COMMA values
    (67) values -> value .

    COLON           shift and go to state 294
    COMMA           shift and go to state 170
    RBRACE          reduce using rule 67 (values -> value .)


state 349

    (147) map -> LBRACE map RBRACE .
    (148) map -> LBRACE map RBRACE . COMMA map

  ! shift/reduce conflict for COMMA resolved as shift
    LBRACE          reduce using rule 147 (map -> LBRACE map RBRACE .)
    ARITH_OP        reduce using rule 147 (map -> LBRACE map RBRACE .)
    REL_OP          reduce using rule 147 (map -> LBRACE map RBRACE .)
    LOG_OP          reduce using rule 147 (map -> LBRACE map RBRACE .)
    POINTER         reduce using rule 147 (map -> LBRACE map RBRACE .)
    BREAK           reduce using rule 147 (map -> LBRACE map RBRACE .)
    ID              reduce using rule 147 (map -> LBRACE map RBRACE .)
    VAR             reduce using rule 147 (map -> LBRACE map RBRACE .)
    LBRACKET        reduce using rule 147 (map -> LBRACE map RBRACE .)
    IF              reduce using rule 147 (map -> LBRACE map RBRACE .)
    FOR             reduce using rule 147 (map -> LBRACE map RBRACE .)
    GO              reduce using rule 147 (map -> LBRACE map RBRACE .)
    SWITCH          reduce using rule 147 (map -> LBRACE map RBRACE .)
    RETURN          reduce using rule 147 (map -> LBRACE map RBRACE .)
    DEFER           reduce using rule 147 (map -> LBRACE map RBRACE .)
    CONTINUE        reduce using rule 147 (map -> LBRACE map RBRACE .)
    SELECT          reduce using rule 147 (map -> LBRACE map RBRACE .)
    CHANNEL_OP      reduce using rule 147 (map -> LBRACE map RBRACE .)
    RBRACE          reduce using rule 147 (map -> LBRACE map RBRACE .)
    CASE            reduce using rule 147 (map -> LBRACE map RBRACE .)
    DEFAULT         reduce using rule 147 (map -> LBRACE map RBRACE .)
    RPAREN          reduce using rule 147 (map -> LBRACE map RBRACE .)
    SEMICOLON       reduce using rule 147 (map -> LBRACE map RBRACE .)
    COLON           reduce using rule 147 (map -> LBRACE map RBRACE .)
    COMMA           shift and go to state 398

  ! COMMA           [ reduce using rule 147 (map -> LBRACE map RBRACE .) ]


state 350

    (149) map -> value COLON value .
    (150) map -> value COLON value . COMMA map
    (149) map -> value . COLON value
    (150) map -> value . COLON value COMMA map
    (151) map -> value . COLON map
    (152) map -> value . COLON map COMMA map

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for COLON resolved as shift
    LBRACE          reduce using rule 149 (map -> value COLON value .)
    ARITH_OP        reduce using rule 149 (map -> value COLON value .)
    REL_OP          reduce using rule 149 (map -> value COLON value .)
    LOG_OP          reduce using rule 149 (map -> value COLON value .)
    POINTER         reduce using rule 149 (map -> value COLON value .)
    BREAK           reduce using rule 149 (map -> value COLON value .)
    ID              reduce using rule 149 (map -> value COLON value .)
    VAR             reduce using rule 149 (map -> value COLON value .)
    LBRACKET        reduce using rule 149 (map -> value COLON value .)
    IF              reduce using rule 149 (map -> value COLON value .)
    FOR             reduce using rule 149 (map -> value COLON value .)
    GO              reduce using rule 149 (map -> value COLON value .)
    SWITCH          reduce using rule 149 (map -> value COLON value .)
    RETURN          reduce using rule 149 (map -> value COLON value .)
    DEFER           reduce using rule 149 (map -> value COLON value .)
    CONTINUE        reduce using rule 149 (map -> value COLON value .)
    SELECT          reduce using rule 149 (map -> value COLON value .)
    CHANNEL_OP      reduce using rule 149 (map -> value COLON value .)
    RBRACE          reduce using rule 149 (map -> value COLON value .)
    CASE            reduce using rule 149 (map -> value COLON value .)
    DEFAULT         reduce using rule 149 (map -> value COLON value .)
    RPAREN          reduce using rule 149 (map -> value COLON value .)
    SEMICOLON       reduce using rule 149 (map -> value COLON value .)
    COMMA           shift and go to state 399
    COLON           shift and go to state 294

  ! COMMA           [ reduce using rule 149 (map -> value COLON value .) ]
  ! COLON           [ reduce using rule 149 (map -> value COLON value .) ]


state 351

    (151) map -> value COLON map .
    (152) map -> value COLON map . COMMA map

  ! shift/reduce conflict for COMMA resolved as shift
    LBRACE          reduce using rule 151 (map -> value COLON map .)
    ARITH_OP        reduce using rule 151 (map -> value COLON map .)
    REL_OP          reduce using rule 151 (map -> value COLON map .)
    LOG_OP          reduce using rule 151 (map -> value COLON map .)
    POINTER         reduce using rule 151 (map -> value COLON map .)
    BREAK           reduce using rule 151 (map -> value COLON map .)
    ID              reduce using rule 151 (map -> value COLON map .)
    VAR             reduce using rule 151 (map -> value COLON map .)
    LBRACKET        reduce using rule 151 (map -> value COLON map .)
    IF              reduce using rule 151 (map -> value COLON map .)
    FOR             reduce using rule 151 (map -> value COLON map .)
    GO              reduce using rule 151 (map -> value COLON map .)
    SWITCH          reduce using rule 151 (map -> value COLON map .)
    RETURN          reduce using rule 151 (map -> value COLON map .)
    DEFER           reduce using rule 151 (map -> value COLON map .)
    CONTINUE        reduce using rule 151 (map -> value COLON map .)
    SELECT          reduce using rule 151 (map -> value COLON map .)
    CHANNEL_OP      reduce using rule 151 (map -> value COLON map .)
    RBRACE          reduce using rule 151 (map -> value COLON map .)
    CASE            reduce using rule 151 (map -> value COLON map .)
    DEFAULT         reduce using rule 151 (map -> value COLON map .)
    RPAREN          reduce using rule 151 (map -> value COLON map .)
    SEMICOLON       reduce using rule 151 (map -> value COLON map .)
    COLON           reduce using rule 151 (map -> value COLON map .)
    COMMA           shift and go to state 400

  ! COMMA           [ reduce using rule 151 (map -> value COLON map .) ]


state 352

    (146) map -> empty .

    COMMA           reduce using rule 146 (map -> empty .)
    LBRACE          reduce using rule 146 (map -> empty .)
    ARITH_OP        reduce using rule 146 (map -> empty .)
    REL_OP          reduce using rule 146 (map -> empty .)
    LOG_OP          reduce using rule 146 (map -> empty .)
    POINTER         reduce using rule 146 (map -> empty .)
    BREAK           reduce using rule 146 (map -> empty .)
    ID              reduce using rule 146 (map -> empty .)
    VAR             reduce using rule 146 (map -> empty .)
    LBRACKET        reduce using rule 146 (map -> empty .)
    IF              reduce using rule 146 (map -> empty .)
    FOR             reduce using rule 146 (map -> empty .)
    GO              reduce using rule 146 (map -> empty .)
    SWITCH          reduce using rule 146 (map -> empty .)
    RETURN          reduce using rule 146 (map -> empty .)
    DEFER           reduce using rule 146 (map -> empty .)
    CONTINUE        reduce using rule 146 (map -> empty .)
    SELECT          reduce using rule 146 (map -> empty .)
    CHANNEL_OP      reduce using rule 146 (map -> empty .)
    RBRACE          reduce using rule 146 (map -> empty .)
    CASE            reduce using rule 146 (map -> empty .)
    DEFAULT         reduce using rule 146 (map -> empty .)
    RPAREN          reduce using rule 146 (map -> empty .)
    SEMICOLON       reduce using rule 146 (map -> empty .)
    COLON           reduce using rule 146 (map -> empty .)


state 353

    (117) expression -> LPAREN expression RPAREN .

    LBRACE          reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    ARITH_OP        reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    REL_OP          reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    LOG_OP          reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    POINTER         reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    VAR             reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    GO              reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    DEFER           reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    SELECT          reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    CHANNEL_OP      reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    CASE            reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    DEFAULT         reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 117 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 117 (expression -> LPAREN expression RPAREN .)


state 354

    (123) expression -> ID COLON_EQUAL channel .

    LBRACE          reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    ARITH_OP        reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    REL_OP          reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    LOG_OP          reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    POINTER         reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    BREAK           reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    ID              reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    VAR             reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    LBRACKET        reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    IF              reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    FOR             reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    GO              reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    SWITCH          reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    RETURN          reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    DEFER           reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    CONTINUE        reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    SELECT          reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    CHANNEL_OP      reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    RBRACE          reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    CASE            reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    DEFAULT         reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    COMMA           reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    RPAREN          reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    SEMICOLON       reduce using rule 123 (expression -> ID COLON_EQUAL channel .)
    COLON           reduce using rule 123 (expression -> ID COLON_EQUAL channel .)


state 355

    (184) struct -> ID DOT ID .
    (187) callback -> ID DOT ID . LPAREN ID LPAREN ID RPAREN RPAREN
    (184) struct -> ID . DOT ID
    (185) struct -> ID . DOT struct
    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (30) function -> ID . LPAREN parameters RPAREN

    LBRACE          reduce using rule 184 (struct -> ID DOT ID .)
    ARITH_OP        reduce using rule 184 (struct -> ID DOT ID .)
    REL_OP          reduce using rule 184 (struct -> ID DOT ID .)
    LOG_OP          reduce using rule 184 (struct -> ID DOT ID .)
    POINTER         reduce using rule 184 (struct -> ID DOT ID .)
    BREAK           reduce using rule 184 (struct -> ID DOT ID .)
    ID              reduce using rule 184 (struct -> ID DOT ID .)
    VAR             reduce using rule 184 (struct -> ID DOT ID .)
    LBRACKET        reduce using rule 184 (struct -> ID DOT ID .)
    IF              reduce using rule 184 (struct -> ID DOT ID .)
    FOR             reduce using rule 184 (struct -> ID DOT ID .)
    GO              reduce using rule 184 (struct -> ID DOT ID .)
    SWITCH          reduce using rule 184 (struct -> ID DOT ID .)
    RETURN          reduce using rule 184 (struct -> ID DOT ID .)
    DEFER           reduce using rule 184 (struct -> ID DOT ID .)
    CONTINUE        reduce using rule 184 (struct -> ID DOT ID .)
    SELECT          reduce using rule 184 (struct -> ID DOT ID .)
    CHANNEL_OP      reduce using rule 184 (struct -> ID DOT ID .)
    RBRACE          reduce using rule 184 (struct -> ID DOT ID .)
    CASE            reduce using rule 184 (struct -> ID DOT ID .)
    DEFAULT         reduce using rule 184 (struct -> ID DOT ID .)
    COMMA           reduce using rule 184 (struct -> ID DOT ID .)
    RPAREN          reduce using rule 184 (struct -> ID DOT ID .)
    SEMICOLON       reduce using rule 184 (struct -> ID DOT ID .)
    COLON           reduce using rule 184 (struct -> ID DOT ID .)
    LPAREN          shift and go to state 329
    DOT             shift and go to state 298


state 356

    (185) struct -> ID DOT struct .

    LBRACE          reduce using rule 185 (struct -> ID DOT struct .)
    ARITH_OP        reduce using rule 185 (struct -> ID DOT struct .)
    REL_OP          reduce using rule 185 (struct -> ID DOT struct .)
    LOG_OP          reduce using rule 185 (struct -> ID DOT struct .)
    POINTER         reduce using rule 185 (struct -> ID DOT struct .)
    BREAK           reduce using rule 185 (struct -> ID DOT struct .)
    ID              reduce using rule 185 (struct -> ID DOT struct .)
    VAR             reduce using rule 185 (struct -> ID DOT struct .)
    LBRACKET        reduce using rule 185 (struct -> ID DOT struct .)
    IF              reduce using rule 185 (struct -> ID DOT struct .)
    FOR             reduce using rule 185 (struct -> ID DOT struct .)
    GO              reduce using rule 185 (struct -> ID DOT struct .)
    SWITCH          reduce using rule 185 (struct -> ID DOT struct .)
    RETURN          reduce using rule 185 (struct -> ID DOT struct .)
    DEFER           reduce using rule 185 (struct -> ID DOT struct .)
    CONTINUE        reduce using rule 185 (struct -> ID DOT struct .)
    SELECT          reduce using rule 185 (struct -> ID DOT struct .)
    CHANNEL_OP      reduce using rule 185 (struct -> ID DOT struct .)
    RBRACE          reduce using rule 185 (struct -> ID DOT struct .)
    CASE            reduce using rule 185 (struct -> ID DOT struct .)
    DEFAULT         reduce using rule 185 (struct -> ID DOT struct .)
    COMMA           reduce using rule 185 (struct -> ID DOT struct .)
    RPAREN          reduce using rule 185 (struct -> ID DOT struct .)
    SEMICOLON       reduce using rule 185 (struct -> ID DOT struct .)
    COLON           reduce using rule 185 (struct -> ID DOT struct .)


state 357

    (158) struct_declaretion_values -> LBRACE . struct_declaretion_values RBRACE
    (193) value -> LBRACE . values RBRACE
    (157) struct_declaretion_values -> . values
    (158) struct_declaretion_values -> . LBRACE struct_declaretion_values RBRACE
    (66) values -> . value COMMA values
    (67) values -> . value
    (68) values -> . empty
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (198) empty -> .
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    LBRACE          shift and go to state 357
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    RBRACE          reduce using rule 198 (empty -> .)
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    struct_declaretion_values      shift and go to state 401
    values                         shift and go to state 402
    value                          shift and go to state 120
    empty                          shift and go to state 121
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 358

    (156) struct_declaretion -> ID LBRACE struct_declaretion_values . RBRACE

    RBRACE          shift and go to state 403


state 359

    (157) struct_declaretion_values -> values .

    RBRACE          reduce using rule 157 (struct_declaretion_values -> values .)


state 360

    (92) lambda -> FUNC LPAREN args . RPAREN types LBRACE content RBRACE
    (93) lambda -> FUNC LPAREN args . RPAREN LBRACE content RBRACE

    RPAREN          shift and go to state 404


state 361

    (143) map_statement -> MAP LBRACKET TYPES . RBRACKET map_statement
    (144) map_statement -> MAP LBRACKET TYPES . RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> MAP LBRACKET TYPES . RBRACKET TYPES

    RBRACKET        shift and go to state 405


state 362

    (135) for -> FOR LBRACE content RBRACE .

    BREAK           reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    ID              reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    VAR             reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    LBRACKET        reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    IF              reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    FOR             reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    GO              reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    SWITCH          reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    RETURN          reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    DEFER           reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    CONTINUE        reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    SELECT          reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    RBRACE          reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    CASE            reduce using rule 135 (for -> FOR LBRACE content RBRACE .)
    DEFAULT         reduce using rule 135 (for -> FOR LBRACE content RBRACE .)


state 363

    (179) pointer -> ID LBRACKET . NUMBER RBRACKET
    (180) pointer -> ID LBRACKET . NUMBER COLON NUMBER RBRACKET
    (170) map_position -> LBRACKET . STRING RBRACKET map_position
    (171) map_position -> LBRACKET . NUMBER RBRACKET map_position
    (172) map_position -> LBRACKET . STRING RBRACKET
    (173) map_position -> LBRACKET . NUMBER RBRACKET
    (46) brackets -> LBRACKET . NUMBER RBRACKET brackets
    (47) brackets -> LBRACKET . NUMBER RBRACKET
    (48) brackets -> LBRACKET . STRING RBRACKET brackets
    (49) brackets -> LBRACKET . STRING RBRACKET
    (50) brackets -> LBRACKET . ID RBRACKET
    (51) brackets -> LBRACKET . ID RBRACKET brackets

    NUMBER          shift and go to state 406
    STRING          shift and go to state 407
    ID              shift and go to state 128


state 364

    (136) for -> FOR NOT ID LBRACE . content RBRACE
    (156) struct_declaretion -> ID LBRACE . struct_declaretion_values RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (157) struct_declaretion_values -> . values
    (158) struct_declaretion_values -> . LBRACE struct_declaretion_values RBRACE
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (66) values -> . value COMMA values
    (67) values -> . value
    (68) values -> . empty
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 305
    LBRACE          shift and go to state 357
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 408
    struct_declaretion_values      shift and go to state 358
    empty                          shift and go to state 409
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    values                         shift and go to state 359
    map_position                   shift and go to state 150
    function                       shift and go to state 152
    value                          shift and go to state 120
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 365

    (139) for -> FOR ID COMMA ID . COLON_EQUAL RANGE ID LBRACE content RBRACE

    COLON_EQUAL     shift and go to state 410


state 366

    (141) for -> FOR ID COLON_EQUAL RANGE . ID LBRACE content RBRACE

    ID              shift and go to state 411


state 367

    (142) for_declaration -> ID COLON_EQUAL NUMBER .

    SEMICOLON       reduce using rule 142 (for_declaration -> ID COLON_EQUAL NUMBER .)


state 368

    (137) for -> FOR expression LBRACE content . RBRACE

    RBRACE          shift and go to state 412


state 369

    (138) for -> FOR for_declaration SEMICOLON expression . SEMICOLON expression LBRACE content RBRACE
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    SEMICOLON       shift and go to state 413
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 370

    (140) for -> FOR UNDERSCORE COMMA ID . COLON_EQUAL RANGE ID LBRACE content RBRACE

    COLON_EQUAL     shift and go to state 414


state 371

    (111) goroutine -> GO lambda LPAREN parameters . RPAREN

    RPAREN          shift and go to state 415


state 372

    (187) callback -> ID DOT ID . LPAREN ID LPAREN ID RPAREN RPAREN
    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (30) function -> ID . LPAREN parameters RPAREN

    LPAREN          shift and go to state 329
    DOT             shift and go to state 313


state 373

    (99) switch -> SWITCH ID LBRACE cases_value . default RBRACE
    (106) default -> . DEFAULT COLON content
    (107) default -> . empty
    (198) empty -> .

    DEFAULT         shift and go to state 377
    RBRACE          reduce using rule 198 (empty -> .)

    default                        shift and go to state 416
    empty                          shift and go to state 378

state 374

    (108) cases_value -> CASE . value COLON content cases_value
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 92
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    value                          shift and go to state 417
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 375

    (109) cases_value -> empty .

    DEFAULT         reduce using rule 109 (cases_value -> empty .)
    RBRACE          reduce using rule 109 (cases_value -> empty .)


state 376

    (100) switch -> SWITCH LBRACE cases_rel default . RBRACE

    RBRACE          shift and go to state 418


state 377

    (106) default -> DEFAULT . COLON content

    COLON           shift and go to state 419


state 378

    (107) default -> empty .

    RBRACE          reduce using rule 107 (default -> empty .)


state 379

    (101) cases_rel -> CASE case_condition . COLON content cases_rel

    COLON           shift and go to state 420


state 380

    (103) case_condition -> ID . REL_OP value
    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (30) function -> ID . LPAREN parameters RPAREN

    REL_OP          shift and go to state 421
    DOT             shift and go to state 313
    LPAREN          shift and go to state 182


state 381

    (104) case_condition -> boolean .

    COLON           reduce using rule 104 (case_condition -> boolean .)


state 382

    (105) case_condition -> callback .

    COLON           reduce using rule 105 (case_condition -> callback .)


state 383

    (94) select -> SELECT LBRACE select_cases RBRACE .

    BREAK           reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    ID              reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    VAR             reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    LBRACKET        reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    IF              reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    FOR             reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    GO              reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    SWITCH          reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    RETURN          reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    DEFER           reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    CONTINUE        reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    SELECT          reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    CHANNEL_OP      reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    RBRACE          reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    CASE            reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)
    DEFAULT         reduce using rule 94 (select -> SELECT LBRACE select_cases RBRACE .)


state 384

    (95) select_cases -> CASE expression . COLON content select_cases
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    COLON           shift and go to state 422
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 385

    (96) select_cases -> DEFAULT COLON . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 423
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 386

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE . content RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 424
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 387

    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES . LBRACE content RBRACE

    LBRACE          shift and go to state 425


state 388

    (62) array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values . RBRACE

    RBRACE          shift and go to state 426


state 389

    (18) method_list -> ID LPAREN args RPAREN types method_list .

    RBRACE          reduce using rule 18 (method_list -> ID LPAREN args RPAREN types method_list .)


state 390

    (180) pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .

    ID              reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    RPAREN          reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    COMMA           reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    RBRACE          reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    COLON           reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    LBRACE          reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    ARITH_OP        reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    REL_OP          reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    LOG_OP          reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    POINTER         reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    BREAK           reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    VAR             reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    LBRACKET        reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    IF              reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    FOR             reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    GO              reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    SWITCH          reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    RETURN          reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    DEFER           reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    CONTINUE        reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    SELECT          reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    CHANNEL_OP      reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    CASE            reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    DEFAULT         reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 180 (pointer -> ID LBRACKET NUMBER COLON NUMBER RBRACKET .)


state 391

    (46) brackets -> LBRACKET NUMBER RBRACKET . brackets
    (47) brackets -> LBRACKET NUMBER RBRACKET .
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for LBRACKET resolved as shift
    TYPES           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    ID              reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    COMMA           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    RBRACE          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    COLON           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    LBRACE          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    ARITH_OP        reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    REL_OP          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    LOG_OP          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    POINTER         reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    BREAK           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    VAR             reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    IF              reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    FOR             reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    GO              reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    SWITCH          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    RETURN          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    DEFER           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    CONTINUE        reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    SELECT          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    CHANNEL_OP      reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    CASE            reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    DEFAULT         reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    SEMICOLON       reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    LBRACKET        shift and go to state 257

  ! LBRACKET        [ reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .) ]

    brackets                       shift and go to state 258

state 392

    (187) callback -> ID DOT ID LPAREN ID . LPAREN ID RPAREN RPAREN
    (123) expression -> ID . COLON_EQUAL channel
    (132) expression -> ID .
    (181) increment -> ID . INCREMENT
    (182) decrement -> ID . DECREMENT
    (184) struct -> ID . DOT ID
    (185) struct -> ID . DOT struct
    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (156) struct_declaretion -> ID . LBRACE struct_declaretion_values RBRACE
    (197) map_varible -> ID . brackets
    (179) pointer -> ID . LBRACKET NUMBER RBRACKET
    (180) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> ID . LPAREN parameters RPAREN
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

    LPAREN          shift and go to state 427
    COLON_EQUAL     shift and go to state 297
    COMMA           reduce using rule 132 (expression -> ID .)
    ARITH_OP        reduce using rule 132 (expression -> ID .)
    REL_OP          reduce using rule 132 (expression -> ID .)
    LOG_OP          reduce using rule 132 (expression -> ID .)
    POINTER         reduce using rule 132 (expression -> ID .)
    RPAREN          reduce using rule 132 (expression -> ID .)
    INCREMENT       shift and go to state 184
    DECREMENT       shift and go to state 185
    DOT             shift and go to state 298
    LBRACE          shift and go to state 299
    LBRACKET        shift and go to state 117

    brackets                       shift and go to state 116

state 393

    (176) variable_redeclaration -> ID DOT ID EQUAL expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    BREAK           reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    ID              reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    VAR             reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    LBRACKET        reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    IF              reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    FOR             reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    GO              reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    SWITCH          reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    RETURN          reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    DEFER           reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    CONTINUE        reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    SELECT          reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    CHANNEL_OP      reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    RBRACE          reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    CASE            reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    DEFAULT         reduce using rule 176 (variable_redeclaration -> ID DOT ID EQUAL expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 394

    (33) parameters -> expression COMMA parameters .

    RPAREN          reduce using rule 33 (parameters -> expression COMMA parameters .)


state 395

    (163) variable_statement -> VAR ID ID EQUAL expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    BREAK           reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    ID              reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    VAR             reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    LBRACKET        reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    IF              reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    FOR             reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    GO              reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    SWITCH          reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    RETURN          reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    DEFER           reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    CONTINUE        reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    SELECT          reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    CHANNEL_OP      reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    RBRACE          reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    CASE            reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    DEFAULT         reduce using rule 163 (variable_statement -> VAR ID ID EQUAL expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 396

    (161) variable_statement -> VAR ID types EQUAL expression .
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    BREAK           reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    ID              reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    VAR             reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    LBRACKET        reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    IF              reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    FOR             reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    GO              reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    SWITCH          reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    RETURN          reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    DEFER           reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    CONTINUE        reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    SELECT          reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    CHANNEL_OP      reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    RBRACE          reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    CASE            reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    DEFAULT         reduce using rule 161 (variable_statement -> VAR ID types EQUAL expression .)
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 397

    (112) if -> IF expression LBRACE content RBRACE . else
    (113) else -> . ELSE LBRACE content RBRACE
    (114) else -> . ELSE if
    (115) else -> . empty
    (198) empty -> .

    ELSE            shift and go to state 429
    BREAK           reduce using rule 198 (empty -> .)
    ID              reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    CHANNEL_OP      reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)

    else                           shift and go to state 428
    empty                          shift and go to state 430

state 398

    (148) map -> LBRACE map RBRACE COMMA . map
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (198) empty -> .
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    LBRACE          shift and go to state 290
    COMMA           reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    CHANNEL_OP      reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]

    map                            shift and go to state 431
    empty                          shift and go to state 352
    value                          shift and go to state 432
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 399

    (150) map -> value COLON value COMMA . map
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (198) empty -> .
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    LBRACE          shift and go to state 290
    COMMA           reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    CHANNEL_OP      reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]

    value                          shift and go to state 432
    map                            shift and go to state 433
    empty                          shift and go to state 352
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 400

    (152) map -> value COLON map COMMA . map
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (198) empty -> .
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    LBRACE          shift and go to state 290
    COMMA           reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    BREAK           reduce using rule 198 (empty -> .)
    VAR             reduce using rule 198 (empty -> .)
    LBRACKET        reduce using rule 198 (empty -> .)
    IF              reduce using rule 198 (empty -> .)
    FOR             reduce using rule 198 (empty -> .)
    GO              reduce using rule 198 (empty -> .)
    SWITCH          reduce using rule 198 (empty -> .)
    RETURN          reduce using rule 198 (empty -> .)
    DEFER           reduce using rule 198 (empty -> .)
    CONTINUE        reduce using rule 198 (empty -> .)
    SELECT          reduce using rule 198 (empty -> .)
    CHANNEL_OP      reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    RPAREN          reduce using rule 198 (empty -> .)
    SEMICOLON       reduce using rule 198 (empty -> .)
    COLON           reduce using rule 198 (empty -> .)
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]

    value                          shift and go to state 432
    map                            shift and go to state 434
    empty                          shift and go to state 352
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 401

    (158) struct_declaretion_values -> LBRACE struct_declaretion_values . RBRACE

    RBRACE          shift and go to state 435


state 402

    (193) value -> LBRACE values . RBRACE
    (157) struct_declaretion_values -> values .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 169

  ! RBRACE          [ reduce using rule 157 (struct_declaretion_values -> values .) ]


state 403

    (156) struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .

    LBRACE          reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    ARITH_OP        reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    REL_OP          reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    LOG_OP          reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    POINTER         reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    BREAK           reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    ID              reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    VAR             reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    LBRACKET        reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    IF              reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    FOR             reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    GO              reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    SWITCH          reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    RETURN          reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    DEFER           reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    CONTINUE        reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    SELECT          reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    CHANNEL_OP      reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    RBRACE          reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    CASE            reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    DEFAULT         reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    COMMA           reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    RPAREN          reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    SEMICOLON       reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)
    COLON           reduce using rule 156 (struct_declaretion -> ID LBRACE struct_declaretion_values RBRACE .)


state 404

    (92) lambda -> FUNC LPAREN args RPAREN . types LBRACE content RBRACE
    (93) lambda -> FUNC LPAREN args RPAREN . LBRACE content RBRACE
    (52) types -> . TYPES
    (53) types -> . array_statement
    (54) types -> . pointer_statement
    (55) types -> . slice_statement
    (56) types -> . MAP LBRACKET TYPES RBRACKET
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (57) pointer_statement -> . POINTER types
    (58) pointer_statement -> . POINTER ID
    (63) slice_statement -> . LBRACKET RBRACKET TYPES
    (64) slice_statement -> . LBRACKET RBRACKET TYPES LBRACE values RBRACE

    LBRACE          shift and go to state 437
    TYPES           shift and go to state 41
    MAP             shift and go to state 45
    LBRACKET        shift and go to state 46
    POINTER         shift and go to state 47

    types                          shift and go to state 436
    array_statement                shift and go to state 42
    pointer_statement              shift and go to state 43
    slice_statement                shift and go to state 44

state 405

    (143) map_statement -> MAP LBRACKET TYPES RBRACKET . map_statement
    (144) map_statement -> MAP LBRACKET TYPES RBRACKET . TYPES LBRACE map RBRACE
    (145) map_statement -> MAP LBRACKET TYPES RBRACKET . TYPES
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES

    TYPES           shift and go to state 438
    MAP             shift and go to state 228

    map_statement                  shift and go to state 439

state 406

    (179) pointer -> ID LBRACKET NUMBER . RBRACKET
    (180) pointer -> ID LBRACKET NUMBER . COLON NUMBER RBRACKET
    (171) map_position -> LBRACKET NUMBER . RBRACKET map_position
    (173) map_position -> LBRACKET NUMBER . RBRACKET
    (46) brackets -> LBRACKET NUMBER . RBRACKET brackets
    (47) brackets -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 440
    COLON           shift and go to state 255


state 407

    (170) map_position -> LBRACKET STRING . RBRACKET map_position
    (172) map_position -> LBRACKET STRING . RBRACKET
    (48) brackets -> LBRACKET STRING . RBRACKET brackets
    (49) brackets -> LBRACKET STRING . RBRACKET

    RBRACKET        shift and go to state 441


state 408

    (136) for -> FOR NOT ID LBRACE content . RBRACE

    RBRACE          shift and go to state 442


state 409

    (69) content -> empty .
    (190) callback -> empty .
    (155) return -> empty .
    (68) values -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 69 (content -> empty .)
  ! reduce/reduce conflict for BREAK resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for ID resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for VAR resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for IF resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for FOR resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for GO resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for SWITCH resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for RETURN resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for DEFER resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for CONTINUE resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for SELECT resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for CHANNEL_OP resolved using rule 155 (return -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 69 (content -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 68 (values -> empty .)
    BREAK           reduce using rule 155 (return -> empty .)
    ID              reduce using rule 155 (return -> empty .)
    VAR             reduce using rule 155 (return -> empty .)
    LBRACKET        reduce using rule 155 (return -> empty .)
    IF              reduce using rule 155 (return -> empty .)
    FOR             reduce using rule 155 (return -> empty .)
    GO              reduce using rule 155 (return -> empty .)
    SWITCH          reduce using rule 155 (return -> empty .)
    RETURN          reduce using rule 155 (return -> empty .)
    DEFER           reduce using rule 155 (return -> empty .)
    CONTINUE        reduce using rule 155 (return -> empty .)
    SELECT          reduce using rule 155 (return -> empty .)
    CHANNEL_OP      reduce using rule 155 (return -> empty .)
    RBRACE          reduce using rule 68 (values -> empty .)

  ! RBRACE          [ reduce using rule 69 (content -> empty .) ]
  ! BREAK           [ reduce using rule 190 (callback -> empty .) ]
  ! ID              [ reduce using rule 190 (callback -> empty .) ]
  ! VAR             [ reduce using rule 190 (callback -> empty .) ]
  ! LBRACKET        [ reduce using rule 190 (callback -> empty .) ]
  ! IF              [ reduce using rule 190 (callback -> empty .) ]
  ! FOR             [ reduce using rule 190 (callback -> empty .) ]
  ! GO              [ reduce using rule 190 (callback -> empty .) ]
  ! SWITCH          [ reduce using rule 190 (callback -> empty .) ]
  ! RETURN          [ reduce using rule 190 (callback -> empty .) ]
  ! DEFER           [ reduce using rule 190 (callback -> empty .) ]
  ! CONTINUE        [ reduce using rule 190 (callback -> empty .) ]
  ! SELECT          [ reduce using rule 190 (callback -> empty .) ]
  ! CHANNEL_OP      [ reduce using rule 190 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 190 (callback -> empty .) ]
  ! RBRACE          [ reduce using rule 155 (return -> empty .) ]


state 410

    (139) for -> FOR ID COMMA ID COLON_EQUAL . RANGE ID LBRACE content RBRACE

    RANGE           shift and go to state 443


state 411

    (141) for -> FOR ID COLON_EQUAL RANGE ID . LBRACE content RBRACE

    LBRACE          shift and go to state 444


state 412

    (137) for -> FOR expression LBRACE content RBRACE .

    BREAK           reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    ID              reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    VAR             reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    LBRACKET        reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    IF              reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    FOR             reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    GO              reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    SWITCH          reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    RETURN          reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    DEFER           reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    CONTINUE        reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    SELECT          reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    RBRACE          reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    CASE            reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)
    DEFAULT         reduce using rule 137 (for -> FOR expression LBRACE content RBRACE .)


state 413

    (138) for -> FOR for_declaration SEMICOLON expression SEMICOLON . expression LBRACE content RBRACE
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN
    (198) empty -> .

  ! shift/reduce conflict for LBRACE resolved as shift
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    ID              shift and go to state 214
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)

  ! LBRACE          [ reduce using rule 198 (empty -> .) ]

    expression                     shift and go to state 445
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152
    empty                          shift and go to state 226

state 414

    (140) for -> FOR UNDERSCORE COMMA ID COLON_EQUAL . RANGE ID LBRACE content RBRACE

    RANGE           shift and go to state 446


state 415

    (111) goroutine -> GO lambda LPAREN parameters RPAREN .

    BREAK           reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    ID              reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    VAR             reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    LBRACKET        reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    IF              reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    FOR             reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    GO              reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    SWITCH          reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    RETURN          reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    DEFER           reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    CONTINUE        reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    SELECT          reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    CHANNEL_OP      reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    RBRACE          reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    CASE            reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)
    DEFAULT         reduce using rule 111 (goroutine -> GO lambda LPAREN parameters RPAREN .)


state 416

    (99) switch -> SWITCH ID LBRACE cases_value default . RBRACE

    RBRACE          shift and go to state 447


state 417

    (108) cases_value -> CASE value . COLON content cases_value

    COLON           shift and go to state 448


state 418

    (100) switch -> SWITCH LBRACE cases_rel default RBRACE .

    BREAK           reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    ID              reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    VAR             reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    LBRACKET        reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    IF              reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    FOR             reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    GO              reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    SWITCH          reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    RETURN          reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    DEFER           reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    CONTINUE        reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    SELECT          reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    CHANNEL_OP      reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    RBRACE          reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    CASE            reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)
    DEFAULT         reduce using rule 100 (switch -> SWITCH LBRACE cases_rel default RBRACE .)


state 419

    (106) default -> DEFAULT COLON . content
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 449
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 420

    (101) cases_rel -> CASE case_condition COLON . content cases_rel
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 450
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 421

    (103) case_condition -> ID REL_OP . value
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 92
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    value                          shift and go to state 451
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 422

    (95) select_cases -> CASE expression COLON . content select_cases
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 452
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 423

    (96) select_cases -> DEFAULT COLON content .

    RBRACE          reduce using rule 96 (select_cases -> DEFAULT COLON content .)


state 424

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content . RBRACE

    RBRACE          shift and go to state 453


state 425

    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE . content RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 454
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 426

    (62) array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .

    FUNC            reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    VAR             reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    TYPE            reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    CONST           reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    $end            reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    COMMA           reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    RPAREN          reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    LBRACE          reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    ID              reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    RBRACE          reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    EQUAL           reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    BREAK           reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    LBRACKET        reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    IF              reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    FOR             reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    GO              reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    SWITCH          reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    RETURN          reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    DEFER           reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    CONTINUE        reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    SELECT          reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    CHANNEL_OP      reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    CASE            reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)
    DEFAULT         reduce using rule 62 (array_statement -> LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE .)


state 427

    (187) callback -> ID DOT ID LPAREN ID LPAREN . ID RPAREN RPAREN
    (30) function -> ID LPAREN . parameters RPAREN
    (31) parameters -> . expression
    (32) parameters -> . CHAN TYPES
    (33) parameters -> . expression COMMA parameters
    (34) parameters -> . empty
    (116) expression -> . value
    (117) expression -> . LPAREN expression RPAREN
    (118) expression -> . expression ARITH_OP expression
    (119) expression -> . expression REL_OP expression
    (120) expression -> . expression LOG_OP expression
    (121) expression -> . expression POINTER expression
    (122) expression -> . NOT expression
    (123) expression -> . ID COLON_EQUAL channel
    (124) expression -> . channel
    (125) expression -> . increment
    (126) expression -> . lambda
    (127) expression -> . decrement
    (128) expression -> . struct
    (129) expression -> . callback
    (130) expression -> . struct_declaretion
    (131) expression -> . address_pointer
    (132) expression -> . ID
    (133) expression -> . map_statement
    (134) expression -> . map
    (198) empty -> .
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (181) increment -> . ID INCREMENT
    (92) lambda -> . FUNC LPAREN args RPAREN types LBRACE content RBRACE
    (93) lambda -> . FUNC LPAREN args RPAREN LBRACE content RBRACE
    (182) decrement -> . ID DECREMENT
    (184) struct -> . ID DOT ID
    (185) struct -> . ID DOT struct
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (156) struct_declaretion -> . ID LBRACE struct_declaretion_values RBRACE
    (183) address_pointer -> . ADDRESS ID
    (143) map_statement -> . MAP LBRACKET TYPES RBRACKET map_statement
    (144) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE
    (145) map_statement -> . MAP LBRACKET TYPES RBRACKET TYPES
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

    ID              shift and go to state 455
    CHAN            shift and go to state 273
    LPAREN          shift and go to state 212
    NOT             shift and go to state 213
    RPAREN          reduce using rule 198 (empty -> .)
    COMMA           reduce using rule 198 (empty -> .)
    ARITH_OP        reduce using rule 198 (empty -> .)
    REL_OP          reduce using rule 198 (empty -> .)
    LOG_OP          reduce using rule 198 (empty -> .)
    POINTER         reduce using rule 198 (empty -> .)
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    LBRACE          shift and go to state 210
    CHANNEL_OP      shift and go to state 161
    FUNC            shift and go to state 225
    ADDRESS         shift and go to state 227
    MAP             shift and go to state 228
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    parameters                     shift and go to state 271
    expression                     shift and go to state 272
    empty                          shift and go to state 274
    value                          shift and go to state 211
    channel                        shift and go to state 215
    increment                      shift and go to state 216
    lambda                         shift and go to state 217
    decrement                      shift and go to state 218
    struct                         shift and go to state 219
    callback                       shift and go to state 220
    struct_declaretion             shift and go to state 221
    address_pointer                shift and go to state 222
    map_statement                  shift and go to state 223
    map                            shift and go to state 224
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95
    function                       shift and go to state 152

state 428

    (112) if -> IF expression LBRACE content RBRACE else .

    BREAK           reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    ID              reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    VAR             reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    LBRACKET        reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    IF              reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    FOR             reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    GO              reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    SWITCH          reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    RETURN          reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    DEFER           reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    CONTINUE        reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    SELECT          reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    CHANNEL_OP      reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    RBRACE          reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    CASE            reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)
    DEFAULT         reduce using rule 112 (if -> IF expression LBRACE content RBRACE else .)


state 429

    (113) else -> ELSE . LBRACE content RBRACE
    (114) else -> ELSE . if
    (112) if -> . IF expression LBRACE content RBRACE else

    LBRACE          shift and go to state 456
    IF              shift and go to state 153

    if                             shift and go to state 457

state 430

    (115) else -> empty .

    BREAK           reduce using rule 115 (else -> empty .)
    ID              reduce using rule 115 (else -> empty .)
    VAR             reduce using rule 115 (else -> empty .)
    LBRACKET        reduce using rule 115 (else -> empty .)
    IF              reduce using rule 115 (else -> empty .)
    FOR             reduce using rule 115 (else -> empty .)
    GO              reduce using rule 115 (else -> empty .)
    SWITCH          reduce using rule 115 (else -> empty .)
    RETURN          reduce using rule 115 (else -> empty .)
    DEFER           reduce using rule 115 (else -> empty .)
    CONTINUE        reduce using rule 115 (else -> empty .)
    SELECT          reduce using rule 115 (else -> empty .)
    CHANNEL_OP      reduce using rule 115 (else -> empty .)
    RBRACE          reduce using rule 115 (else -> empty .)
    CASE            reduce using rule 115 (else -> empty .)
    DEFAULT         reduce using rule 115 (else -> empty .)


state 431

    (148) map -> LBRACE map RBRACE COMMA map .

    LBRACE          reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    ARITH_OP        reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    REL_OP          reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    LOG_OP          reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    POINTER         reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    BREAK           reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    ID              reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    VAR             reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    LBRACKET        reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    IF              reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    FOR             reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    GO              reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    SWITCH          reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    RETURN          reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    DEFER           reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    CONTINUE        reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    SELECT          reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    CHANNEL_OP      reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    RBRACE          reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    CASE            reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    DEFAULT         reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    COMMA           reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    RPAREN          reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    SEMICOLON       reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)
    COLON           reduce using rule 148 (map -> LBRACE map RBRACE COMMA map .)


state 432

    (149) map -> value . COLON value
    (150) map -> value . COLON value COMMA map
    (151) map -> value . COLON map
    (152) map -> value . COLON map COMMA map

    COLON           shift and go to state 294


state 433

    (150) map -> value COLON value COMMA map .

    LBRACE          reduce using rule 150 (map -> value COLON value COMMA map .)
    ARITH_OP        reduce using rule 150 (map -> value COLON value COMMA map .)
    REL_OP          reduce using rule 150 (map -> value COLON value COMMA map .)
    LOG_OP          reduce using rule 150 (map -> value COLON value COMMA map .)
    POINTER         reduce using rule 150 (map -> value COLON value COMMA map .)
    BREAK           reduce using rule 150 (map -> value COLON value COMMA map .)
    ID              reduce using rule 150 (map -> value COLON value COMMA map .)
    VAR             reduce using rule 150 (map -> value COLON value COMMA map .)
    LBRACKET        reduce using rule 150 (map -> value COLON value COMMA map .)
    IF              reduce using rule 150 (map -> value COLON value COMMA map .)
    FOR             reduce using rule 150 (map -> value COLON value COMMA map .)
    GO              reduce using rule 150 (map -> value COLON value COMMA map .)
    SWITCH          reduce using rule 150 (map -> value COLON value COMMA map .)
    RETURN          reduce using rule 150 (map -> value COLON value COMMA map .)
    DEFER           reduce using rule 150 (map -> value COLON value COMMA map .)
    CONTINUE        reduce using rule 150 (map -> value COLON value COMMA map .)
    SELECT          reduce using rule 150 (map -> value COLON value COMMA map .)
    CHANNEL_OP      reduce using rule 150 (map -> value COLON value COMMA map .)
    RBRACE          reduce using rule 150 (map -> value COLON value COMMA map .)
    CASE            reduce using rule 150 (map -> value COLON value COMMA map .)
    DEFAULT         reduce using rule 150 (map -> value COLON value COMMA map .)
    COMMA           reduce using rule 150 (map -> value COLON value COMMA map .)
    RPAREN          reduce using rule 150 (map -> value COLON value COMMA map .)
    SEMICOLON       reduce using rule 150 (map -> value COLON value COMMA map .)
    COLON           reduce using rule 150 (map -> value COLON value COMMA map .)


state 434

    (152) map -> value COLON map COMMA map .

    LBRACE          reduce using rule 152 (map -> value COLON map COMMA map .)
    ARITH_OP        reduce using rule 152 (map -> value COLON map COMMA map .)
    REL_OP          reduce using rule 152 (map -> value COLON map COMMA map .)
    LOG_OP          reduce using rule 152 (map -> value COLON map COMMA map .)
    POINTER         reduce using rule 152 (map -> value COLON map COMMA map .)
    BREAK           reduce using rule 152 (map -> value COLON map COMMA map .)
    ID              reduce using rule 152 (map -> value COLON map COMMA map .)
    VAR             reduce using rule 152 (map -> value COLON map COMMA map .)
    LBRACKET        reduce using rule 152 (map -> value COLON map COMMA map .)
    IF              reduce using rule 152 (map -> value COLON map COMMA map .)
    FOR             reduce using rule 152 (map -> value COLON map COMMA map .)
    GO              reduce using rule 152 (map -> value COLON map COMMA map .)
    SWITCH          reduce using rule 152 (map -> value COLON map COMMA map .)
    RETURN          reduce using rule 152 (map -> value COLON map COMMA map .)
    DEFER           reduce using rule 152 (map -> value COLON map COMMA map .)
    CONTINUE        reduce using rule 152 (map -> value COLON map COMMA map .)
    SELECT          reduce using rule 152 (map -> value COLON map COMMA map .)
    CHANNEL_OP      reduce using rule 152 (map -> value COLON map COMMA map .)
    RBRACE          reduce using rule 152 (map -> value COLON map COMMA map .)
    CASE            reduce using rule 152 (map -> value COLON map COMMA map .)
    DEFAULT         reduce using rule 152 (map -> value COLON map COMMA map .)
    COMMA           reduce using rule 152 (map -> value COLON map COMMA map .)
    RPAREN          reduce using rule 152 (map -> value COLON map COMMA map .)
    SEMICOLON       reduce using rule 152 (map -> value COLON map COMMA map .)
    COLON           reduce using rule 152 (map -> value COLON map COMMA map .)


state 435

    (158) struct_declaretion_values -> LBRACE struct_declaretion_values RBRACE .

    RBRACE          reduce using rule 158 (struct_declaretion_values -> LBRACE struct_declaretion_values RBRACE .)


state 436

    (92) lambda -> FUNC LPAREN args RPAREN types . LBRACE content RBRACE

    LBRACE          shift and go to state 458


state 437

    (93) lambda -> FUNC LPAREN args RPAREN LBRACE . content RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 459
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 438

    (144) map_statement -> MAP LBRACKET TYPES RBRACKET TYPES . LBRACE map RBRACE
    (145) map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 460
    ARITH_OP        reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    REL_OP          reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    LOG_OP          reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    POINTER         reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    BREAK           reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    ID              reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    VAR             reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    LBRACKET        reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    IF              reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    FOR             reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    GO              reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    SWITCH          reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    RETURN          reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    DEFER           reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    CONTINUE        reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    SELECT          reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    CHANNEL_OP      reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    RBRACE          reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    CASE            reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    DEFAULT         reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    COMMA           reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    RPAREN          reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    SEMICOLON       reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)
    COLON           reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .)

  ! LBRACE          [ reduce using rule 145 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES .) ]


state 439

    (143) map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .

    LBRACE          reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    ARITH_OP        reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    REL_OP          reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    LOG_OP          reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    POINTER         reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    BREAK           reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    ID              reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    VAR             reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    LBRACKET        reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    IF              reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    FOR             reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    GO              reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    SWITCH          reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    RETURN          reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    DEFER           reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    CONTINUE        reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    SELECT          reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    CHANNEL_OP      reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    RBRACE          reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    CASE            reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    DEFAULT         reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    COMMA           reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    RPAREN          reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    SEMICOLON       reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)
    COLON           reduce using rule 143 (map_statement -> MAP LBRACKET TYPES RBRACKET map_statement .)


state 440

    (179) pointer -> ID LBRACKET NUMBER RBRACKET .
    (171) map_position -> LBRACKET NUMBER RBRACKET . map_position
    (173) map_position -> LBRACKET NUMBER RBRACKET .
    (46) brackets -> LBRACKET NUMBER RBRACKET . brackets
    (47) brackets -> LBRACKET NUMBER RBRACKET .
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

  ! reduce/reduce conflict for COMMA resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for COLON resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
  ! reduce/reduce conflict for RBRACE resolved using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    EQUAL           reduce using rule 173 (map_position -> LBRACKET NUMBER RBRACKET .)
    COMMA           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    COLON           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    RBRACE          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    LBRACKET        shift and go to state 461

  ! COMMA           [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! COLON           [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]
  ! RBRACE          [ reduce using rule 179 (pointer -> ID LBRACKET NUMBER RBRACKET .) ]

    map_position                   shift and go to state 340
    brackets                       shift and go to state 258

state 441

    (170) map_position -> LBRACKET STRING RBRACKET . map_position
    (172) map_position -> LBRACKET STRING RBRACKET .
    (48) brackets -> LBRACKET STRING RBRACKET . brackets
    (49) brackets -> LBRACKET STRING RBRACKET .
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

    EQUAL           reduce using rule 172 (map_position -> LBRACKET STRING RBRACKET .)
    COMMA           reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    COLON           reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    RBRACE          reduce using rule 49 (brackets -> LBRACKET STRING RBRACKET .)
    LBRACKET        shift and go to state 461

    map_position                   shift and go to state 341
    brackets                       shift and go to state 259

state 442

    (136) for -> FOR NOT ID LBRACE content RBRACE .

    BREAK           reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    ID              reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    VAR             reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    LBRACKET        reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    IF              reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    FOR             reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    GO              reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    SWITCH          reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    RETURN          reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    DEFER           reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    CONTINUE        reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    SELECT          reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    RBRACE          reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    CASE            reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)
    DEFAULT         reduce using rule 136 (for -> FOR NOT ID LBRACE content RBRACE .)


state 443

    (139) for -> FOR ID COMMA ID COLON_EQUAL RANGE . ID LBRACE content RBRACE

    ID              shift and go to state 462


state 444

    (141) for -> FOR ID COLON_EQUAL RANGE ID LBRACE . content RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 463
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 445

    (138) for -> FOR for_declaration SEMICOLON expression SEMICOLON expression . LBRACE content RBRACE
    (118) expression -> expression . ARITH_OP expression
    (119) expression -> expression . REL_OP expression
    (120) expression -> expression . LOG_OP expression
    (121) expression -> expression . POINTER expression

    LBRACE          shift and go to state 464
    ARITH_OP        shift and go to state 286
    REL_OP          shift and go to state 287
    LOG_OP          shift and go to state 288
    POINTER         shift and go to state 289


state 446

    (140) for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE . ID LBRACE content RBRACE

    ID              shift and go to state 465


state 447

    (99) switch -> SWITCH ID LBRACE cases_value default RBRACE .

    BREAK           reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    ID              reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    VAR             reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    LBRACKET        reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    IF              reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    FOR             reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    GO              reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    SWITCH          reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    RETURN          reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    DEFER           reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    CONTINUE        reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    SELECT          reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    CHANNEL_OP      reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    RBRACE          reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    CASE            reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)
    DEFAULT         reduce using rule 99 (switch -> SWITCH ID LBRACE cases_value default RBRACE .)


state 448

    (108) cases_value -> CASE value COLON . content cases_value
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    CASE            reduce using rule 198 (empty -> .)
    DEFAULT         reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 466
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 449

    (106) default -> DEFAULT COLON content .

    RBRACE          reduce using rule 106 (default -> DEFAULT COLON content .)


state 450

    (101) cases_rel -> CASE case_condition COLON content . cases_rel
    (101) cases_rel -> . CASE case_condition COLON content cases_rel
    (102) cases_rel -> . empty
    (198) empty -> .

    CASE            shift and go to state 316
    DEFAULT         reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)

    cases_rel                      shift and go to state 467
    empty                          shift and go to state 317

state 451

    (103) case_condition -> ID REL_OP value .

    COLON           reduce using rule 103 (case_condition -> ID REL_OP value .)


state 452

    (95) select_cases -> CASE expression COLON content . select_cases
    (95) select_cases -> . CASE expression COLON content select_cases
    (96) select_cases -> . DEFAULT COLON content
    (97) select_cases -> . empty
    (198) empty -> .

    CASE            shift and go to state 319
    DEFAULT         shift and go to state 320
    RBRACE          reduce using rule 198 (empty -> .)

    select_cases                   shift and go to state 468
    empty                          shift and go to state 321

state 453

    (20) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE .

    FUNC            reduce using rule 20 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE .)
    VAR             reduce using rule 20 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE .)
    TYPE            reduce using rule 20 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE .)
    CONST           reduce using rule 20 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE .)
    $end            reduce using rule 20 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN LBRACE content RBRACE .)


state 454

    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content . RBRACE

    RBRACE          shift and go to state 469


state 455

    (187) callback -> ID DOT ID LPAREN ID LPAREN ID . RPAREN RPAREN
    (123) expression -> ID . COLON_EQUAL channel
    (132) expression -> ID .
    (181) increment -> ID . INCREMENT
    (182) decrement -> ID . DECREMENT
    (184) struct -> ID . DOT ID
    (185) struct -> ID . DOT struct
    (187) callback -> ID . DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (189) callback -> ID . DOT callback
    (156) struct_declaretion -> ID . LBRACE struct_declaretion_values RBRACE
    (197) map_varible -> ID . brackets
    (179) pointer -> ID . LBRACKET NUMBER RBRACKET
    (180) pointer -> ID . LBRACKET NUMBER COLON NUMBER RBRACKET
    (30) function -> ID . LPAREN parameters RPAREN
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 470
    COLON_EQUAL     shift and go to state 297
    COMMA           reduce using rule 132 (expression -> ID .)
    ARITH_OP        reduce using rule 132 (expression -> ID .)
    REL_OP          reduce using rule 132 (expression -> ID .)
    LOG_OP          reduce using rule 132 (expression -> ID .)
    POINTER         reduce using rule 132 (expression -> ID .)
    INCREMENT       shift and go to state 184
    DECREMENT       shift and go to state 185
    DOT             shift and go to state 298
    LBRACE          shift and go to state 299
    LBRACKET        shift and go to state 117
    LPAREN          shift and go to state 182

  ! RPAREN          [ reduce using rule 132 (expression -> ID .) ]

    brackets                       shift and go to state 116

state 456

    (113) else -> ELSE LBRACE . content RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 471
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 457

    (114) else -> ELSE if .

    BREAK           reduce using rule 114 (else -> ELSE if .)
    ID              reduce using rule 114 (else -> ELSE if .)
    VAR             reduce using rule 114 (else -> ELSE if .)
    LBRACKET        reduce using rule 114 (else -> ELSE if .)
    IF              reduce using rule 114 (else -> ELSE if .)
    FOR             reduce using rule 114 (else -> ELSE if .)
    GO              reduce using rule 114 (else -> ELSE if .)
    SWITCH          reduce using rule 114 (else -> ELSE if .)
    RETURN          reduce using rule 114 (else -> ELSE if .)
    DEFER           reduce using rule 114 (else -> ELSE if .)
    CONTINUE        reduce using rule 114 (else -> ELSE if .)
    SELECT          reduce using rule 114 (else -> ELSE if .)
    CHANNEL_OP      reduce using rule 114 (else -> ELSE if .)
    RBRACE          reduce using rule 114 (else -> ELSE if .)
    CASE            reduce using rule 114 (else -> ELSE if .)
    DEFAULT         reduce using rule 114 (else -> ELSE if .)


state 458

    (92) lambda -> FUNC LPAREN args RPAREN types LBRACE . content RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 472
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 459

    (93) lambda -> FUNC LPAREN args RPAREN LBRACE content . RBRACE

    RBRACE          shift and go to state 473


state 460

    (144) map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE . map RBRACE
    (146) map -> . empty
    (147) map -> . LBRACE map RBRACE
    (148) map -> . LBRACE map RBRACE COMMA map
    (149) map -> . value COLON value
    (150) map -> . value COLON value COMMA map
    (151) map -> . value COLON map
    (152) map -> . value COLON map COMMA map
    (198) empty -> .
    (191) value -> . NUMBER
    (192) value -> . STRING
    (193) value -> . LBRACE values RBRACE
    (194) value -> . map_varible
    (195) value -> . boolean
    (196) value -> . pointer
    (197) map_varible -> . ID brackets
    (177) boolean -> . FALSE
    (178) boolean -> . TRUE
    (179) pointer -> . ID LBRACKET NUMBER RBRACKET
    (180) pointer -> . ID LBRACKET NUMBER COLON NUMBER RBRACKET

    LBRACE          shift and go to state 290
    RBRACE          reduce using rule 198 (empty -> .)
    NUMBER          shift and go to state 90
    STRING          shift and go to state 91
    ID              shift and go to state 88
    FALSE           shift and go to state 96
    TRUE            shift and go to state 97

    map                            shift and go to state 474
    empty                          shift and go to state 352
    value                          shift and go to state 432
    map_varible                    shift and go to state 93
    boolean                        shift and go to state 94
    pointer                        shift and go to state 95

state 461

    (170) map_position -> LBRACKET . STRING RBRACKET map_position
    (171) map_position -> LBRACKET . NUMBER RBRACKET map_position
    (172) map_position -> LBRACKET . STRING RBRACKET
    (173) map_position -> LBRACKET . NUMBER RBRACKET
    (46) brackets -> LBRACKET . NUMBER RBRACKET brackets
    (47) brackets -> LBRACKET . NUMBER RBRACKET
    (48) brackets -> LBRACKET . STRING RBRACKET brackets
    (49) brackets -> LBRACKET . STRING RBRACKET
    (50) brackets -> LBRACKET . ID RBRACKET
    (51) brackets -> LBRACKET . ID RBRACKET brackets

    STRING          shift and go to state 407
    NUMBER          shift and go to state 475
    ID              shift and go to state 128


state 462

    (139) for -> FOR ID COMMA ID COLON_EQUAL RANGE ID . LBRACE content RBRACE

    LBRACE          shift and go to state 476


state 463

    (141) for -> FOR ID COLON_EQUAL RANGE ID LBRACE content . RBRACE

    RBRACE          shift and go to state 477


state 464

    (138) for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE . content RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 478
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 465

    (140) for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID . LBRACE content RBRACE

    LBRACE          shift and go to state 479


state 466

    (108) cases_value -> CASE value COLON content . cases_value
    (108) cases_value -> . CASE value COLON content cases_value
    (109) cases_value -> . empty
    (198) empty -> .

    CASE            shift and go to state 374
    DEFAULT         reduce using rule 198 (empty -> .)
    RBRACE          reduce using rule 198 (empty -> .)

    cases_value                    shift and go to state 480
    empty                          shift and go to state 375

state 467

    (101) cases_rel -> CASE case_condition COLON content cases_rel .

    DEFAULT         reduce using rule 101 (cases_rel -> CASE case_condition COLON content cases_rel .)
    RBRACE          reduce using rule 101 (cases_rel -> CASE case_condition COLON content cases_rel .)


state 468

    (95) select_cases -> CASE expression COLON content select_cases .

    RBRACE          reduce using rule 95 (select_cases -> CASE expression COLON content select_cases .)


state 469

    (21) method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE .

    FUNC            reduce using rule 21 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE .)
    VAR             reduce using rule 21 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE .)
    TYPE            reduce using rule 21 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE .)
    CONST           reduce using rule 21 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE .)
    $end            reduce using rule 21 (method_statement -> FUNC LPAREN ID ID RPAREN ID LPAREN args RPAREN TYPES LBRACE content RBRACE .)


state 470

    (187) callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN . RPAREN

    RPAREN          shift and go to state 481


state 471

    (113) else -> ELSE LBRACE content . RBRACE

    RBRACE          shift and go to state 482


state 472

    (92) lambda -> FUNC LPAREN args RPAREN types LBRACE content . RBRACE

    RBRACE          shift and go to state 483


state 473

    (93) lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .

    LBRACE          reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    ARITH_OP        reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    REL_OP          reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    LOG_OP          reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    POINTER         reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    LPAREN          reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    BREAK           reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    ID              reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    VAR             reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    LBRACKET        reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    IF              reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    FOR             reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    GO              reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    SWITCH          reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    RETURN          reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    DEFER           reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    CONTINUE        reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    SELECT          reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    RBRACE          reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    CASE            reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    DEFAULT         reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    COMMA           reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    RPAREN          reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    SEMICOLON       reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)
    COLON           reduce using rule 93 (lambda -> FUNC LPAREN args RPAREN LBRACE content RBRACE .)


state 474

    (144) map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map . RBRACE

    RBRACE          shift and go to state 484


state 475

    (171) map_position -> LBRACKET NUMBER . RBRACKET map_position
    (173) map_position -> LBRACKET NUMBER . RBRACKET
    (46) brackets -> LBRACKET NUMBER . RBRACKET brackets
    (47) brackets -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 485


state 476

    (139) for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE . content RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 486
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 477

    (141) for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .

    BREAK           reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    ID              reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    VAR             reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    LBRACKET        reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    IF              reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    FOR             reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    GO              reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    SWITCH          reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    RETURN          reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    DEFER           reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CONTINUE        reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    SELECT          reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    RBRACE          reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CASE            reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    DEFAULT         reduce using rule 141 (for -> FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)


state 478

    (138) for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content . RBRACE

    RBRACE          shift and go to state 487


state 479

    (140) for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE . content RBRACE
    (69) content -> . empty
    (70) content -> . variable_statement content
    (71) content -> . array_statement content
    (72) content -> . callback content
    (73) content -> . variable_redeclaration content
    (74) content -> . if content
    (75) content -> . for content
    (76) content -> . BREAK content
    (77) content -> . goroutine content
    (78) content -> . increment content
    (79) content -> . decrement content
    (80) content -> . switch content
    (81) content -> . ID channel content
    (82) content -> . return content
    (83) content -> . defer content
    (84) content -> . continue content
    (85) content -> . select content
    (86) content -> . channel content
    (198) empty -> .
    (159) variable_statement -> . VAR ID EQUAL slice_statement
    (160) variable_statement -> . VAR ID EQUAL array_statement
    (161) variable_statement -> . VAR ID types EQUAL expression
    (162) variable_statement -> . VAR ID EQUAL expression
    (163) variable_statement -> . VAR ID ID EQUAL expression
    (164) variable_statement -> . ID map_position EQUAL expression
    (165) variable_statement -> . ID COLON_EQUAL expression
    (166) variable_statement -> . map_position COLON_EQUAL expression
    (167) variable_statement -> . ID COLON_EQUAL slice_statement
    (168) variable_statement -> . ID COLON_EQUAL array_statement
    (169) variable_statement -> . VAR ID TYPES
    (59) array_statement -> . LBRACKET NUMBER RBRACKET TYPES
    (60) array_statement -> . LBRACKET NUMBER RBRACKET TYPES LBRACE values RBRACE
    (61) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES
    (62) array_statement -> . LBRACKET DOT DOT DOT RBRACKET TYPES LBRACE values RBRACE
    (186) callback -> . function
    (187) callback -> . ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN
    (188) callback -> . function DOT callback
    (189) callback -> . ID DOT callback
    (190) callback -> . empty
    (174) variable_redeclaration -> . ID EQUAL expression
    (175) variable_redeclaration -> . ID ASSIGN_OP expression
    (176) variable_redeclaration -> . ID DOT ID EQUAL expression
    (112) if -> . IF expression LBRACE content RBRACE else
    (135) for -> . FOR LBRACE content RBRACE
    (136) for -> . FOR NOT ID LBRACE content RBRACE
    (137) for -> . FOR expression LBRACE content RBRACE
    (138) for -> . FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE
    (139) for -> . FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (140) for -> . FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (141) for -> . FOR ID COLON_EQUAL RANGE ID LBRACE content RBRACE
    (110) goroutine -> . GO callback
    (111) goroutine -> . GO lambda LPAREN parameters RPAREN
    (181) increment -> . ID INCREMENT
    (182) decrement -> . ID DECREMENT
    (99) switch -> . SWITCH ID LBRACE cases_value default RBRACE
    (100) switch -> . SWITCH LBRACE cases_rel default RBRACE
    (153) return -> . RETURN
    (154) return -> . RETURN expression
    (155) return -> . empty
    (98) defer -> . DEFER function
    (87) continue -> . CONTINUE
    (94) select -> . SELECT LBRACE select_cases RBRACE
    (88) channel -> . CHANNEL_OP value
    (89) channel -> . CHANNEL_OP ID
    (90) channel -> . CHANNEL_OP callback
    (91) channel -> . CHANNEL_OP struct_declaretion
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (30) function -> . ID LPAREN parameters RPAREN

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for GO resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for DEFER resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for SELECT resolved as shift
  ! shift/reduce conflict for CHANNEL_OP resolved as shift
    BREAK           shift and go to state 139
    ID              shift and go to state 130
    RBRACE          reduce using rule 198 (empty -> .)
    VAR             shift and go to state 149
    LBRACKET        shift and go to state 151
    IF              shift and go to state 153
    FOR             shift and go to state 154
    GO              shift and go to state 155
    SWITCH          shift and go to state 156
    RETURN          shift and go to state 157
    DEFER           shift and go to state 158
    CONTINUE        shift and go to state 159
    SELECT          shift and go to state 160
    CHANNEL_OP      shift and go to state 161

  ! BREAK           [ reduce using rule 198 (empty -> .) ]
  ! ID              [ reduce using rule 198 (empty -> .) ]
  ! VAR             [ reduce using rule 198 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 198 (empty -> .) ]
  ! IF              [ reduce using rule 198 (empty -> .) ]
  ! FOR             [ reduce using rule 198 (empty -> .) ]
  ! GO              [ reduce using rule 198 (empty -> .) ]
  ! SWITCH          [ reduce using rule 198 (empty -> .) ]
  ! RETURN          [ reduce using rule 198 (empty -> .) ]
  ! DEFER           [ reduce using rule 198 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 198 (empty -> .) ]
  ! SELECT          [ reduce using rule 198 (empty -> .) ]
  ! CHANNEL_OP      [ reduce using rule 198 (empty -> .) ]

    content                        shift and go to state 488
    empty                          shift and go to state 132
    variable_statement             shift and go to state 133
    array_statement                shift and go to state 134
    callback                       shift and go to state 135
    variable_redeclaration         shift and go to state 136
    if                             shift and go to state 137
    for                            shift and go to state 138
    goroutine                      shift and go to state 140
    increment                      shift and go to state 141
    decrement                      shift and go to state 142
    switch                         shift and go to state 143
    channel                        shift and go to state 144
    return                         shift and go to state 145
    defer                          shift and go to state 146
    continue                       shift and go to state 147
    select                         shift and go to state 148
    map_position                   shift and go to state 150
    function                       shift and go to state 152

state 480

    (108) cases_value -> CASE value COLON content cases_value .

    DEFAULT         reduce using rule 108 (cases_value -> CASE value COLON content cases_value .)
    RBRACE          reduce using rule 108 (cases_value -> CASE value COLON content cases_value .)


state 481

    (187) callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .

    BREAK           reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    ID              reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    VAR             reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    LBRACKET        reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    IF              reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    FOR             reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    GO              reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    SWITCH          reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    RETURN          reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    DEFER           reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    CONTINUE        reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    SELECT          reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    CHANNEL_OP      reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    RBRACE          reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    CASE            reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    DEFAULT         reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    LBRACE          reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    ARITH_OP        reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    REL_OP          reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    LOG_OP          reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    POINTER         reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    COMMA           reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    RPAREN          reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    SEMICOLON       reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)
    COLON           reduce using rule 187 (callback -> ID DOT ID LPAREN ID LPAREN ID RPAREN RPAREN .)


state 482

    (113) else -> ELSE LBRACE content RBRACE .

    BREAK           reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    ID              reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    VAR             reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    LBRACKET        reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    IF              reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    FOR             reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    GO              reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    SWITCH          reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    RETURN          reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    DEFER           reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    CONTINUE        reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    SELECT          reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    RBRACE          reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    CASE            reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)
    DEFAULT         reduce using rule 113 (else -> ELSE LBRACE content RBRACE .)


state 483

    (92) lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .

    LBRACE          reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    ARITH_OP        reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    REL_OP          reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    LOG_OP          reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    POINTER         reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    LPAREN          reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    BREAK           reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    ID              reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    VAR             reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    LBRACKET        reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    IF              reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    FOR             reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    GO              reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    SWITCH          reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    RETURN          reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    DEFER           reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    CONTINUE        reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    SELECT          reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    RBRACE          reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    CASE            reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    DEFAULT         reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    COMMA           reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    RPAREN          reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    SEMICOLON       reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)
    COLON           reduce using rule 92 (lambda -> FUNC LPAREN args RPAREN types LBRACE content RBRACE .)


state 484

    (144) map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .

    LBRACE          reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    ARITH_OP        reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    REL_OP          reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    LOG_OP          reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    POINTER         reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    BREAK           reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    ID              reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    VAR             reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    LBRACKET        reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    IF              reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    FOR             reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    GO              reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    SWITCH          reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    RETURN          reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    DEFER           reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    CONTINUE        reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    SELECT          reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    CHANNEL_OP      reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    RBRACE          reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    CASE            reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    DEFAULT         reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    COMMA           reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    RPAREN          reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    SEMICOLON       reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)
    COLON           reduce using rule 144 (map_statement -> MAP LBRACKET TYPES RBRACKET TYPES LBRACE map RBRACE .)


state 485

    (171) map_position -> LBRACKET NUMBER RBRACKET . map_position
    (173) map_position -> LBRACKET NUMBER RBRACKET .
    (46) brackets -> LBRACKET NUMBER RBRACKET . brackets
    (47) brackets -> LBRACKET NUMBER RBRACKET .
    (170) map_position -> . LBRACKET STRING RBRACKET map_position
    (171) map_position -> . LBRACKET NUMBER RBRACKET map_position
    (172) map_position -> . LBRACKET STRING RBRACKET
    (173) map_position -> . LBRACKET NUMBER RBRACKET
    (46) brackets -> . LBRACKET NUMBER RBRACKET brackets
    (47) brackets -> . LBRACKET NUMBER RBRACKET
    (48) brackets -> . LBRACKET STRING RBRACKET brackets
    (49) brackets -> . LBRACKET STRING RBRACKET
    (50) brackets -> . LBRACKET ID RBRACKET
    (51) brackets -> . LBRACKET ID RBRACKET brackets

    EQUAL           reduce using rule 173 (map_position -> LBRACKET NUMBER RBRACKET .)
    COMMA           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    COLON           reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    RBRACE          reduce using rule 47 (brackets -> LBRACKET NUMBER RBRACKET .)
    LBRACKET        shift and go to state 461

    map_position                   shift and go to state 340
    brackets                       shift and go to state 258

state 486

    (139) for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content . RBRACE

    RBRACE          shift and go to state 489


state 487

    (138) for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .

    BREAK           reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    ID              reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    VAR             reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    LBRACKET        reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    IF              reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    FOR             reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    GO              reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    SWITCH          reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    RETURN          reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    DEFER           reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    CONTINUE        reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    SELECT          reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    RBRACE          reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    CASE            reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)
    DEFAULT         reduce using rule 138 (for -> FOR for_declaration SEMICOLON expression SEMICOLON expression LBRACE content RBRACE .)


state 488

    (140) for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content . RBRACE

    RBRACE          shift and go to state 490


state 489

    (139) for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .

    BREAK           reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    ID              reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    VAR             reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    LBRACKET        reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    IF              reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    FOR             reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    GO              reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    SWITCH          reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    RETURN          reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    DEFER           reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CONTINUE        reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    SELECT          reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    RBRACE          reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CASE            reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    DEFAULT         reduce using rule 139 (for -> FOR ID COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)


state 490

    (140) for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .

    BREAK           reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    ID              reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    VAR             reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    LBRACKET        reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    IF              reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    FOR             reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    GO              reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    SWITCH          reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    RETURN          reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    DEFER           reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CONTINUE        reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    SELECT          reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CHANNEL_OP      reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    RBRACE          reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    CASE            reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)
    DEFAULT         reduce using rule 140 (for -> FOR UNDERSCORE COMMA ID COLON_EQUAL RANGE ID LBRACE content RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACE in state 80 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 105 resolved as shift
WARNING: shift/reduce conflict for ID in state 105 resolved as shift
WARNING: shift/reduce conflict for VAR in state 105 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 105 resolved as shift
WARNING: shift/reduce conflict for IF in state 105 resolved as shift
WARNING: shift/reduce conflict for FOR in state 105 resolved as shift
WARNING: shift/reduce conflict for GO in state 105 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 105 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 105 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 105 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 105 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 105 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 105 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 109 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for VAR in state 129 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 129 resolved as shift
WARNING: shift/reduce conflict for IF in state 129 resolved as shift
WARNING: shift/reduce conflict for FOR in state 129 resolved as shift
WARNING: shift/reduce conflict for GO in state 129 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 129 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 129 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 129 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 129 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 129 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 129 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for VAR in state 133 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 133 resolved as shift
WARNING: shift/reduce conflict for IF in state 133 resolved as shift
WARNING: shift/reduce conflict for FOR in state 133 resolved as shift
WARNING: shift/reduce conflict for GO in state 133 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 133 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 133 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 133 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 133 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 133 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 133 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 134 resolved as shift
WARNING: shift/reduce conflict for ID in state 134 resolved as shift
WARNING: shift/reduce conflict for VAR in state 134 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 134 resolved as shift
WARNING: shift/reduce conflict for IF in state 134 resolved as shift
WARNING: shift/reduce conflict for FOR in state 134 resolved as shift
WARNING: shift/reduce conflict for GO in state 134 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 134 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 134 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 134 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 134 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 134 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 134 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 135 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
WARNING: shift/reduce conflict for VAR in state 135 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 135 resolved as shift
WARNING: shift/reduce conflict for IF in state 135 resolved as shift
WARNING: shift/reduce conflict for FOR in state 135 resolved as shift
WARNING: shift/reduce conflict for GO in state 135 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 135 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 135 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 135 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 135 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 135 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 135 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 136 resolved as shift
WARNING: shift/reduce conflict for ID in state 136 resolved as shift
WARNING: shift/reduce conflict for VAR in state 136 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 136 resolved as shift
WARNING: shift/reduce conflict for IF in state 136 resolved as shift
WARNING: shift/reduce conflict for FOR in state 136 resolved as shift
WARNING: shift/reduce conflict for GO in state 136 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 136 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 136 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 136 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 136 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 136 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 136 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 137 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: shift/reduce conflict for VAR in state 137 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 137 resolved as shift
WARNING: shift/reduce conflict for IF in state 137 resolved as shift
WARNING: shift/reduce conflict for FOR in state 137 resolved as shift
WARNING: shift/reduce conflict for GO in state 137 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 137 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 137 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 137 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 137 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 137 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 137 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 138 resolved as shift
WARNING: shift/reduce conflict for ID in state 138 resolved as shift
WARNING: shift/reduce conflict for VAR in state 138 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 138 resolved as shift
WARNING: shift/reduce conflict for IF in state 138 resolved as shift
WARNING: shift/reduce conflict for FOR in state 138 resolved as shift
WARNING: shift/reduce conflict for GO in state 138 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 138 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 138 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 138 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 138 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 138 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 138 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 139 resolved as shift
WARNING: shift/reduce conflict for ID in state 139 resolved as shift
WARNING: shift/reduce conflict for VAR in state 139 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 139 resolved as shift
WARNING: shift/reduce conflict for IF in state 139 resolved as shift
WARNING: shift/reduce conflict for FOR in state 139 resolved as shift
WARNING: shift/reduce conflict for GO in state 139 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 139 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 139 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 139 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 139 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 139 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 139 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 140 resolved as shift
WARNING: shift/reduce conflict for ID in state 140 resolved as shift
WARNING: shift/reduce conflict for VAR in state 140 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 140 resolved as shift
WARNING: shift/reduce conflict for IF in state 140 resolved as shift
WARNING: shift/reduce conflict for FOR in state 140 resolved as shift
WARNING: shift/reduce conflict for GO in state 140 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 140 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 140 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 140 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 140 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 140 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 140 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 141 resolved as shift
WARNING: shift/reduce conflict for ID in state 141 resolved as shift
WARNING: shift/reduce conflict for VAR in state 141 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 141 resolved as shift
WARNING: shift/reduce conflict for IF in state 141 resolved as shift
WARNING: shift/reduce conflict for FOR in state 141 resolved as shift
WARNING: shift/reduce conflict for GO in state 141 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 141 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 141 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 141 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 141 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 141 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 141 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 142 resolved as shift
WARNING: shift/reduce conflict for ID in state 142 resolved as shift
WARNING: shift/reduce conflict for VAR in state 142 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 142 resolved as shift
WARNING: shift/reduce conflict for IF in state 142 resolved as shift
WARNING: shift/reduce conflict for FOR in state 142 resolved as shift
WARNING: shift/reduce conflict for GO in state 142 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 142 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 142 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 142 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 142 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 142 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 142 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 143 resolved as shift
WARNING: shift/reduce conflict for ID in state 143 resolved as shift
WARNING: shift/reduce conflict for VAR in state 143 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 143 resolved as shift
WARNING: shift/reduce conflict for IF in state 143 resolved as shift
WARNING: shift/reduce conflict for FOR in state 143 resolved as shift
WARNING: shift/reduce conflict for GO in state 143 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 143 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 143 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 143 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 143 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 143 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 143 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 144 resolved as shift
WARNING: shift/reduce conflict for ID in state 144 resolved as shift
WARNING: shift/reduce conflict for VAR in state 144 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 144 resolved as shift
WARNING: shift/reduce conflict for IF in state 144 resolved as shift
WARNING: shift/reduce conflict for FOR in state 144 resolved as shift
WARNING: shift/reduce conflict for GO in state 144 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 144 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 144 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 144 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 144 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 144 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 144 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 145 resolved as shift
WARNING: shift/reduce conflict for ID in state 145 resolved as shift
WARNING: shift/reduce conflict for VAR in state 145 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 145 resolved as shift
WARNING: shift/reduce conflict for IF in state 145 resolved as shift
WARNING: shift/reduce conflict for FOR in state 145 resolved as shift
WARNING: shift/reduce conflict for GO in state 145 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 145 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 145 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 145 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 145 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 145 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 145 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 146 resolved as shift
WARNING: shift/reduce conflict for ID in state 146 resolved as shift
WARNING: shift/reduce conflict for VAR in state 146 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 146 resolved as shift
WARNING: shift/reduce conflict for IF in state 146 resolved as shift
WARNING: shift/reduce conflict for FOR in state 146 resolved as shift
WARNING: shift/reduce conflict for GO in state 146 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 146 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 146 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 146 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 146 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 146 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 146 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 147 resolved as shift
WARNING: shift/reduce conflict for ID in state 147 resolved as shift
WARNING: shift/reduce conflict for VAR in state 147 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 147 resolved as shift
WARNING: shift/reduce conflict for IF in state 147 resolved as shift
WARNING: shift/reduce conflict for FOR in state 147 resolved as shift
WARNING: shift/reduce conflict for GO in state 147 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 147 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 147 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 147 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 147 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 147 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 147 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 148 resolved as shift
WARNING: shift/reduce conflict for ID in state 148 resolved as shift
WARNING: shift/reduce conflict for VAR in state 148 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 148 resolved as shift
WARNING: shift/reduce conflict for IF in state 148 resolved as shift
WARNING: shift/reduce conflict for FOR in state 148 resolved as shift
WARNING: shift/reduce conflict for GO in state 148 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 148 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 148 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 148 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 148 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 148 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 148 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 153 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 154 resolved as shift
WARNING: shift/reduce conflict for ID in state 155 resolved as shift
WARNING: shift/reduce conflict for ID in state 157 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 157 resolved as shift
WARNING: shift/reduce conflict for ID in state 157 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 157 resolved as shift
WARNING: shift/reduce conflict for ID in state 161 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 161 resolved as shift
WARNING: shift/reduce conflict for TYPES in state 173 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 174 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 175 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 177 resolved as shift
WARNING: shift/reduce conflict for ID in state 177 resolved as shift
WARNING: shift/reduce conflict for VAR in state 177 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 177 resolved as shift
WARNING: shift/reduce conflict for IF in state 177 resolved as shift
WARNING: shift/reduce conflict for FOR in state 177 resolved as shift
WARNING: shift/reduce conflict for GO in state 177 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 177 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 177 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 177 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 177 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 177 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 177 resolved as shift
WARNING: shift/reduce conflict for ID in state 179 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 179 resolved as shift
WARNING: shift/reduce conflict for ID in state 180 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 180 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 180 resolved as shift
WARNING: shift/reduce conflict for ID in state 181 resolved as shift
WARNING: shift/reduce conflict for ID in state 183 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 183 resolved as shift
WARNING: shift/reduce conflict for ID in state 205 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 205 resolved as shift
WARNING: shift/reduce conflict for ID in state 208 resolved as shift
WARNING: shift/reduce conflict for COLON in state 211 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 213 resolved as shift
WARNING: shift/reduce conflict for ID in state 213 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 213 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 214 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 214 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 229 resolved as shift
WARNING: shift/reduce conflict for ID in state 229 resolved as shift
WARNING: shift/reduce conflict for VAR in state 229 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 229 resolved as shift
WARNING: shift/reduce conflict for IF in state 229 resolved as shift
WARNING: shift/reduce conflict for FOR in state 229 resolved as shift
WARNING: shift/reduce conflict for GO in state 229 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 229 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 229 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 229 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 229 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 229 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 229 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 230 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 231 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 246 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 246 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 252 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 254 resolved as shift
WARNING: shift/reduce conflict for ID in state 263 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 263 resolved as shift
WARNING: shift/reduce conflict for ID in state 278 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 278 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 278 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 285 resolved as shift
WARNING: shift/reduce conflict for ID in state 285 resolved as shift
WARNING: shift/reduce conflict for VAR in state 285 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 285 resolved as shift
WARNING: shift/reduce conflict for IF in state 285 resolved as shift
WARNING: shift/reduce conflict for FOR in state 285 resolved as shift
WARNING: shift/reduce conflict for GO in state 285 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 285 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 285 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 285 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 285 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 285 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 285 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 286 resolved as shift
WARNING: shift/reduce conflict for ID in state 286 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 286 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 287 resolved as shift
WARNING: shift/reduce conflict for ID in state 287 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 287 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 288 resolved as shift
WARNING: shift/reduce conflict for ID in state 288 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 288 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 289 resolved as shift
WARNING: shift/reduce conflict for ID in state 289 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 289 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 294 resolved as shift
WARNING: shift/reduce conflict for ID in state 294 resolved as shift
WARNING: shift/reduce conflict for ARITH_OP in state 296 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 296 resolved as shift
WARNING: shift/reduce conflict for LOG_OP in state 296 resolved as shift
WARNING: shift/reduce conflict for POINTER in state 296 resolved as shift
WARNING: shift/reduce conflict for ID in state 298 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 306 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 309 resolved as shift
WARNING: shift/reduce conflict for ID in state 309 resolved as shift
WARNING: shift/reduce conflict for VAR in state 309 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 309 resolved as shift
WARNING: shift/reduce conflict for IF in state 309 resolved as shift
WARNING: shift/reduce conflict for FOR in state 309 resolved as shift
WARNING: shift/reduce conflict for GO in state 309 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 309 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 309 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 309 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 309 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 309 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 309 resolved as shift
WARNING: shift/reduce conflict for ID in state 313 resolved as shift
WARNING: shift/reduce conflict for ID in state 330 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 330 resolved as shift
WARNING: shift/reduce conflict for ID in state 335 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 335 resolved as shift
WARNING: shift/reduce conflict for ID in state 339 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 339 resolved as shift
WARNING: shift/reduce conflict for ARITH_OP in state 343 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 343 resolved as shift
WARNING: shift/reduce conflict for LOG_OP in state 343 resolved as shift
WARNING: shift/reduce conflict for POINTER in state 343 resolved as shift
WARNING: shift/reduce conflict for ARITH_OP in state 344 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 344 resolved as shift
WARNING: shift/reduce conflict for LOG_OP in state 344 resolved as shift
WARNING: shift/reduce conflict for POINTER in state 344 resolved as shift
WARNING: shift/reduce conflict for ARITH_OP in state 345 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 345 resolved as shift
WARNING: shift/reduce conflict for LOG_OP in state 345 resolved as shift
WARNING: shift/reduce conflict for POINTER in state 345 resolved as shift
WARNING: shift/reduce conflict for ARITH_OP in state 346 resolved as shift
WARNING: shift/reduce conflict for REL_OP in state 346 resolved as shift
WARNING: shift/reduce conflict for LOG_OP in state 346 resolved as shift
WARNING: shift/reduce conflict for POINTER in state 346 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 349 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 350 resolved as shift
WARNING: shift/reduce conflict for COLON in state 350 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 351 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 364 resolved as shift
WARNING: shift/reduce conflict for ID in state 364 resolved as shift
WARNING: shift/reduce conflict for VAR in state 364 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 364 resolved as shift
WARNING: shift/reduce conflict for IF in state 364 resolved as shift
WARNING: shift/reduce conflict for FOR in state 364 resolved as shift
WARNING: shift/reduce conflict for GO in state 364 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 364 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 364 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 364 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 364 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 364 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 364 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 385 resolved as shift
WARNING: shift/reduce conflict for ID in state 385 resolved as shift
WARNING: shift/reduce conflict for VAR in state 385 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 385 resolved as shift
WARNING: shift/reduce conflict for IF in state 385 resolved as shift
WARNING: shift/reduce conflict for FOR in state 385 resolved as shift
WARNING: shift/reduce conflict for GO in state 385 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 385 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 385 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 385 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 385 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 385 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 385 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 386 resolved as shift
WARNING: shift/reduce conflict for ID in state 386 resolved as shift
WARNING: shift/reduce conflict for VAR in state 386 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 386 resolved as shift
WARNING: shift/reduce conflict for IF in state 386 resolved as shift
WARNING: shift/reduce conflict for FOR in state 386 resolved as shift
WARNING: shift/reduce conflict for GO in state 386 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 386 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 386 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 386 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 386 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 386 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 386 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 391 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 398 resolved as shift
WARNING: shift/reduce conflict for ID in state 398 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 399 resolved as shift
WARNING: shift/reduce conflict for ID in state 399 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 400 resolved as shift
WARNING: shift/reduce conflict for ID in state 400 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 402 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 413 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 419 resolved as shift
WARNING: shift/reduce conflict for ID in state 419 resolved as shift
WARNING: shift/reduce conflict for VAR in state 419 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 419 resolved as shift
WARNING: shift/reduce conflict for IF in state 419 resolved as shift
WARNING: shift/reduce conflict for FOR in state 419 resolved as shift
WARNING: shift/reduce conflict for GO in state 419 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 419 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 419 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 419 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 419 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 419 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 419 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 420 resolved as shift
WARNING: shift/reduce conflict for ID in state 420 resolved as shift
WARNING: shift/reduce conflict for VAR in state 420 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 420 resolved as shift
WARNING: shift/reduce conflict for IF in state 420 resolved as shift
WARNING: shift/reduce conflict for FOR in state 420 resolved as shift
WARNING: shift/reduce conflict for GO in state 420 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 420 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 420 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 420 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 420 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 420 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 420 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 422 resolved as shift
WARNING: shift/reduce conflict for ID in state 422 resolved as shift
WARNING: shift/reduce conflict for VAR in state 422 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 422 resolved as shift
WARNING: shift/reduce conflict for IF in state 422 resolved as shift
WARNING: shift/reduce conflict for FOR in state 422 resolved as shift
WARNING: shift/reduce conflict for GO in state 422 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 422 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 422 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 422 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 422 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 422 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 422 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 425 resolved as shift
WARNING: shift/reduce conflict for ID in state 425 resolved as shift
WARNING: shift/reduce conflict for VAR in state 425 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 425 resolved as shift
WARNING: shift/reduce conflict for IF in state 425 resolved as shift
WARNING: shift/reduce conflict for FOR in state 425 resolved as shift
WARNING: shift/reduce conflict for GO in state 425 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 425 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 425 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 425 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 425 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 425 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 425 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 437 resolved as shift
WARNING: shift/reduce conflict for ID in state 437 resolved as shift
WARNING: shift/reduce conflict for VAR in state 437 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 437 resolved as shift
WARNING: shift/reduce conflict for IF in state 437 resolved as shift
WARNING: shift/reduce conflict for FOR in state 437 resolved as shift
WARNING: shift/reduce conflict for GO in state 437 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 437 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 437 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 437 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 437 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 437 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 437 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 438 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 444 resolved as shift
WARNING: shift/reduce conflict for ID in state 444 resolved as shift
WARNING: shift/reduce conflict for VAR in state 444 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 444 resolved as shift
WARNING: shift/reduce conflict for IF in state 444 resolved as shift
WARNING: shift/reduce conflict for FOR in state 444 resolved as shift
WARNING: shift/reduce conflict for GO in state 444 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 444 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 444 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 444 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 444 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 444 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 444 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 448 resolved as shift
WARNING: shift/reduce conflict for ID in state 448 resolved as shift
WARNING: shift/reduce conflict for VAR in state 448 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 448 resolved as shift
WARNING: shift/reduce conflict for IF in state 448 resolved as shift
WARNING: shift/reduce conflict for FOR in state 448 resolved as shift
WARNING: shift/reduce conflict for GO in state 448 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 448 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 448 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 448 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 448 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 448 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 448 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 455 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 456 resolved as shift
WARNING: shift/reduce conflict for ID in state 456 resolved as shift
WARNING: shift/reduce conflict for VAR in state 456 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 456 resolved as shift
WARNING: shift/reduce conflict for IF in state 456 resolved as shift
WARNING: shift/reduce conflict for FOR in state 456 resolved as shift
WARNING: shift/reduce conflict for GO in state 456 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 456 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 456 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 456 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 456 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 456 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 456 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 458 resolved as shift
WARNING: shift/reduce conflict for ID in state 458 resolved as shift
WARNING: shift/reduce conflict for VAR in state 458 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 458 resolved as shift
WARNING: shift/reduce conflict for IF in state 458 resolved as shift
WARNING: shift/reduce conflict for FOR in state 458 resolved as shift
WARNING: shift/reduce conflict for GO in state 458 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 458 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 458 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 458 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 458 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 458 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 458 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 464 resolved as shift
WARNING: shift/reduce conflict for ID in state 464 resolved as shift
WARNING: shift/reduce conflict for VAR in state 464 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 464 resolved as shift
WARNING: shift/reduce conflict for IF in state 464 resolved as shift
WARNING: shift/reduce conflict for FOR in state 464 resolved as shift
WARNING: shift/reduce conflict for GO in state 464 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 464 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 464 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 464 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 464 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 464 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 464 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 476 resolved as shift
WARNING: shift/reduce conflict for ID in state 476 resolved as shift
WARNING: shift/reduce conflict for VAR in state 476 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 476 resolved as shift
WARNING: shift/reduce conflict for IF in state 476 resolved as shift
WARNING: shift/reduce conflict for FOR in state 476 resolved as shift
WARNING: shift/reduce conflict for GO in state 476 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 476 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 476 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 476 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 476 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 476 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 476 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 479 resolved as shift
WARNING: shift/reduce conflict for ID in state 479 resolved as shift
WARNING: shift/reduce conflict for VAR in state 479 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 479 resolved as shift
WARNING: shift/reduce conflict for IF in state 479 resolved as shift
WARNING: shift/reduce conflict for FOR in state 479 resolved as shift
WARNING: shift/reduce conflict for GO in state 479 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 479 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 479 resolved as shift
WARNING: shift/reduce conflict for DEFER in state 479 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 479 resolved as shift
WARNING: shift/reduce conflict for SELECT in state 479 resolved as shift
WARNING: shift/reduce conflict for CHANNEL_OP in state 479 resolved as shift
WARNING: reduce/reduce conflict in state 132 resolved using rule (content -> empty)
WARNING: rejected rule (callback -> empty) in state 132
WARNING: reduce/reduce conflict in state 132 resolved using rule (return -> empty)
WARNING: rejected rule (callback -> empty) in state 132
WARNING: reduce/reduce conflict in state 132 resolved using rule (content -> empty)
WARNING: rejected rule (return -> empty) in state 132
WARNING: reduce/reduce conflict in state 157 resolved using rule (return -> RETURN)
WARNING: rejected rule (empty -> <empty>) in state 157
WARNING: reduce/reduce conflict in state 226 resolved using rule (map -> empty)
WARNING: rejected rule (callback -> empty) in state 226
WARNING: reduce/reduce conflict in state 254 resolved using rule (brackets -> LBRACKET NUMBER RBRACKET)
WARNING: rejected rule (pointer -> ID LBRACKET NUMBER RBRACKET) in state 254
WARNING: reduce/reduce conflict in state 274 resolved using rule (parameters -> empty)
WARNING: rejected rule (callback -> empty) in state 274
WARNING: reduce/reduce conflict in state 274 resolved using rule (map -> empty)
WARNING: rejected rule (callback -> empty) in state 274
WARNING: reduce/reduce conflict in state 274 resolved using rule (parameters -> empty)
WARNING: rejected rule (map -> empty) in state 274
WARNING: reduce/reduce conflict in state 293 resolved using rule (values -> empty)
WARNING: rejected rule (map -> empty) in state 293
WARNING: reduce/reduce conflict in state 304 resolved using rule (values -> empty)
WARNING: rejected rule (content -> empty) in state 304
WARNING: reduce/reduce conflict in state 304 resolved using rule (values -> empty)
WARNING: rejected rule (map -> empty) in state 304
WARNING: reduce/reduce conflict in state 304 resolved using rule (values -> empty)
WARNING: rejected rule (callback -> empty) in state 304
WARNING: reduce/reduce conflict in state 304 resolved using rule (return -> empty)
WARNING: rejected rule (callback -> empty) in state 304
WARNING: reduce/reduce conflict in state 304 resolved using rule (values -> empty)
WARNING: rejected rule (return -> empty) in state 304
WARNING: reduce/reduce conflict in state 347 resolved using rule (values -> empty)
WARNING: rejected rule (map -> empty) in state 347
WARNING: reduce/reduce conflict in state 409 resolved using rule (content -> empty)
WARNING: rejected rule (callback -> empty) in state 409
WARNING: reduce/reduce conflict in state 409 resolved using rule (return -> empty)
WARNING: rejected rule (callback -> empty) in state 409
WARNING: reduce/reduce conflict in state 409 resolved using rule (content -> empty)
WARNING: rejected rule (return -> empty) in state 409
WARNING: reduce/reduce conflict in state 409 resolved using rule (values -> empty)
WARNING: rejected rule (content -> empty) in state 409
WARNING: reduce/reduce conflict in state 440 resolved using rule (brackets -> LBRACKET NUMBER RBRACKET)
WARNING: rejected rule (pointer -> ID LBRACKET NUMBER RBRACKET) in state 440
WARNING: Rule (pointer -> ID LBRACKET NUMBER RBRACKET) is never reduced
